{"version":3,"file":"react-phone-number-input-input-mobile.js","sources":["../node_modules/input-format/modules/helpers.js","../node_modules/input-format/modules/closeBraces.js","../node_modules/input-format/modules/templateFormatter.js","../node_modules/input-format/modules/format.js","../node_modules/input-format/modules/dom.js","../node_modules/input-format/modules/inputControl.js","../node_modules/input-format/modules/parse.js","../node_modules/input-format/modules/edit.js","../node_modules/input-format/modules/react/Input.js","../node_modules/libphonenumber-js/es6/ParseError.js","../node_modules/libphonenumber-js/es6/constants.js","../node_modules/libphonenumber-js/es6/tools/semver-compare.js","../node_modules/libphonenumber-js/es6/metadata.js","../node_modules/libphonenumber-js/es6/helpers/extension/createExtensionPattern.js","../node_modules/libphonenumber-js/es6/helpers/isViablePhoneNumber.js","../node_modules/libphonenumber-js/es6/helpers/extension/extractExtension.js","../node_modules/libphonenumber-js/es6/helpers/parseDigits.js","../node_modules/libphonenumber-js/es6/parseIncompletePhoneNumber.js","../node_modules/libphonenumber-js/es6/helpers/mergeArrays.js","../node_modules/libphonenumber-js/es6/helpers/checkNumberLength.js","../node_modules/libphonenumber-js/es6/isPossibleNumber_.js","../node_modules/libphonenumber-js/es6/helpers/RFC3966.js","../node_modules/libphonenumber-js/es6/helpers/matchesEntirely.js","../node_modules/libphonenumber-js/es6/helpers/getNumberType.js","../node_modules/libphonenumber-js/es6/helpers/applyInternationalSeparatorStyle.js","../node_modules/libphonenumber-js/es6/helpers/formatNationalNumberUsingFormat.js","../node_modules/libphonenumber-js/es6/helpers/getIddPrefix.js","../node_modules/libphonenumber-js/es6/format_.js","../node_modules/libphonenumber-js/es6/PhoneNumber.js","../node_modules/libphonenumber-js/es6/validate_.js","../node_modules/libphonenumber-js/es6/helpers/stripIddPrefix.js","../node_modules/libphonenumber-js/es6/helpers/extractNationalNumberFromPossiblyIncompleteNumber.js","../node_modules/libphonenumber-js/es6/helpers/extractNationalNumber.js","../node_modules/libphonenumber-js/es6/helpers/extractCountryCallingCodeFromInternationalNumberWithoutPlusSign.js","../node_modules/libphonenumber-js/es6/helpers/extractCountryCallingCode.js","../node_modules/libphonenumber-js/es6/helpers/getCountryByCallingCode.js","../node_modules/libphonenumber-js/es6/parse_.js","../node_modules/libphonenumber-js/es6/parsePhoneNumber_.js","../node_modules/libphonenumber-js/es6/parsePhoneNumber.js","../node_modules/libphonenumber-js/es6/parsePhoneNumberFromString_.js","../node_modules/libphonenumber-js/es6/parsePhoneNumberFromString.js","../node_modules/libphonenumber-js/es6/isValidPhoneNumber.js","../node_modules/libphonenumber-js/es6/isPossiblePhoneNumber.js","../node_modules/libphonenumber-js/es6/AsYouTypeState.js","../node_modules/libphonenumber-js/es6/AsYouTypeFormatter.util.js","../node_modules/libphonenumber-js/es6/AsYouTypeFormatter.complete.js","../node_modules/libphonenumber-js/es6/AsYouTypeFormatter.PatternMatcher.js","../node_modules/libphonenumber-js/es6/AsYouTypeFormatter.js","../node_modules/libphonenumber-js/es6/AsYouTypeParser.js","../node_modules/libphonenumber-js/es6/AsYouType.js","../node_modules/libphonenumber-js/es6/getCountries.js","../modules/helpers/inputValuePrefix.js","../modules/InputSmart.js","../modules/InputBasic.js","../node_modules/libphonenumber-js/es6/formatIncompletePhoneNumber.js","../modules/helpers/getInternationalPhoneNumberPrefix.js","../modules/libphonenumber/formatPhoneNumber.js","../modules/usePhoneDigits.js","../modules/PhoneInput.js","../modules/PhoneInputBrowser.js","../input-mobile/index.js"],"sourcesContent":["function _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n// Counts all occurences of a symbol in a string\nexport function count_occurences(symbol, string) {\n  var count = 0; // Using `.split('')` here instead of normal `for ... of`\n  // because the importing application doesn't neccessarily include an ES6 polyfill.\n  // The `.split('')` approach discards \"exotic\" UTF-8 characters\n  // (the ones consisting of four bytes)\n  // but template placeholder characters don't fall into that range\n  // so skipping such miscellaneous \"exotic\" characters\n  // won't matter here for just counting placeholder character occurrences.\n\n  for (var _iterator = _createForOfIteratorHelperLoose(string.split('')), _step; !(_step = _iterator()).done;) {\n    var character = _step.value;\n\n    if (character === symbol) {\n      count++;\n    }\n  }\n\n  return count;\n}\n//# sourceMappingURL=helpers.js.map","import { count_occurences } from './helpers.js';\nexport default function closeBraces(retained_template, template) {\n  var placeholder = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'x';\n  var empty_placeholder = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : ' ';\n  var cut_before = retained_template.length;\n  var opening_braces = count_occurences('(', retained_template);\n  var closing_braces = count_occurences(')', retained_template);\n  var dangling_braces = opening_braces - closing_braces;\n\n  while (dangling_braces > 0 && cut_before < template.length) {\n    retained_template += template[cut_before].replace(placeholder, empty_placeholder);\n\n    if (template[cut_before] === ')') {\n      dangling_braces--;\n    }\n\n    cut_before++;\n  }\n\n  return retained_template;\n}\n//# sourceMappingURL=closeBraces.js.map","function _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport { count_occurences } from './helpers.js';\nimport close_braces from './closeBraces.js'; // Takes a `template` where character placeholders\n// are denoted by 'x'es (e.g. 'x (xxx) xxx-xx-xx').\n//\n// Returns a function which takes `value` characters\n// and returns the `template` filled with those characters.\n// If the `template` can only be partially filled\n// then it is cut off.\n//\n// If `should_close_braces` is `true`,\n// then it will also make sure all dangling braces are closed,\n// e.g. \"8 (8\" -> \"8 (8  )\" (iPhone style phone number input).\n//\n\nexport default function (template) {\n  var placeholder = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'x';\n  var should_close_braces = arguments.length > 2 ? arguments[2] : undefined;\n\n  if (!template) {\n    return function (value) {\n      return {\n        text: value\n      };\n    };\n  }\n\n  var characters_in_template = count_occurences(placeholder, template);\n  return function (value) {\n    if (!value) {\n      return {\n        text: '',\n        template: template\n      };\n    }\n\n    var value_character_index = 0;\n    var filled_in_template = ''; // Using `.split('')` here instead of normal `for ... of`\n    // because the importing application doesn't neccessarily include an ES6 polyfill.\n    // The `.split('')` approach discards \"exotic\" UTF-8 characters\n    // (the ones consisting of four bytes)\n    // but template placeholder characters don't fall into that range\n    // and appending UTF-8 characters to a string in parts still works.\n\n    for (var _iterator = _createForOfIteratorHelperLoose(template.split('')), _step; !(_step = _iterator()).done;) {\n      var character = _step.value;\n\n      if (character !== placeholder) {\n        filled_in_template += character;\n        continue;\n      }\n\n      filled_in_template += value[value_character_index];\n      value_character_index++; // If the last available value character has been filled in,\n      // then return the filled in template\n      // (either trim the right part or retain it,\n      //  if no more character placeholders in there)\n\n      if (value_character_index === value.length) {\n        // If there are more character placeholders\n        // in the right part of the template\n        // then simply trim it.\n        if (value.length < characters_in_template) {\n          break;\n        }\n      }\n    }\n\n    if (should_close_braces) {\n      filled_in_template = close_braces(filled_in_template, template);\n    }\n\n    return {\n      text: filled_in_template,\n      template: template\n    };\n  };\n}\n//# sourceMappingURL=templateFormatter.js.map","import template_formatter from './templateFormatter.js'; // Formats `value` value preserving `caret` at the same character.\n//\n// `{ value, caret }` attribute is the result of `parse()` function call.\n//\n// Returns `{ text, caret }` where the new `caret` is the caret position\n// inside `text` text corresponding to the original `caret` position inside `value`.\n//\n// `formatter(value)` is a function returning `{ text, template }`.\n//\n// `text` is the `value` value formatted using `template`.\n// It may either cut off the non-filled right part of the `template`\n// or it may fill the non-filled character placeholders\n// in the right part of the `template` with `spacer`\n// which is a space (' ') character by default.\n//\n// `template` is the template used to format the `value`.\n// It can be either a full-length template or a partial template.\n//\n// `formatter` can also be a string — a `template`\n// where character placeholders are denoted by 'x'es.\n// In this case `formatter` function is automatically created.\n//\n// Example:\n//\n// `value` is '880',\n// `caret` is `2` (before the first `0`)\n//\n// `formatter` is `'880' =>\n//   { text: '8 (80 )', template: 'x (xxx) xxx-xx-xx' }`\n//\n// The result is `{ text: '8 (80 )', caret: 4 }`.\n//\n\nexport default function format(value, caret, formatter) {\n  if (typeof formatter === 'string') {\n    formatter = template_formatter(formatter);\n  }\n\n  var _ref = formatter(value) || {},\n      text = _ref.text,\n      template = _ref.template;\n\n  if (text === undefined) {\n    text = value;\n  }\n\n  if (template) {\n    if (caret === undefined) {\n      caret = text.length;\n    } else {\n      var index = 0;\n      var found = false;\n      var possibly_last_input_character_index = -1;\n\n      while (index < text.length && index < template.length) {\n        // Character placeholder found\n        if (text[index] !== template[index]) {\n          if (caret === 0) {\n            found = true;\n            caret = index;\n            break;\n          }\n\n          possibly_last_input_character_index = index;\n          caret--;\n        }\n\n        index++;\n      } // If the caret was positioned after last input character,\n      // then the text caret index is just after the last input character.\n\n\n      if (!found) {\n        caret = possibly_last_input_character_index + 1;\n      }\n    }\n  }\n\n  return {\n    text: text,\n    caret: caret\n  };\n}\n//# sourceMappingURL=format.js.map","export function isReadOnly(element) {\n  return element.hasAttribute('readonly');\n} // Gets <input/> selection bounds\n\nexport function getSelection(element) {\n  // If no selection, return nothing\n  if (element.selectionStart === element.selectionEnd) {\n    return;\n  }\n\n  return {\n    start: element.selectionStart,\n    end: element.selectionEnd\n  };\n} // Key codes\n\nexport var Keys = {\n  Backspace: 8,\n  Delete: 46\n}; // Finds out the operation to be intercepted and performed\n// based on the key down event `keyCode`.\n\nexport function getOperation(event) {\n  switch (event.keyCode) {\n    case Keys.Backspace:\n      return 'Backspace';\n\n    case Keys.Delete:\n      return 'Delete';\n  }\n} // Gets <input/> caret position\n\nexport function getCaretPosition(element) {\n  return element.selectionStart;\n} // Sets <input/> caret position\n\nexport function setCaretPosition(element, caret_position) {\n  // Sanity check\n  if (caret_position === undefined) {\n    return;\n  } // Set caret position.\n  // There has been an issue with caret positioning on Android devices.\n  // https://github.com/catamphetamine/input-format/issues/2\n  // I was revisiting this issue and looked for similar issues in other libraries.\n  // For example, there's [`text-mask`](https://github.com/text-mask/text-mask) library.\n  // They've had exactly the same issue when the caret seemingly refused to be repositioned programmatically.\n  // The symptoms were the same: whenever the caret passed through a non-digit character of a mask (a whitespace, a bracket, a dash, etc), it looked as if it placed itself one character before its correct position.\n  // https://github.com/text-mask/text-mask/issues/300\n  // They seem to have found a basic fix for it: calling `input.setSelectionRange()` in a timeout rather than instantly for Android devices.\n  // https://github.com/text-mask/text-mask/pull/400/files\n  // I've implemented the same workaround here.\n\n\n  if (isAndroid()) {\n    setTimeout(function () {\n      return element.setSelectionRange(caret_position, caret_position);\n    }, 0);\n  } else {\n    element.setSelectionRange(caret_position, caret_position);\n  }\n}\n\nfunction isAndroid() {\n  // `navigator` is not defined when running mocha tests.\n  if (typeof navigator !== 'undefined') {\n    return ANDROID_USER_AGENT_REG_EXP.test(navigator.userAgent);\n  }\n}\n\nvar ANDROID_USER_AGENT_REG_EXP = /Android/i;\n//# sourceMappingURL=dom.js.map","import edit from './edit.js';\nimport parse from './parse.js';\nimport format from './format.js';\nimport { isReadOnly, getOperation, getSelection, getCaretPosition, setCaretPosition } from './dom.js'; // Deprecated.\n// I don't know why this function exists.\n\nexport function onCut(event, input, _parse, _format, on_change) {\n  if (isReadOnly(input)) {\n    return;\n  } // The actual cut hasn't happened just yet hence the timeout.\n\n\n  setTimeout(function () {\n    return formatInputText(input, _parse, _format, undefined, on_change);\n  }, 0);\n} // Deprecated.\n// I don't know why this function exists.\n\nexport function onPaste(event, input, _parse, _format, on_change) {\n  if (isReadOnly(input)) {\n    return;\n  }\n\n  var selection = getSelection(input); // If selection is made,\n  // just erase the selected text\n  // prior to pasting\n\n  if (selection) {\n    eraseSelection(input, selection);\n  }\n\n  formatInputText(input, _parse, _format, undefined, on_change);\n}\nexport function onChange(event, input, _parse, _format, on_change) {\n  formatInputText(input, _parse, _format, undefined, on_change);\n} // \"Delete\" and \"Backspace\" keys are special\n// in a way that they're not handled by the regular `onChange()` handler\n// and instead are intercepted and re-applied manually.\n// The reason is that normally hitting \"Backspace\" or \"Delete\"\n// results in erasing a character, but that character might be any character,\n// while it would be a better \"user experience\" if it erased not just any character\n// but the closest \"meaningful\" character.\n// For example, if a template is `(xxx) xxx-xxxx`,\n// and the `<input/>` value is `(111) 222-3333`,\n// then, if a user begins erasing the `3333` part via \"Backspace\"\n// and reaches the \"-\" character, then it would just erase the \"-\" character.\n// Nothing wrong with that, but it would be a better \"user experience\"\n// if hitting \"Backspace\" at that position would erase the closest \"meaningful\"\n// character, which would be the rightmost `2`.\n// So, what this `onKeyDown()` handler does is it intercepts\n// \"Backspace\" and \"Delete\" keys and re-applies those operations manually\n// following the logic described above.\n\nexport function onKeyDown(event, input, _parse, _format, on_change) {\n  if (isReadOnly(input)) {\n    return;\n  }\n\n  var operation = getOperation(event);\n\n  switch (operation) {\n    case 'Delete':\n    case 'Backspace':\n      // Intercept this operation and perform it manually.\n      event.preventDefault();\n      var selection = getSelection(input); // If a selection is made, just erase the selected text.\n\n      if (selection) {\n        eraseSelection(input, selection);\n        return formatInputText(input, _parse, _format, undefined, on_change);\n      } // Else, perform the (character erasing) operation manually.\n\n\n      return formatInputText(input, _parse, _format, operation, on_change);\n\n    default: // Will be handled normally as part of the `onChange` handler.\n\n  }\n}\n/**\r\n * Erases the selected text inside an `<input/>`.\r\n * @param  {DOMElement} input\r\n * @param  {Selection} selection\r\n */\n\nfunction eraseSelection(input, selection) {\n  var text = input.value;\n  text = text.slice(0, selection.start) + text.slice(selection.end);\n  input.value = text;\n  setCaretPosition(input, selection.start);\n}\n/**\r\n * Parses and re-formats `<input/>` textual value.\r\n * E.g. when a user enters something into the `<input/>`\r\n * that raw input must first be parsed and the re-formatted properly.\r\n * Is called either after some user input (e.g. entered a character, pasted something)\r\n * or after the user performed an `operation` (e.g. \"Backspace\", \"Delete\").\r\n * @param  {DOMElement} input\r\n * @param  {Function} parse\r\n * @param  {Function} format\r\n * @param  {string} [operation] - The operation that triggered `<input/>` textual value change. E.g. \"Backspace\", \"Delete\".\r\n * @param  {Function} onChange\r\n */\n\n\nfunction formatInputText(input, _parse, _format, operation, on_change) {\n  // Parse `<input/>` textual value.\n  // Get the `value` and `caret` position.\n  var _parse2 = parse(input.value, getCaretPosition(input), _parse),\n      value = _parse2.value,\n      caret = _parse2.caret; // If a user performed an operation (\"Backspace\", \"Delete\")\n  // then apply that operation and get the new `value` and `caret` position.\n\n\n  if (operation) {\n    var newValueAndCaret = edit(value, caret, operation);\n    value = newValueAndCaret.value;\n    caret = newValueAndCaret.caret;\n  } // Format the `value`.\n  // (and reposition the caret accordingly)\n\n\n  var formatted = format(value, caret, _format);\n  var text = formatted.text;\n  caret = formatted.caret; // Set `<input/>` textual value manually\n  // to prevent React from resetting the caret position\n  // later inside a subsequent `render()`.\n  // Doesn't work for custom `inputComponent`s for some reason.\n\n  input.value = text; // Position the caret properly.\n\n  setCaretPosition(input, caret); // If the `<input/>` textual value did change,\n  // then the parsed `value` may have changed too.\n\n  on_change(value);\n}\n//# sourceMappingURL=inputControl.js.map","// Parses the `text`.\n//\n// Returns `{ value, caret }` where `caret` is\n// the caret position inside `value`\n// corresponding to the `caret_position` inside `text`.\n//\n// The `text` is parsed by feeding each character sequentially to\n// `parse_character(character, value)` function\n// and appending the result (if it's not `undefined`) to `value`.\n//\n// Example:\n//\n// `text` is `8 (800) 555-35-35`,\n// `caret_position` is `4` (before the first `0`).\n// `parse_character` is `(character, value) =>\n//   if (character >= '0' && character <= '9') { return character }`.\n//\n// then `parse()` outputs `{ value: '88005553535', caret: 2 }`.\n//\nexport default function parse(text, caret_position, parse_character) {\n  var value = '';\n  var focused_input_character_index = 0;\n  var index = 0;\n\n  while (index < text.length) {\n    var character = parse_character(text[index], value);\n\n    if (character !== undefined) {\n      value += character;\n\n      if (caret_position !== undefined) {\n        if (caret_position === index) {\n          focused_input_character_index = value.length - 1;\n        } else if (caret_position > index) {\n          focused_input_character_index = value.length;\n        }\n      }\n    }\n\n    index++;\n  } // If caret position wasn't specified\n\n\n  if (caret_position === undefined) {\n    // Then set caret position to \"after the last input character\"\n    focused_input_character_index = value.length;\n  }\n\n  var result = {\n    value: value,\n    caret: focused_input_character_index\n  };\n  return result;\n}\n//# sourceMappingURL=parse.js.map","// Edits text `value` (if `operation` is passed) and repositions the `caret` if needed.\n//\n// Example:\n//\n// value - '88005553535'\n// caret - 2 // starting from 0; is positioned before the first zero\n// operation - 'Backspace'\n//\n// Returns\n// {\n// \tvalue: '8005553535'\n// \tcaret: 1\n// }\n//\n// Currently supports just 'Delete' and 'Backspace' operations\n//\nexport default function edit(value, caret, operation) {\n  switch (operation) {\n    case 'Backspace':\n      // If there exists the previous character,\n      // then erase it and reposition the caret.\n      if (caret > 0) {\n        // Remove the previous character\n        value = value.slice(0, caret - 1) + value.slice(caret); // Position the caret where the previous (erased) character was\n\n        caret--;\n      }\n\n      break;\n\n    case 'Delete':\n      // Remove current digit (if any)\n      value = value.slice(0, caret) + value.slice(caret + 1);\n      break;\n  }\n\n  return {\n    value: value,\n    caret: caret\n  };\n}\n//# sourceMappingURL=edit.js.map","var _excluded = [\"value\", \"parse\", \"format\", \"inputComponent\", \"onChange\", \"onKeyDown\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n// This is just `./ReactInput.js` rewritten in Hooks.\nimport React, { useCallback, useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport { onChange as onInputChange, onKeyDown as onInputKeyDown } from '../inputControl.js'; // Usage:\n//\n// <ReactInput\n// \tvalue={this.state.phone}\n// \tonChange={phone => this.setState({ phone })}\n// \tparse={character => character}\n// \tformat={value => ({ text: value, template: 'xxxxxxxx' })}/>\n//\n\nfunction Input(_ref, ref) {\n  var value = _ref.value,\n      parse = _ref.parse,\n      format = _ref.format,\n      InputComponent = _ref.inputComponent,\n      onChange = _ref.onChange,\n      onKeyDown = _ref.onKeyDown,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  var internalRef = useRef();\n  var setRef = useCallback(function (instance) {\n    internalRef.current = instance;\n\n    if (ref) {\n      if (typeof ref === 'function') {\n        ref(instance);\n      } else {\n        ref.current = instance;\n      }\n    }\n  }, [ref]);\n\n  var _onChange = useCallback(function (event) {\n    return onInputChange(event, internalRef.current, parse, format, onChange);\n  }, [internalRef, parse, format, onChange]);\n\n  var _onKeyDown = useCallback(function (event) {\n    if (onKeyDown) {\n      onKeyDown(event);\n    }\n\n    return onInputKeyDown(event, internalRef.current, parse, format, onChange);\n  }, [internalRef, parse, format, onChange, onKeyDown]);\n\n  return /*#__PURE__*/React.createElement(InputComponent, _extends({}, rest, {\n    ref: setRef,\n    value: format(isEmptyValue(value) ? '' : value).text,\n    onKeyDown: _onKeyDown,\n    onChange: _onChange\n  }));\n}\n\nInput = /*#__PURE__*/React.forwardRef(Input);\nInput.propTypes = {\n  // Parses a single characher of `<input/>` text.\n  parse: PropTypes.func.isRequired,\n  // Formats `value` into `<input/>` text.\n  format: PropTypes.func.isRequired,\n  // Renders `<input/>` by default.\n  inputComponent: PropTypes.elementType.isRequired,\n  // `<input/>` `type` attribute.\n  type: PropTypes.string.isRequired,\n  // Is parsed from <input/> text.\n  value: PropTypes.string,\n  // This handler is called each time `<input/>` text is changed.\n  onChange: PropTypes.func.isRequired,\n  // Passthrough\n  onKeyDown: PropTypes.func,\n  onCut: PropTypes.func,\n  onPaste: PropTypes.func\n};\nInput.defaultProps = {\n  // Renders `<input/>` by default.\n  inputComponent: 'input',\n  // `<input/>` `type` attribute.\n  type: 'text'\n};\nexport default Input;\n\nfunction isEmptyValue(value) {\n  return value === undefined || value === null;\n}\n//# sourceMappingURL=Input.js.map","function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, \"prototype\", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } else if (call !== void 0) { throw new TypeError(\"Derived constructors may only return object or undefined\"); } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _wrapNativeSuper(Class) { var _cache = typeof Map === \"function\" ? new Map() : undefined; _wrapNativeSuper = function _wrapNativeSuper(Class) { if (Class === null || !_isNativeFunction(Class)) return Class; if (typeof Class !== \"function\") { throw new TypeError(\"Super expression must either be null or a function\"); } if (typeof _cache !== \"undefined\") { if (_cache.has(Class)) return _cache.get(Class); _cache.set(Class, Wrapper); } function Wrapper() { return _construct(Class, arguments, _getPrototypeOf(this).constructor); } Wrapper.prototype = Object.create(Class.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } }); return _setPrototypeOf(Wrapper, Class); }; return _wrapNativeSuper(Class); }\n\nfunction _construct(Parent, args, Class) { if (_isNativeReflectConstruct()) { _construct = Reflect.construct; } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _isNativeFunction(fn) { return Function.toString.call(fn).indexOf(\"[native code]\") !== -1; }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\n// https://stackoverflow.com/a/46971044/970769\n// \"Breaking changes in Typescript 2.1\"\n// \"Extending built-ins like Error, Array, and Map may no longer work.\"\n// \"As a recommendation, you can manually adjust the prototype immediately after any super(...) calls.\"\n// https://github.com/Microsoft/TypeScript-wiki/blob/main/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\nvar ParseError = /*#__PURE__*/function (_Error) {\n  _inherits(ParseError, _Error);\n\n  var _super = _createSuper(ParseError);\n\n  function ParseError(code) {\n    var _this;\n\n    _classCallCheck(this, ParseError);\n\n    _this = _super.call(this, code); // Set the prototype explicitly.\n    // Any subclass of FooError will have to manually set the prototype as well.\n\n    Object.setPrototypeOf(_assertThisInitialized(_this), ParseError.prototype);\n    _this.name = _this.constructor.name;\n    return _this;\n  }\n\n  return _createClass(ParseError);\n}( /*#__PURE__*/_wrapNativeSuper(Error));\n\nexport { ParseError as default };\n//# sourceMappingURL=ParseError.js.map","// The minimum length of the national significant number.\nexport var MIN_LENGTH_FOR_NSN = 2; // The ITU says the maximum length should be 15,\n// but one can find longer numbers in Germany.\n\nexport var MAX_LENGTH_FOR_NSN = 17; // The maximum length of the country calling code.\n\nexport var MAX_LENGTH_COUNTRY_CODE = 3; // Digits accepted in phone numbers\n// (ascii, fullwidth, arabic-indic, and eastern arabic digits).\n\nexport var VALID_DIGITS = \"0-9\\uFF10-\\uFF19\\u0660-\\u0669\\u06F0-\\u06F9\"; // `DASHES` will be right after the opening square bracket of the \"character class\"\n\nvar DASHES = \"-\\u2010-\\u2015\\u2212\\u30FC\\uFF0D\";\nvar SLASHES = \"\\uFF0F/\";\nvar DOTS = \"\\uFF0E.\";\nexport var WHITESPACE = \" \\xA0\\xAD\\u200B\\u2060\\u3000\";\nvar BRACKETS = \"()\\uFF08\\uFF09\\uFF3B\\uFF3D\\\\[\\\\]\"; // export const OPENING_BRACKETS = '(\\uFF08\\uFF3B\\\\\\['\n\nvar TILDES = \"~\\u2053\\u223C\\uFF5E\"; // Regular expression of acceptable punctuation found in phone numbers. This\n// excludes punctuation found as a leading character only. This consists of dash\n// characters, white space characters, full stops, slashes, square brackets,\n// parentheses and tildes. Full-width variants are also present.\n\nexport var VALID_PUNCTUATION = \"\".concat(DASHES).concat(SLASHES).concat(DOTS).concat(WHITESPACE).concat(BRACKETS).concat(TILDES);\nexport var PLUS_CHARS = \"+\\uFF0B\"; // const LEADING_PLUS_CHARS_PATTERN = new RegExp('^[' + PLUS_CHARS + ']+')\n//# sourceMappingURL=constants.js.map","// Copy-pasted from:\n// https://github.com/substack/semver-compare/blob/master/index.js\n//\n// Inlining this function because some users reported issues with\n// importing from `semver-compare` in a browser with ES6 \"native\" modules.\n//\n// Fixes `semver-compare` not being able to compare versions with alpha/beta/etc \"tags\".\n// https://github.com/catamphetamine/libphonenumber-js/issues/381\nexport default function (a, b) {\n  a = a.split('-');\n  b = b.split('-');\n  var pa = a[0].split('.');\n  var pb = b[0].split('.');\n\n  for (var i = 0; i < 3; i++) {\n    var na = Number(pa[i]);\n    var nb = Number(pb[i]);\n    if (na > nb) return 1;\n    if (nb > na) return -1;\n    if (!isNaN(na) && isNaN(nb)) return 1;\n    if (isNaN(na) && !isNaN(nb)) return -1;\n  }\n\n  if (a[1] && b[1]) {\n    return a[1] > b[1] ? 1 : a[1] < b[1] ? -1 : 0;\n  }\n\n  return !a[1] && b[1] ? 1 : a[1] && !b[1] ? -1 : 0;\n}\n//# sourceMappingURL=semver-compare.js.map","function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\n\nimport compare from './tools/semver-compare.js'; // Added \"possibleLengths\" and renamed\n// \"country_phone_code_to_countries\" to \"country_calling_codes\".\n\nvar V2 = '1.0.18'; // Added \"idd_prefix\" and \"default_idd_prefix\".\n\nvar V3 = '1.2.0'; // Moved `001` country code to \"nonGeographic\" section of metadata.\n\nvar V4 = '1.7.35';\nvar DEFAULT_EXT_PREFIX = ' ext. ';\nvar CALLING_CODE_REG_EXP = /^\\d+$/;\n/**\r\n * See: https://gitlab.com/catamphetamine/libphonenumber-js/blob/master/METADATA.md\r\n */\n\nvar Metadata = /*#__PURE__*/function () {\n  function Metadata(metadata) {\n    _classCallCheck(this, Metadata);\n\n    validateMetadata(metadata);\n    this.metadata = metadata;\n    setVersion.call(this, metadata);\n  }\n\n  _createClass(Metadata, [{\n    key: \"getCountries\",\n    value: function getCountries() {\n      return Object.keys(this.metadata.countries).filter(function (_) {\n        return _ !== '001';\n      });\n    }\n  }, {\n    key: \"getCountryMetadata\",\n    value: function getCountryMetadata(countryCode) {\n      return this.metadata.countries[countryCode];\n    }\n  }, {\n    key: \"nonGeographic\",\n    value: function nonGeographic() {\n      if (this.v1 || this.v2 || this.v3) return; // `nonGeographical` was a typo.\n      // It's present in metadata generated from `1.7.35` to `1.7.37`.\n      // The test case could be found by searching for \"nonGeographical\".\n\n      return this.metadata.nonGeographic || this.metadata.nonGeographical;\n    }\n  }, {\n    key: \"hasCountry\",\n    value: function hasCountry(country) {\n      return this.getCountryMetadata(country) !== undefined;\n    }\n  }, {\n    key: \"hasCallingCode\",\n    value: function hasCallingCode(callingCode) {\n      if (this.getCountryCodesForCallingCode(callingCode)) {\n        return true;\n      }\n\n      if (this.nonGeographic()) {\n        if (this.nonGeographic()[callingCode]) {\n          return true;\n        }\n      } else {\n        // A hacky workaround for old custom metadata (generated before V4).\n        var countryCodes = this.countryCallingCodes()[callingCode];\n\n        if (countryCodes && countryCodes.length === 1 && countryCodes[0] === '001') {\n          return true;\n        }\n      }\n    }\n  }, {\n    key: \"isNonGeographicCallingCode\",\n    value: function isNonGeographicCallingCode(callingCode) {\n      if (this.nonGeographic()) {\n        return this.nonGeographic()[callingCode] ? true : false;\n      } else {\n        return this.getCountryCodesForCallingCode(callingCode) ? false : true;\n      }\n    } // Deprecated.\n\n  }, {\n    key: \"country\",\n    value: function country(countryCode) {\n      return this.selectNumberingPlan(countryCode);\n    }\n  }, {\n    key: \"selectNumberingPlan\",\n    value: function selectNumberingPlan(countryCode, callingCode) {\n      // Supports just passing `callingCode` as the first argument.\n      if (countryCode && CALLING_CODE_REG_EXP.test(countryCode)) {\n        callingCode = countryCode;\n        countryCode = null;\n      }\n\n      if (countryCode && countryCode !== '001') {\n        if (!this.hasCountry(countryCode)) {\n          throw new Error(\"Unknown country: \".concat(countryCode));\n        }\n\n        this.numberingPlan = new NumberingPlan(this.getCountryMetadata(countryCode), this);\n      } else if (callingCode) {\n        if (!this.hasCallingCode(callingCode)) {\n          throw new Error(\"Unknown calling code: \".concat(callingCode));\n        }\n\n        this.numberingPlan = new NumberingPlan(this.getNumberingPlanMetadata(callingCode), this);\n      } else {\n        this.numberingPlan = undefined;\n      }\n\n      return this;\n    }\n  }, {\n    key: \"getCountryCodesForCallingCode\",\n    value: function getCountryCodesForCallingCode(callingCode) {\n      var countryCodes = this.countryCallingCodes()[callingCode];\n\n      if (countryCodes) {\n        // Metadata before V4 included \"non-geographic entity\" calling codes\n        // inside `country_calling_codes` (for example, `\"881\":[\"001\"]`).\n        // Now the semantics of `country_calling_codes` has changed:\n        // it's specifically for \"countries\" now.\n        // Older versions of custom metadata will simply skip parsing\n        // \"non-geographic entity\" phone numbers with new versions\n        // of this library: it's not considered a bug,\n        // because such numbers are extremely rare,\n        // and developers extremely rarely use custom metadata.\n        if (countryCodes.length === 1 && countryCodes[0].length === 3) {\n          return;\n        }\n\n        return countryCodes;\n      }\n    }\n  }, {\n    key: \"getCountryCodeForCallingCode\",\n    value: function getCountryCodeForCallingCode(callingCode) {\n      var countryCodes = this.getCountryCodesForCallingCode(callingCode);\n\n      if (countryCodes) {\n        return countryCodes[0];\n      }\n    }\n  }, {\n    key: \"getNumberingPlanMetadata\",\n    value: function getNumberingPlanMetadata(callingCode) {\n      var countryCode = this.getCountryCodeForCallingCode(callingCode);\n\n      if (countryCode) {\n        return this.getCountryMetadata(countryCode);\n      }\n\n      if (this.nonGeographic()) {\n        var metadata = this.nonGeographic()[callingCode];\n\n        if (metadata) {\n          return metadata;\n        }\n      } else {\n        // A hacky workaround for old custom metadata (generated before V4).\n        // In that metadata, there was no concept of \"non-geographic\" metadata\n        // so metadata for `001` country code was stored along with other countries.\n        // The test case can be found by searching for:\n        // \"should work around `nonGeographic` metadata not existing\".\n        var countryCodes = this.countryCallingCodes()[callingCode];\n\n        if (countryCodes && countryCodes.length === 1 && countryCodes[0] === '001') {\n          return this.metadata.countries['001'];\n        }\n      }\n    } // Deprecated.\n\n  }, {\n    key: \"countryCallingCode\",\n    value: function countryCallingCode() {\n      return this.numberingPlan.callingCode();\n    } // Deprecated.\n\n  }, {\n    key: \"IDDPrefix\",\n    value: function IDDPrefix() {\n      return this.numberingPlan.IDDPrefix();\n    } // Deprecated.\n\n  }, {\n    key: \"defaultIDDPrefix\",\n    value: function defaultIDDPrefix() {\n      return this.numberingPlan.defaultIDDPrefix();\n    } // Deprecated.\n\n  }, {\n    key: \"nationalNumberPattern\",\n    value: function nationalNumberPattern() {\n      return this.numberingPlan.nationalNumberPattern();\n    } // Deprecated.\n\n  }, {\n    key: \"possibleLengths\",\n    value: function possibleLengths() {\n      return this.numberingPlan.possibleLengths();\n    } // Deprecated.\n\n  }, {\n    key: \"formats\",\n    value: function formats() {\n      return this.numberingPlan.formats();\n    } // Deprecated.\n\n  }, {\n    key: \"nationalPrefixForParsing\",\n    value: function nationalPrefixForParsing() {\n      return this.numberingPlan.nationalPrefixForParsing();\n    } // Deprecated.\n\n  }, {\n    key: \"nationalPrefixTransformRule\",\n    value: function nationalPrefixTransformRule() {\n      return this.numberingPlan.nationalPrefixTransformRule();\n    } // Deprecated.\n\n  }, {\n    key: \"leadingDigits\",\n    value: function leadingDigits() {\n      return this.numberingPlan.leadingDigits();\n    } // Deprecated.\n\n  }, {\n    key: \"hasTypes\",\n    value: function hasTypes() {\n      return this.numberingPlan.hasTypes();\n    } // Deprecated.\n\n  }, {\n    key: \"type\",\n    value: function type(_type) {\n      return this.numberingPlan.type(_type);\n    } // Deprecated.\n\n  }, {\n    key: \"ext\",\n    value: function ext() {\n      return this.numberingPlan.ext();\n    }\n  }, {\n    key: \"countryCallingCodes\",\n    value: function countryCallingCodes() {\n      if (this.v1) return this.metadata.country_phone_code_to_countries;\n      return this.metadata.country_calling_codes;\n    } // Deprecated.\n\n  }, {\n    key: \"chooseCountryByCountryCallingCode\",\n    value: function chooseCountryByCountryCallingCode(callingCode) {\n      return this.selectNumberingPlan(callingCode);\n    }\n  }, {\n    key: \"hasSelectedNumberingPlan\",\n    value: function hasSelectedNumberingPlan() {\n      return this.numberingPlan !== undefined;\n    }\n  }]);\n\n  return Metadata;\n}();\n\nexport { Metadata as default };\n\nvar NumberingPlan = /*#__PURE__*/function () {\n  function NumberingPlan(metadata, globalMetadataObject) {\n    _classCallCheck(this, NumberingPlan);\n\n    this.globalMetadataObject = globalMetadataObject;\n    this.metadata = metadata;\n    setVersion.call(this, globalMetadataObject.metadata);\n  }\n\n  _createClass(NumberingPlan, [{\n    key: \"callingCode\",\n    value: function callingCode() {\n      return this.metadata[0];\n    } // Formatting information for regions which share\n    // a country calling code is contained by only one region\n    // for performance reasons. For example, for NANPA region\n    // (\"North American Numbering Plan Administration\",\n    //  which includes USA, Canada, Cayman Islands, Bahamas, etc)\n    // it will be contained in the metadata for `US`.\n\n  }, {\n    key: \"getDefaultCountryMetadataForRegion\",\n    value: function getDefaultCountryMetadataForRegion() {\n      return this.globalMetadataObject.getNumberingPlanMetadata(this.callingCode());\n    } // Is always present.\n\n  }, {\n    key: \"IDDPrefix\",\n    value: function IDDPrefix() {\n      if (this.v1 || this.v2) return;\n      return this.metadata[1];\n    } // Is only present when a country supports multiple IDD prefixes.\n\n  }, {\n    key: \"defaultIDDPrefix\",\n    value: function defaultIDDPrefix() {\n      if (this.v1 || this.v2) return;\n      return this.metadata[12];\n    }\n  }, {\n    key: \"nationalNumberPattern\",\n    value: function nationalNumberPattern() {\n      if (this.v1 || this.v2) return this.metadata[1];\n      return this.metadata[2];\n    } // \"possible length\" data is always present in Google's metadata.\n\n  }, {\n    key: \"possibleLengths\",\n    value: function possibleLengths() {\n      if (this.v1) return;\n      return this.metadata[this.v2 ? 2 : 3];\n    }\n  }, {\n    key: \"_getFormats\",\n    value: function _getFormats(metadata) {\n      return metadata[this.v1 ? 2 : this.v2 ? 3 : 4];\n    } // For countries of the same region (e.g. NANPA)\n    // formats are all stored in the \"main\" country for that region.\n    // E.g. \"RU\" and \"KZ\", \"US\" and \"CA\".\n\n  }, {\n    key: \"formats\",\n    value: function formats() {\n      var _this = this;\n\n      var formats = this._getFormats(this.metadata) || this._getFormats(this.getDefaultCountryMetadataForRegion()) || [];\n      return formats.map(function (_) {\n        return new Format(_, _this);\n      });\n    }\n  }, {\n    key: \"nationalPrefix\",\n    value: function nationalPrefix() {\n      return this.metadata[this.v1 ? 3 : this.v2 ? 4 : 5];\n    }\n  }, {\n    key: \"_getNationalPrefixFormattingRule\",\n    value: function _getNationalPrefixFormattingRule(metadata) {\n      return metadata[this.v1 ? 4 : this.v2 ? 5 : 6];\n    } // For countries of the same region (e.g. NANPA)\n    // national prefix formatting rule is stored in the \"main\" country for that region.\n    // E.g. \"RU\" and \"KZ\", \"US\" and \"CA\".\n\n  }, {\n    key: \"nationalPrefixFormattingRule\",\n    value: function nationalPrefixFormattingRule() {\n      return this._getNationalPrefixFormattingRule(this.metadata) || this._getNationalPrefixFormattingRule(this.getDefaultCountryMetadataForRegion());\n    }\n  }, {\n    key: \"_nationalPrefixForParsing\",\n    value: function _nationalPrefixForParsing() {\n      return this.metadata[this.v1 ? 5 : this.v2 ? 6 : 7];\n    }\n  }, {\n    key: \"nationalPrefixForParsing\",\n    value: function nationalPrefixForParsing() {\n      // If `national_prefix_for_parsing` is not set explicitly,\n      // then infer it from `national_prefix` (if any)\n      return this._nationalPrefixForParsing() || this.nationalPrefix();\n    }\n  }, {\n    key: \"nationalPrefixTransformRule\",\n    value: function nationalPrefixTransformRule() {\n      return this.metadata[this.v1 ? 6 : this.v2 ? 7 : 8];\n    }\n  }, {\n    key: \"_getNationalPrefixIsOptionalWhenFormatting\",\n    value: function _getNationalPrefixIsOptionalWhenFormatting() {\n      return !!this.metadata[this.v1 ? 7 : this.v2 ? 8 : 9];\n    } // For countries of the same region (e.g. NANPA)\n    // \"national prefix is optional when formatting\" flag is\n    // stored in the \"main\" country for that region.\n    // E.g. \"RU\" and \"KZ\", \"US\" and \"CA\".\n\n  }, {\n    key: \"nationalPrefixIsOptionalWhenFormattingInNationalFormat\",\n    value: function nationalPrefixIsOptionalWhenFormattingInNationalFormat() {\n      return this._getNationalPrefixIsOptionalWhenFormatting(this.metadata) || this._getNationalPrefixIsOptionalWhenFormatting(this.getDefaultCountryMetadataForRegion());\n    }\n  }, {\n    key: \"leadingDigits\",\n    value: function leadingDigits() {\n      return this.metadata[this.v1 ? 8 : this.v2 ? 9 : 10];\n    }\n  }, {\n    key: \"types\",\n    value: function types() {\n      return this.metadata[this.v1 ? 9 : this.v2 ? 10 : 11];\n    }\n  }, {\n    key: \"hasTypes\",\n    value: function hasTypes() {\n      // Versions 1.2.0 - 1.2.4: can be `[]`.\n\n      /* istanbul ignore next */\n      if (this.types() && this.types().length === 0) {\n        return false;\n      } // Versions <= 1.2.4: can be `undefined`.\n      // Version >= 1.2.5: can be `0`.\n\n\n      return !!this.types();\n    }\n  }, {\n    key: \"type\",\n    value: function type(_type2) {\n      if (this.hasTypes() && getType(this.types(), _type2)) {\n        return new Type(getType(this.types(), _type2), this);\n      }\n    }\n  }, {\n    key: \"ext\",\n    value: function ext() {\n      if (this.v1 || this.v2) return DEFAULT_EXT_PREFIX;\n      return this.metadata[13] || DEFAULT_EXT_PREFIX;\n    }\n  }]);\n\n  return NumberingPlan;\n}();\n\nvar Format = /*#__PURE__*/function () {\n  function Format(format, metadata) {\n    _classCallCheck(this, Format);\n\n    this._format = format;\n    this.metadata = metadata;\n  }\n\n  _createClass(Format, [{\n    key: \"pattern\",\n    value: function pattern() {\n      return this._format[0];\n    }\n  }, {\n    key: \"format\",\n    value: function format() {\n      return this._format[1];\n    }\n  }, {\n    key: \"leadingDigitsPatterns\",\n    value: function leadingDigitsPatterns() {\n      return this._format[2] || [];\n    }\n  }, {\n    key: \"nationalPrefixFormattingRule\",\n    value: function nationalPrefixFormattingRule() {\n      return this._format[3] || this.metadata.nationalPrefixFormattingRule();\n    }\n  }, {\n    key: \"nationalPrefixIsOptionalWhenFormattingInNationalFormat\",\n    value: function nationalPrefixIsOptionalWhenFormattingInNationalFormat() {\n      return !!this._format[4] || this.metadata.nationalPrefixIsOptionalWhenFormattingInNationalFormat();\n    }\n  }, {\n    key: \"nationalPrefixIsMandatoryWhenFormattingInNationalFormat\",\n    value: function nationalPrefixIsMandatoryWhenFormattingInNationalFormat() {\n      // National prefix is omitted if there's no national prefix formatting rule\n      // set for this country, or when the national prefix formatting rule\n      // contains no national prefix itself, or when this rule is set but\n      // national prefix is optional for this phone number format\n      // (and it is not enforced explicitly)\n      return this.usesNationalPrefix() && !this.nationalPrefixIsOptionalWhenFormattingInNationalFormat();\n    } // Checks whether national prefix formatting rule contains national prefix.\n\n  }, {\n    key: \"usesNationalPrefix\",\n    value: function usesNationalPrefix() {\n      return this.nationalPrefixFormattingRule() && // Check that national prefix formatting rule is not a \"dummy\" one.\n      !FIRST_GROUP_ONLY_PREFIX_PATTERN.test(this.nationalPrefixFormattingRule()) // In compressed metadata, `this.nationalPrefixFormattingRule()` is `0`\n      // when `national_prefix_formatting_rule` is not present.\n      // So, `true` or `false` are returned explicitly here, so that\n      // `0` number isn't returned.\n      ? true : false;\n    }\n  }, {\n    key: \"internationalFormat\",\n    value: function internationalFormat() {\n      return this._format[5] || this.format();\n    }\n  }]);\n\n  return Format;\n}();\n/**\r\n * A pattern that is used to determine if the national prefix formatting rule\r\n * has the first group only, i.e., does not start with the national prefix.\r\n * Note that the pattern explicitly allows for unbalanced parentheses.\r\n */\n\n\nvar FIRST_GROUP_ONLY_PREFIX_PATTERN = /^\\(?\\$1\\)?$/;\n\nvar Type = /*#__PURE__*/function () {\n  function Type(type, metadata) {\n    _classCallCheck(this, Type);\n\n    this.type = type;\n    this.metadata = metadata;\n  }\n\n  _createClass(Type, [{\n    key: \"pattern\",\n    value: function pattern() {\n      if (this.metadata.v1) return this.type;\n      return this.type[0];\n    }\n  }, {\n    key: \"possibleLengths\",\n    value: function possibleLengths() {\n      if (this.metadata.v1) return;\n      return this.type[1] || this.metadata.possibleLengths();\n    }\n  }]);\n\n  return Type;\n}();\n\nfunction getType(types, type) {\n  switch (type) {\n    case 'FIXED_LINE':\n      return types[0];\n\n    case 'MOBILE':\n      return types[1];\n\n    case 'TOLL_FREE':\n      return types[2];\n\n    case 'PREMIUM_RATE':\n      return types[3];\n\n    case 'PERSONAL_NUMBER':\n      return types[4];\n\n    case 'VOICEMAIL':\n      return types[5];\n\n    case 'UAN':\n      return types[6];\n\n    case 'PAGER':\n      return types[7];\n\n    case 'VOIP':\n      return types[8];\n\n    case 'SHARED_COST':\n      return types[9];\n  }\n}\n\nexport function validateMetadata(metadata) {\n  if (!metadata) {\n    throw new Error('[libphonenumber-js] `metadata` argument not passed. Check your arguments.');\n  } // `country_phone_code_to_countries` was renamed to\n  // `country_calling_codes` in `1.0.18`.\n\n\n  if (!is_object(metadata) || !is_object(metadata.countries)) {\n    throw new Error(\"[libphonenumber-js] `metadata` argument was passed but it's not a valid metadata. Must be an object having `.countries` child object property. Got \".concat(is_object(metadata) ? 'an object of shape: { ' + Object.keys(metadata).join(', ') + ' }' : 'a ' + type_of(metadata) + ': ' + metadata, \".\"));\n  }\n} // Babel transforms `typeof` into some \"branches\"\n// so istanbul will show this as \"branch not covered\".\n\n/* istanbul ignore next */\n\nvar is_object = function is_object(_) {\n  return _typeof(_) === 'object';\n}; // Babel transforms `typeof` into some \"branches\"\n// so istanbul will show this as \"branch not covered\".\n\n/* istanbul ignore next */\n\n\nvar type_of = function type_of(_) {\n  return _typeof(_);\n};\n/**\r\n * Returns extension prefix for a country.\r\n * @param  {string} country\r\n * @param  {object} metadata\r\n * @return {string?}\r\n * @example\r\n * // Returns \" ext. \"\r\n * getExtPrefix(\"US\")\r\n */\n\n\nexport function getExtPrefix(country, metadata) {\n  metadata = new Metadata(metadata);\n\n  if (metadata.hasCountry(country)) {\n    return metadata.country(country).ext();\n  }\n\n  return DEFAULT_EXT_PREFIX;\n}\n/**\r\n * Returns \"country calling code\" for a country.\r\n * Throws an error if the country doesn't exist or isn't supported by this library.\r\n * @param  {string} country\r\n * @param  {object} metadata\r\n * @return {string}\r\n * @example\r\n * // Returns \"44\"\r\n * getCountryCallingCode(\"GB\")\r\n */\n\nexport function getCountryCallingCode(country, metadata) {\n  metadata = new Metadata(metadata);\n\n  if (metadata.hasCountry(country)) {\n    return metadata.country(country).countryCallingCode();\n  }\n\n  throw new Error(\"Unknown country: \".concat(country));\n}\nexport function isSupportedCountry(country, metadata) {\n  // metadata = new Metadata(metadata)\n  // return metadata.hasCountry(country)\n  return metadata.countries[country] !== undefined;\n}\n\nfunction setVersion(metadata) {\n  var version = metadata.version;\n\n  if (typeof version === 'number') {\n    this.v1 = version === 1;\n    this.v2 = version === 2;\n    this.v3 = version === 3;\n    this.v4 = version === 4;\n  } else {\n    if (!version) {\n      this.v1 = true;\n    } else if (compare(version, V3) === -1) {\n      this.v2 = true;\n    } else if (compare(version, V4) === -1) {\n      this.v3 = true;\n    } else {\n      this.v4 = true;\n    }\n  }\n} // const ISO_COUNTRY_CODE = /^[A-Z]{2}$/\n// function isCountryCode(countryCode) {\n// \treturn ISO_COUNTRY_CODE.test(countryCodeOrCountryCallingCode)\n// }\n//# sourceMappingURL=metadata.js.map","import { VALID_DIGITS } from '../../constants.js'; // The RFC 3966 format for extensions.\n\nvar RFC3966_EXTN_PREFIX = ';ext=';\n/**\r\n * Helper method for constructing regular expressions for parsing. Creates\r\n * an expression that captures up to max_length digits.\r\n * @return {string} RegEx pattern to capture extension digits.\r\n */\n\nvar getExtensionDigitsPattern = function getExtensionDigitsPattern(maxLength) {\n  return \"([\".concat(VALID_DIGITS, \"]{1,\").concat(maxLength, \"})\");\n};\n/**\r\n * Helper initialiser method to create the regular-expression pattern to match\r\n * extensions.\r\n * Copy-pasted from Google's `libphonenumber`:\r\n * https://github.com/google/libphonenumber/blob/55b2646ec9393f4d3d6661b9c82ef9e258e8b829/javascript/i18n/phonenumbers/phonenumberutil.js#L759-L766\r\n * @return {string} RegEx pattern to capture extensions.\r\n */\n\n\nexport default function createExtensionPattern(purpose) {\n  // We cap the maximum length of an extension based on the ambiguity of the way\n  // the extension is prefixed. As per ITU, the officially allowed length for\n  // extensions is actually 40, but we don't support this since we haven't seen real\n  // examples and this introduces many false interpretations as the extension labels\n  // are not standardized.\n\n  /** @type {string} */\n  var extLimitAfterExplicitLabel = '20';\n  /** @type {string} */\n\n  var extLimitAfterLikelyLabel = '15';\n  /** @type {string} */\n\n  var extLimitAfterAmbiguousChar = '9';\n  /** @type {string} */\n\n  var extLimitWhenNotSure = '6';\n  /** @type {string} */\n\n  var possibleSeparatorsBetweenNumberAndExtLabel = \"[ \\xA0\\\\t,]*\"; // Optional full stop (.) or colon, followed by zero or more spaces/tabs/commas.\n\n  /** @type {string} */\n\n  var possibleCharsAfterExtLabel = \"[:\\\\.\\uFF0E]?[ \\xA0\\\\t,-]*\";\n  /** @type {string} */\n\n  var optionalExtnSuffix = \"#?\"; // Here the extension is called out in more explicit way, i.e mentioning it obvious\n  // patterns like \"ext.\".\n\n  /** @type {string} */\n\n  var explicitExtLabels = \"(?:e?xt(?:ensi(?:o\\u0301?|\\xF3))?n?|\\uFF45?\\uFF58\\uFF54\\uFF4E?|\\u0434\\u043E\\u0431|anexo)\"; // One-character symbols that can be used to indicate an extension, and less\n  // commonly used or more ambiguous extension labels.\n\n  /** @type {string} */\n\n  var ambiguousExtLabels = \"(?:[x\\uFF58#\\uFF03~\\uFF5E]|int|\\uFF49\\uFF4E\\uFF54)\"; // When extension is not separated clearly.\n\n  /** @type {string} */\n\n  var ambiguousSeparator = \"[- ]+\"; // This is the same as possibleSeparatorsBetweenNumberAndExtLabel, but not matching\n  // comma as extension label may have it.\n\n  /** @type {string} */\n\n  var possibleSeparatorsNumberExtLabelNoComma = \"[ \\xA0\\\\t]*\"; // \",,\" is commonly used for auto dialling the extension when connected. First\n  // comma is matched through possibleSeparatorsBetweenNumberAndExtLabel, so we do\n  // not repeat it here. Semi-colon works in Iphone and Android also to pop up a\n  // button with the extension number following.\n\n  /** @type {string} */\n\n  var autoDiallingAndExtLabelsFound = \"(?:,{2}|;)\";\n  /** @type {string} */\n\n  var rfcExtn = RFC3966_EXTN_PREFIX + getExtensionDigitsPattern(extLimitAfterExplicitLabel);\n  /** @type {string} */\n\n  var explicitExtn = possibleSeparatorsBetweenNumberAndExtLabel + explicitExtLabels + possibleCharsAfterExtLabel + getExtensionDigitsPattern(extLimitAfterExplicitLabel) + optionalExtnSuffix;\n  /** @type {string} */\n\n  var ambiguousExtn = possibleSeparatorsBetweenNumberAndExtLabel + ambiguousExtLabels + possibleCharsAfterExtLabel + getExtensionDigitsPattern(extLimitAfterAmbiguousChar) + optionalExtnSuffix;\n  /** @type {string} */\n\n  var americanStyleExtnWithSuffix = ambiguousSeparator + getExtensionDigitsPattern(extLimitWhenNotSure) + \"#\";\n  /** @type {string} */\n\n  var autoDiallingExtn = possibleSeparatorsNumberExtLabelNoComma + autoDiallingAndExtLabelsFound + possibleCharsAfterExtLabel + getExtensionDigitsPattern(extLimitAfterLikelyLabel) + optionalExtnSuffix;\n  /** @type {string} */\n\n  var onlyCommasExtn = possibleSeparatorsNumberExtLabelNoComma + \"(?:,)+\" + possibleCharsAfterExtLabel + getExtensionDigitsPattern(extLimitAfterAmbiguousChar) + optionalExtnSuffix; // The first regular expression covers RFC 3966 format, where the extension is added\n  // using \";ext=\". The second more generic where extension is mentioned with explicit\n  // labels like \"ext:\". In both the above cases we allow more numbers in extension than\n  // any other extension labels. The third one captures when single character extension\n  // labels or less commonly used labels are used. In such cases we capture fewer\n  // extension digits in order to reduce the chance of falsely interpreting two\n  // numbers beside each other as a number + extension. The fourth one covers the\n  // special case of American numbers where the extension is written with a hash\n  // at the end, such as \"- 503#\". The fifth one is exclusively for extension\n  // autodialling formats which are used when dialling and in this case we accept longer\n  // extensions. The last one is more liberal on the number of commas that acts as\n  // extension labels, so we have a strict cap on the number of digits in such extensions.\n\n  return rfcExtn + \"|\" + explicitExtn + \"|\" + ambiguousExtn + \"|\" + americanStyleExtnWithSuffix + \"|\" + autoDiallingExtn + \"|\" + onlyCommasExtn;\n}\n//# sourceMappingURL=createExtensionPattern.js.map","import { MIN_LENGTH_FOR_NSN, VALID_DIGITS, VALID_PUNCTUATION, PLUS_CHARS } from '../constants.js';\nimport createExtensionPattern from './extension/createExtensionPattern.js'; //  Regular expression of viable phone numbers. This is location independent.\n//  Checks we have at least three leading digits, and only valid punctuation,\n//  alpha characters and digits in the phone number. Does not include extension\n//  data. The symbol 'x' is allowed here as valid punctuation since it is often\n//  used as a placeholder for carrier codes, for example in Brazilian phone\n//  numbers. We also allow multiple '+' characters at the start.\n//\n//  Corresponds to the following:\n//  [digits]{minLengthNsn}|\n//  plus_sign*\n//  (([punctuation]|[star])*[digits]){3,}([punctuation]|[star]|[digits]|[alpha])*\n//\n//  The first reg-ex is to allow short numbers (two digits long) to be parsed if\n//  they are entered as \"15\" etc, but only if there is no punctuation in them.\n//  The second expression restricts the number of digits to three or more, but\n//  then allows them to be in international form, and to have alpha-characters\n//  and punctuation. We split up the two reg-exes here and combine them when\n//  creating the reg-ex VALID_PHONE_NUMBER_PATTERN itself so we can prefix it\n//  with ^ and append $ to each branch.\n//\n//  \"Note VALID_PUNCTUATION starts with a -,\n//   so must be the first in the range\" (c) Google devs.\n//  (wtf did they mean by saying that; probably nothing)\n//\n\nvar MIN_LENGTH_PHONE_NUMBER_PATTERN = '[' + VALID_DIGITS + ']{' + MIN_LENGTH_FOR_NSN + '}'; //\n// And this is the second reg-exp:\n// (see MIN_LENGTH_PHONE_NUMBER_PATTERN for a full description of this reg-exp)\n//\n\nexport var VALID_PHONE_NUMBER = '[' + PLUS_CHARS + ']{0,1}' + '(?:' + '[' + VALID_PUNCTUATION + ']*' + '[' + VALID_DIGITS + ']' + '){3,}' + '[' + VALID_PUNCTUATION + VALID_DIGITS + ']*'; // This regular expression isn't present in Google's `libphonenumber`\n// and is only used to determine whether the phone number being input\n// is too short for it to even consider it a \"valid\" number.\n// This is just a way to differentiate between a really invalid phone\n// number like \"abcde\" and a valid phone number that a user has just\n// started inputting, like \"+1\" or \"1\": both these cases would be\n// considered `NOT_A_NUMBER` by Google's `libphonenumber`, but this\n// library can provide a more detailed error message — whether it's\n// really \"not a number\", or is it just a start of a valid phone number.\n\nvar VALID_PHONE_NUMBER_START_REG_EXP = new RegExp('^' + '[' + PLUS_CHARS + ']{0,1}' + '(?:' + '[' + VALID_PUNCTUATION + ']*' + '[' + VALID_DIGITS + ']' + '){1,2}' + '$', 'i');\nexport var VALID_PHONE_NUMBER_WITH_EXTENSION = VALID_PHONE_NUMBER + // Phone number extensions\n'(?:' + createExtensionPattern() + ')?'; // The combined regular expression for valid phone numbers:\n//\n\nvar VALID_PHONE_NUMBER_PATTERN = new RegExp( // Either a short two-digit-only phone number\n'^' + MIN_LENGTH_PHONE_NUMBER_PATTERN + '$' + '|' + // Or a longer fully parsed phone number (min 3 characters)\n'^' + VALID_PHONE_NUMBER_WITH_EXTENSION + '$', 'i'); // Checks to see if the string of characters could possibly be a phone number at\n// all. At the moment, checks to see that the string begins with at least 2\n// digits, ignoring any punctuation commonly found in phone numbers. This method\n// does not require the number to be normalized in advance - but does assume\n// that leading non-number symbols have been removed, such as by the method\n// `extract_possible_number`.\n//\n\nexport default function isViablePhoneNumber(number) {\n  return number.length >= MIN_LENGTH_FOR_NSN && VALID_PHONE_NUMBER_PATTERN.test(number);\n} // This is just a way to differentiate between a really invalid phone\n// number like \"abcde\" and a valid phone number that a user has just\n// started inputting, like \"+1\" or \"1\": both these cases would be\n// considered `NOT_A_NUMBER` by Google's `libphonenumber`, but this\n// library can provide a more detailed error message — whether it's\n// really \"not a number\", or is it just a start of a valid phone number.\n\nexport function isViablePhoneNumberStart(number) {\n  return VALID_PHONE_NUMBER_START_REG_EXP.test(number);\n}\n//# sourceMappingURL=isViablePhoneNumber.js.map","import createExtensionPattern from './createExtensionPattern.js'; // Regexp of all known extension prefixes used by different regions followed by\n// 1 or more valid digits, for use when parsing.\n\nvar EXTN_PATTERN = new RegExp('(?:' + createExtensionPattern() + ')$', 'i'); // Strips any extension (as in, the part of the number dialled after the call is\n// connected, usually indicated with extn, ext, x or similar) from the end of\n// the number, and returns it.\n\nexport default function extractExtension(number) {\n  var start = number.search(EXTN_PATTERN);\n\n  if (start < 0) {\n    return {};\n  } // If we find a potential extension, and the number preceding this is a viable\n  // number, we assume it is an extension.\n\n\n  var numberWithoutExtension = number.slice(0, start);\n  var matches = number.match(EXTN_PATTERN);\n  var i = 1;\n\n  while (i < matches.length) {\n    if (matches[i]) {\n      return {\n        number: numberWithoutExtension,\n        ext: matches[i]\n      };\n    }\n\n    i++;\n  }\n}\n//# sourceMappingURL=extractExtension.js.map","function _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n// These mappings map a character (key) to a specific digit that should\n// replace it for normalization purposes. Non-European digits that\n// may be used in phone numbers are mapped to a European equivalent.\n//\n// E.g. in Iraq they don't write `+442323234` but rather `+٤٤٢٣٢٣٢٣٤`.\n//\nexport var DIGITS = {\n  '0': '0',\n  '1': '1',\n  '2': '2',\n  '3': '3',\n  '4': '4',\n  '5': '5',\n  '6': '6',\n  '7': '7',\n  '8': '8',\n  '9': '9',\n  \"\\uFF10\": '0',\n  // Fullwidth digit 0\n  \"\\uFF11\": '1',\n  // Fullwidth digit 1\n  \"\\uFF12\": '2',\n  // Fullwidth digit 2\n  \"\\uFF13\": '3',\n  // Fullwidth digit 3\n  \"\\uFF14\": '4',\n  // Fullwidth digit 4\n  \"\\uFF15\": '5',\n  // Fullwidth digit 5\n  \"\\uFF16\": '6',\n  // Fullwidth digit 6\n  \"\\uFF17\": '7',\n  // Fullwidth digit 7\n  \"\\uFF18\": '8',\n  // Fullwidth digit 8\n  \"\\uFF19\": '9',\n  // Fullwidth digit 9\n  \"\\u0660\": '0',\n  // Arabic-indic digit 0\n  \"\\u0661\": '1',\n  // Arabic-indic digit 1\n  \"\\u0662\": '2',\n  // Arabic-indic digit 2\n  \"\\u0663\": '3',\n  // Arabic-indic digit 3\n  \"\\u0664\": '4',\n  // Arabic-indic digit 4\n  \"\\u0665\": '5',\n  // Arabic-indic digit 5\n  \"\\u0666\": '6',\n  // Arabic-indic digit 6\n  \"\\u0667\": '7',\n  // Arabic-indic digit 7\n  \"\\u0668\": '8',\n  // Arabic-indic digit 8\n  \"\\u0669\": '9',\n  // Arabic-indic digit 9\n  \"\\u06F0\": '0',\n  // Eastern-Arabic digit 0\n  \"\\u06F1\": '1',\n  // Eastern-Arabic digit 1\n  \"\\u06F2\": '2',\n  // Eastern-Arabic digit 2\n  \"\\u06F3\": '3',\n  // Eastern-Arabic digit 3\n  \"\\u06F4\": '4',\n  // Eastern-Arabic digit 4\n  \"\\u06F5\": '5',\n  // Eastern-Arabic digit 5\n  \"\\u06F6\": '6',\n  // Eastern-Arabic digit 6\n  \"\\u06F7\": '7',\n  // Eastern-Arabic digit 7\n  \"\\u06F8\": '8',\n  // Eastern-Arabic digit 8\n  \"\\u06F9\": '9' // Eastern-Arabic digit 9\n\n};\nexport function parseDigit(character) {\n  return DIGITS[character];\n}\n/**\r\n * Parses phone number digits from a string.\r\n * Drops all punctuation leaving only digits.\r\n * Also converts wide-ascii and arabic-indic numerals to conventional numerals.\r\n * E.g. in Iraq they don't write `+442323234` but rather `+٤٤٢٣٢٣٢٣٤`.\r\n * @param  {string} string\r\n * @return {string}\r\n * @example\r\n * ```js\r\n * parseDigits('8 (800) 555')\r\n * // Outputs '8800555'.\r\n * ```\r\n */\n\nexport default function parseDigits(string) {\n  var result = ''; // Using `.split('')` here instead of normal `for ... of`\n  // because the importing application doesn't neccessarily include an ES6 polyfill.\n  // The `.split('')` approach discards \"exotic\" UTF-8 characters\n  // (the ones consisting of four bytes) but digits\n  // (including non-European ones) don't fall into that range\n  // so such \"exotic\" characters would be discarded anyway.\n\n  for (var _iterator = _createForOfIteratorHelperLoose(string.split('')), _step; !(_step = _iterator()).done;) {\n    var character = _step.value;\n    var digit = parseDigit(character);\n\n    if (digit) {\n      result += digit;\n    }\n  }\n\n  return result;\n}\n//# sourceMappingURL=parseDigits.js.map","function _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport { parseDigit } from './helpers/parseDigits.js';\n/**\r\n * Parses phone number characters from a string.\r\n * Drops all punctuation leaving only digits and the leading `+` sign (if any).\r\n * Also converts wide-ascii and arabic-indic numerals to conventional numerals.\r\n * E.g. in Iraq they don't write `+442323234` but rather `+٤٤٢٣٢٣٢٣٤`.\r\n * @param  {string} string\r\n * @return {string}\r\n * @example\r\n * ```js\r\n * // Outputs '8800555'.\r\n * parseIncompletePhoneNumber('8 (800) 555')\r\n * // Outputs '+7800555'.\r\n * parseIncompletePhoneNumber('+7 800 555')\r\n * ```\r\n */\n\nexport default function parseIncompletePhoneNumber(string) {\n  var result = ''; // Using `.split('')` here instead of normal `for ... of`\n  // because the importing application doesn't neccessarily include an ES6 polyfill.\n  // The `.split('')` approach discards \"exotic\" UTF-8 characters\n  // (the ones consisting of four bytes) but digits\n  // (including non-European ones) don't fall into that range\n  // so such \"exotic\" characters would be discarded anyway.\n\n  for (var _iterator = _createForOfIteratorHelperLoose(string.split('')), _step; !(_step = _iterator()).done;) {\n    var character = _step.value;\n    result += parsePhoneNumberCharacter(character, result) || '';\n  }\n\n  return result;\n}\n/**\r\n * Parses next character while parsing phone number digits (including a `+`)\r\n * from text: discards everything except `+` and digits, and `+` is only allowed\r\n * at the start of a phone number.\r\n * For example, is used in `react-phone-number-input` where it uses\r\n * [`input-format`](https://gitlab.com/catamphetamine/input-format).\r\n * @param  {string} character - Yet another character from raw input string.\r\n * @param  {string?} prevParsedCharacters - Previous parsed characters.\r\n * @param  {object} meta - Optional custom use-case-specific metadata.\r\n * @return {string?} The parsed character.\r\n */\n\nexport function parsePhoneNumberCharacter(character, prevParsedCharacters) {\n  // Only allow a leading `+`.\n  if (character === '+') {\n    // If this `+` is not the first parsed character\n    // then discard it.\n    if (prevParsedCharacters) {\n      return;\n    }\n\n    return '+';\n  } // Allow digits.\n\n\n  return parseDigit(character);\n}\n//# sourceMappingURL=parseIncompletePhoneNumber.js.map","function _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n/**\r\n * Merges two arrays.\r\n * @param  {*} a\r\n * @param  {*} b\r\n * @return {*}\r\n */\nexport default function mergeArrays(a, b) {\n  var merged = a.slice();\n\n  for (var _iterator = _createForOfIteratorHelperLoose(b), _step; !(_step = _iterator()).done;) {\n    var element = _step.value;\n\n    if (a.indexOf(element) < 0) {\n      merged.push(element);\n    }\n  }\n\n  return merged.sort(function (a, b) {\n    return a - b;\n  }); // ES6 version, requires Set polyfill.\n  // let merged = new Set(a)\n  // for (const element of b) {\n  // \tmerged.add(i)\n  // }\n  // return Array.from(merged).sort((a, b) => a - b)\n}\n//# sourceMappingURL=mergeArrays.js.map","import mergeArrays from './mergeArrays.js';\nexport default function checkNumberLength(nationalNumber, metadata) {\n  return checkNumberLengthForType(nationalNumber, undefined, metadata);\n} // Checks whether a number is possible for the country based on its length.\n// Should only be called for the \"new\" metadata which has \"possible lengths\".\n\nexport function checkNumberLengthForType(nationalNumber, type, metadata) {\n  var type_info = metadata.type(type); // There should always be \"<possiblePengths/>\" set for every type element.\n  // This is declared in the XML schema.\n  // For size efficiency, where a sub-description (e.g. fixed-line)\n  // has the same \"<possiblePengths/>\" as the \"general description\", this is missing,\n  // so we fall back to the \"general description\". Where no numbers of the type\n  // exist at all, there is one possible length (-1) which is guaranteed\n  // not to match the length of any real phone number.\n\n  var possible_lengths = type_info && type_info.possibleLengths() || metadata.possibleLengths(); // let local_lengths    = type_info && type.possibleLengthsLocal() || metadata.possibleLengthsLocal()\n  // Metadata before version `1.0.18` didn't contain `possible_lengths`.\n\n  if (!possible_lengths) {\n    return 'IS_POSSIBLE';\n  }\n\n  if (type === 'FIXED_LINE_OR_MOBILE') {\n    // No such country in metadata.\n\n    /* istanbul ignore next */\n    if (!metadata.type('FIXED_LINE')) {\n      // The rare case has been encountered where no fixedLine data is available\n      // (true for some non-geographic entities), so we just check mobile.\n      return checkNumberLengthForType(nationalNumber, 'MOBILE', metadata);\n    }\n\n    var mobile_type = metadata.type('MOBILE');\n\n    if (mobile_type) {\n      // Merge the mobile data in if there was any. \"Concat\" creates a new\n      // array, it doesn't edit possible_lengths in place, so we don't need a copy.\n      // Note that when adding the possible lengths from mobile, we have\n      // to again check they aren't empty since if they are this indicates\n      // they are the same as the general desc and should be obtained from there.\n      possible_lengths = mergeArrays(possible_lengths, mobile_type.possibleLengths()); // The current list is sorted; we need to merge in the new list and\n      // re-sort (duplicates are okay). Sorting isn't so expensive because\n      // the lists are very small.\n      // if (local_lengths) {\n      // \tlocal_lengths = mergeArrays(local_lengths, mobile_type.possibleLengthsLocal())\n      // } else {\n      // \tlocal_lengths = mobile_type.possibleLengthsLocal()\n      // }\n    }\n  } // If the type doesn't exist then return 'INVALID_LENGTH'.\n  else if (type && !type_info) {\n    return 'INVALID_LENGTH';\n  }\n\n  var actual_length = nationalNumber.length; // In `libphonenumber-js` all \"local-only\" formats are dropped for simplicity.\n  // // This is safe because there is never an overlap beween the possible lengths\n  // // and the local-only lengths; this is checked at build time.\n  // if (local_lengths && local_lengths.indexOf(nationalNumber.length) >= 0)\n  // {\n  // \treturn 'IS_POSSIBLE_LOCAL_ONLY'\n  // }\n\n  var minimum_length = possible_lengths[0];\n\n  if (minimum_length === actual_length) {\n    return 'IS_POSSIBLE';\n  }\n\n  if (minimum_length > actual_length) {\n    return 'TOO_SHORT';\n  }\n\n  if (possible_lengths[possible_lengths.length - 1] < actual_length) {\n    return 'TOO_LONG';\n  } // We skip the first element since we've already checked it.\n\n\n  return possible_lengths.indexOf(actual_length, 1) >= 0 ? 'IS_POSSIBLE' : 'INVALID_LENGTH';\n}\n//# sourceMappingURL=checkNumberLength.js.map","import Metadata from './metadata.js';\nimport checkNumberLength from './helpers/checkNumberLength.js';\nexport default function isPossiblePhoneNumber(input, options, metadata) {\n  /* istanbul ignore if */\n  if (options === undefined) {\n    options = {};\n  }\n\n  metadata = new Metadata(metadata);\n\n  if (options.v2) {\n    if (!input.countryCallingCode) {\n      throw new Error('Invalid phone number object passed');\n    }\n\n    metadata.selectNumberingPlan(input.countryCallingCode);\n  } else {\n    if (!input.phone) {\n      return false;\n    }\n\n    if (input.country) {\n      if (!metadata.hasCountry(input.country)) {\n        throw new Error(\"Unknown country: \".concat(input.country));\n      }\n\n      metadata.country(input.country);\n    } else {\n      if (!input.countryCallingCode) {\n        throw new Error('Invalid phone number object passed');\n      }\n\n      metadata.selectNumberingPlan(input.countryCallingCode);\n    }\n  } // Old metadata (< 1.0.18) had no \"possible length\" data.\n\n\n  if (metadata.possibleLengths()) {\n    return isPossibleNumber(input.phone || input.nationalNumber, metadata);\n  } else {\n    // There was a bug between `1.7.35` and `1.7.37` where \"possible_lengths\"\n    // were missing for \"non-geographical\" numbering plans.\n    // Just assume the number is possible in such cases:\n    // it's unlikely that anyone generated their custom metadata\n    // in that short period of time (one day).\n    // This code can be removed in some future major version update.\n    if (input.countryCallingCode && metadata.isNonGeographicCallingCode(input.countryCallingCode)) {\n      // \"Non-geographic entities\" did't have `possibleLengths`\n      // due to a bug in metadata generation process.\n      return true;\n    } else {\n      throw new Error('Missing \"possibleLengths\" in metadata. Perhaps the metadata has been generated before v1.0.18.');\n    }\n  }\n}\nexport function isPossibleNumber(nationalNumber, metadata) {\n  //, isInternational) {\n  switch (checkNumberLength(nationalNumber, metadata)) {\n    case 'IS_POSSIBLE':\n      return true;\n    // This library ignores \"local-only\" phone numbers (for simplicity).\n    // See the readme for more info on what are \"local-only\" phone numbers.\n    // case 'IS_POSSIBLE_LOCAL_ONLY':\n    // \treturn !isInternational\n\n    default:\n      return false;\n  }\n}\n//# sourceMappingURL=isPossibleNumber_.js.map","function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport isViablePhoneNumber from './isViablePhoneNumber.js'; // https://www.ietf.org/rfc/rfc3966.txt\n\n/**\r\n * @param  {string} text - Phone URI (RFC 3966).\r\n * @return {object} `{ ?number, ?ext }`.\r\n */\n\nexport function parseRFC3966(text) {\n  var number;\n  var ext; // Replace \"tel:\" with \"tel=\" for parsing convenience.\n\n  text = text.replace(/^tel:/, 'tel=');\n\n  for (var _iterator = _createForOfIteratorHelperLoose(text.split(';')), _step; !(_step = _iterator()).done;) {\n    var part = _step.value;\n\n    var _part$split = part.split('='),\n        _part$split2 = _slicedToArray(_part$split, 2),\n        name = _part$split2[0],\n        value = _part$split2[1];\n\n    switch (name) {\n      case 'tel':\n        number = value;\n        break;\n\n      case 'ext':\n        ext = value;\n        break;\n\n      case 'phone-context':\n        // Only \"country contexts\" are supported.\n        // \"Domain contexts\" are ignored.\n        if (value[0] === '+') {\n          number = value + number;\n        }\n\n        break;\n    }\n  } // If the phone number is not viable, then abort.\n\n\n  if (!isViablePhoneNumber(number)) {\n    return {};\n  }\n\n  var result = {\n    number: number\n  };\n\n  if (ext) {\n    result.ext = ext;\n  }\n\n  return result;\n}\n/**\r\n * @param  {object} - `{ ?number, ?extension }`.\r\n * @return {string} Phone URI (RFC 3966).\r\n */\n\nexport function formatRFC3966(_ref) {\n  var number = _ref.number,\n      ext = _ref.ext;\n\n  if (!number) {\n    return '';\n  }\n\n  if (number[0] !== '+') {\n    throw new Error(\"\\\"formatRFC3966()\\\" expects \\\"number\\\" to be in E.164 format.\");\n  }\n\n  return \"tel:\".concat(number).concat(ext ? ';ext=' + ext : '');\n}\n//# sourceMappingURL=RFC3966.js.map","/**\r\n * Checks whether the entire input sequence can be matched\r\n * against the regular expression.\r\n * @return {boolean}\r\n */\nexport default function matchesEntirely(text, regular_expression) {\n  // If assigning the `''` default value is moved to the arguments above,\n  // code coverage would decrease for some weird reason.\n  text = text || '';\n  return new RegExp('^(?:' + regular_expression + ')$').test(text);\n}\n//# sourceMappingURL=matchesEntirely.js.map","function _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport Metadata from '../metadata.js';\nimport matchesEntirely from './matchesEntirely.js';\nvar NON_FIXED_LINE_PHONE_TYPES = ['MOBILE', 'PREMIUM_RATE', 'TOLL_FREE', 'SHARED_COST', 'VOIP', 'PERSONAL_NUMBER', 'PAGER', 'UAN', 'VOICEMAIL']; // Finds out national phone number type (fixed line, mobile, etc)\n\nexport default function getNumberType(input, options, metadata) {\n  // If assigning the `{}` default value is moved to the arguments above,\n  // code coverage would decrease for some weird reason.\n  options = options || {}; // When `parse()` returned `{}`\n  // meaning that the phone number is not a valid one.\n\n  if (!input.country) {\n    return;\n  }\n\n  metadata = new Metadata(metadata);\n  metadata.selectNumberingPlan(input.country, input.countryCallingCode);\n  var nationalNumber = options.v2 ? input.nationalNumber : input.phone; // The following is copy-pasted from the original function:\n  // https://github.com/googlei18n/libphonenumber/blob/3ea547d4fbaa2d0b67588904dfa5d3f2557c27ff/javascript/i18n/phonenumbers/phonenumberutil.js#L2835\n  // Is this national number even valid for this country\n\n  if (!matchesEntirely(nationalNumber, metadata.nationalNumberPattern())) {\n    return;\n  } // Is it fixed line number\n\n\n  if (isNumberTypeEqualTo(nationalNumber, 'FIXED_LINE', metadata)) {\n    // Because duplicate regular expressions are removed\n    // to reduce metadata size, if \"mobile\" pattern is \"\"\n    // then it means it was removed due to being a duplicate of the fixed-line pattern.\n    //\n    if (metadata.type('MOBILE') && metadata.type('MOBILE').pattern() === '') {\n      return 'FIXED_LINE_OR_MOBILE';\n    } // `MOBILE` type pattern isn't included if it matched `FIXED_LINE` one.\n    // For example, for \"US\" country.\n    // Old metadata (< `1.0.18`) had a specific \"types\" data structure\n    // that happened to be `undefined` for `MOBILE` in that case.\n    // Newer metadata (>= `1.0.18`) has another data structure that is\n    // not `undefined` for `MOBILE` in that case (it's just an empty array).\n    // So this `if` is just for backwards compatibility with old metadata.\n\n\n    if (!metadata.type('MOBILE')) {\n      return 'FIXED_LINE_OR_MOBILE';\n    } // Check if the number happens to qualify as both fixed line and mobile.\n    // (no such country in the minimal metadata set)\n\n    /* istanbul ignore if */\n\n\n    if (isNumberTypeEqualTo(nationalNumber, 'MOBILE', metadata)) {\n      return 'FIXED_LINE_OR_MOBILE';\n    }\n\n    return 'FIXED_LINE';\n  }\n\n  for (var _iterator = _createForOfIteratorHelperLoose(NON_FIXED_LINE_PHONE_TYPES), _step; !(_step = _iterator()).done;) {\n    var type = _step.value;\n\n    if (isNumberTypeEqualTo(nationalNumber, type, metadata)) {\n      return type;\n    }\n  }\n}\nexport function isNumberTypeEqualTo(nationalNumber, type, metadata) {\n  type = metadata.type(type);\n\n  if (!type || !type.pattern()) {\n    return false;\n  } // Check if any possible number lengths are present;\n  // if so, we use them to avoid checking\n  // the validation pattern if they don't match.\n  // If they are absent, this means they match\n  // the general description, which we have\n  // already checked before a specific number type.\n\n\n  if (type.possibleLengths() && type.possibleLengths().indexOf(nationalNumber.length) < 0) {\n    return false;\n  }\n\n  return matchesEntirely(nationalNumber, type.pattern());\n}\n//# sourceMappingURL=getNumberType.js.map","import { VALID_PUNCTUATION } from '../constants.js'; // Removes brackets and replaces dashes with spaces.\n//\n// E.g. \"(999) 111-22-33\" -> \"999 111 22 33\"\n//\n// For some reason Google's metadata contains `<intlFormat/>`s with brackets and dashes.\n// Meanwhile, there's no single opinion about using punctuation in international phone numbers.\n//\n// For example, Google's `<intlFormat/>` for USA is `+1 213-373-4253`.\n// And here's a quote from WikiPedia's \"North American Numbering Plan\" page:\n// https://en.wikipedia.org/wiki/North_American_Numbering_Plan\n//\n// \"The country calling code for all countries participating in the NANP is 1.\n// In international format, an NANP number should be listed as +1 301 555 01 00,\n// where 301 is an area code (Maryland).\"\n//\n// I personally prefer the international format without any punctuation.\n// For example, brackets are remnants of the old age, meaning that the\n// phone number part in brackets (so called \"area code\") can be omitted\n// if dialing within the same \"area\".\n// And hyphens were clearly introduced for splitting local numbers into memorizable groups.\n// For example, remembering \"5553535\" is difficult but \"555-35-35\" is much simpler.\n// Imagine a man taking a bus from home to work and seeing an ad with a phone number.\n// He has a couple of seconds to memorize that number until it passes by.\n// If it were spaces instead of hyphens the man wouldn't necessarily get it,\n// but with hyphens instead of spaces the grouping is more explicit.\n// I personally think that hyphens introduce visual clutter,\n// so I prefer replacing them with spaces in international numbers.\n// In the modern age all output is done on displays where spaces are clearly distinguishable\n// so hyphens can be safely replaced with spaces without losing any legibility.\n//\n\nexport default function applyInternationalSeparatorStyle(formattedNumber) {\n  return formattedNumber.replace(new RegExp(\"[\".concat(VALID_PUNCTUATION, \"]+\"), 'g'), ' ').trim();\n}\n//# sourceMappingURL=applyInternationalSeparatorStyle.js.map","import applyInternationalSeparatorStyle from './applyInternationalSeparatorStyle.js'; // This was originally set to $1 but there are some countries for which the\n// first group is not used in the national pattern (e.g. Argentina) so the $1\n// group does not match correctly. Therefore, we use `\\d`, so that the first\n// group actually used in the pattern will be matched.\n\nexport var FIRST_GROUP_PATTERN = /(\\$\\d)/;\nexport default function formatNationalNumberUsingFormat(number, format, _ref) {\n  var useInternationalFormat = _ref.useInternationalFormat,\n      withNationalPrefix = _ref.withNationalPrefix,\n      carrierCode = _ref.carrierCode,\n      metadata = _ref.metadata;\n  var formattedNumber = number.replace(new RegExp(format.pattern()), useInternationalFormat ? format.internationalFormat() : // This library doesn't use `domestic_carrier_code_formatting_rule`,\n  // because that one is only used when formatting phone numbers\n  // for dialing from a mobile phone, and this is not a dialing library.\n  // carrierCode && format.domesticCarrierCodeFormattingRule()\n  // \t// First, replace the $CC in the formatting rule with the desired carrier code.\n  // \t// Then, replace the $FG in the formatting rule with the first group\n  // \t// and the carrier code combined in the appropriate way.\n  // \t? format.format().replace(FIRST_GROUP_PATTERN, format.domesticCarrierCodeFormattingRule().replace('$CC', carrierCode))\n  // \t: (\n  // \t\twithNationalPrefix && format.nationalPrefixFormattingRule()\n  // \t\t\t? format.format().replace(FIRST_GROUP_PATTERN, format.nationalPrefixFormattingRule())\n  // \t\t\t: format.format()\n  // \t)\n  withNationalPrefix && format.nationalPrefixFormattingRule() ? format.format().replace(FIRST_GROUP_PATTERN, format.nationalPrefixFormattingRule()) : format.format());\n\n  if (useInternationalFormat) {\n    return applyInternationalSeparatorStyle(formattedNumber);\n  }\n\n  return formattedNumber;\n}\n//# sourceMappingURL=formatNationalNumberUsingFormat.js.map","import Metadata from '../metadata.js';\n/**\r\n * Pattern that makes it easy to distinguish whether a region has a single\r\n * international dialing prefix or not. If a region has a single international\r\n * prefix (e.g. 011 in USA), it will be represented as a string that contains\r\n * a sequence of ASCII digits, and possibly a tilde, which signals waiting for\r\n * the tone. If there are multiple available international prefixes in a\r\n * region, they will be represented as a regex string that always contains one\r\n * or more characters that are not ASCII digits or a tilde.\r\n */\n\nvar SINGLE_IDD_PREFIX_REG_EXP = /^[\\d]+(?:[~\\u2053\\u223C\\uFF5E][\\d]+)?$/; // For regions that have multiple IDD prefixes\n// a preferred IDD prefix is returned.\n\nexport default function getIddPrefix(country, callingCode, metadata) {\n  var countryMetadata = new Metadata(metadata);\n  countryMetadata.selectNumberingPlan(country, callingCode);\n\n  if (countryMetadata.defaultIDDPrefix()) {\n    return countryMetadata.defaultIDDPrefix();\n  }\n\n  if (SINGLE_IDD_PREFIX_REG_EXP.test(countryMetadata.IDDPrefix())) {\n    return countryMetadata.IDDPrefix();\n  }\n}\n//# sourceMappingURL=getIddPrefix.js.map","function _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n// This is a port of Google Android `libphonenumber`'s\n// `phonenumberutil.js` of December 31th, 2018.\n//\n// https://github.com/googlei18n/libphonenumber/commits/master/javascript/i18n/phonenumbers/phonenumberutil.js\nimport matchesEntirely from './helpers/matchesEntirely.js';\nimport formatNationalNumberUsingFormat from './helpers/formatNationalNumberUsingFormat.js';\nimport Metadata, { getCountryCallingCode } from './metadata.js';\nimport getIddPrefix from './helpers/getIddPrefix.js';\nimport { formatRFC3966 } from './helpers/RFC3966.js';\nvar DEFAULT_OPTIONS = {\n  formatExtension: function formatExtension(formattedNumber, extension, metadata) {\n    return \"\".concat(formattedNumber).concat(metadata.ext()).concat(extension);\n  }\n}; // Formats a phone number\n//\n// Example use cases:\n//\n// ```js\n// formatNumber('8005553535', 'RU', 'INTERNATIONAL')\n// formatNumber('8005553535', 'RU', 'INTERNATIONAL', metadata)\n// formatNumber({ phone: '8005553535', country: 'RU' }, 'INTERNATIONAL')\n// formatNumber({ phone: '8005553535', country: 'RU' }, 'INTERNATIONAL', metadata)\n// formatNumber('+78005553535', 'NATIONAL')\n// formatNumber('+78005553535', 'NATIONAL', metadata)\n// ```\n//\n\nexport default function formatNumber(input, format, options, metadata) {\n  // Apply default options.\n  if (options) {\n    options = _objectSpread(_objectSpread({}, DEFAULT_OPTIONS), options);\n  } else {\n    options = DEFAULT_OPTIONS;\n  }\n\n  metadata = new Metadata(metadata);\n\n  if (input.country && input.country !== '001') {\n    // Validate `input.country`.\n    if (!metadata.hasCountry(input.country)) {\n      throw new Error(\"Unknown country: \".concat(input.country));\n    }\n\n    metadata.country(input.country);\n  } else if (input.countryCallingCode) {\n    metadata.selectNumberingPlan(input.countryCallingCode);\n  } else return input.phone || '';\n\n  var countryCallingCode = metadata.countryCallingCode();\n  var nationalNumber = options.v2 ? input.nationalNumber : input.phone; // This variable should have been declared inside `case`s\n  // but Babel has a bug and it says \"duplicate variable declaration\".\n\n  var number;\n\n  switch (format) {\n    case 'NATIONAL':\n      // Legacy argument support.\n      // (`{ country: ..., phone: '' }`)\n      if (!nationalNumber) {\n        return '';\n      }\n\n      number = formatNationalNumber(nationalNumber, input.carrierCode, 'NATIONAL', metadata, options);\n      return addExtension(number, input.ext, metadata, options.formatExtension);\n\n    case 'INTERNATIONAL':\n      // Legacy argument support.\n      // (`{ country: ..., phone: '' }`)\n      if (!nationalNumber) {\n        return \"+\".concat(countryCallingCode);\n      }\n\n      number = formatNationalNumber(nationalNumber, null, 'INTERNATIONAL', metadata, options);\n      number = \"+\".concat(countryCallingCode, \" \").concat(number);\n      return addExtension(number, input.ext, metadata, options.formatExtension);\n\n    case 'E.164':\n      // `E.164` doesn't define \"phone number extensions\".\n      return \"+\".concat(countryCallingCode).concat(nationalNumber);\n\n    case 'RFC3966':\n      return formatRFC3966({\n        number: \"+\".concat(countryCallingCode).concat(nationalNumber),\n        ext: input.ext\n      });\n    // For reference, here's Google's IDD formatter:\n    // https://github.com/google/libphonenumber/blob/32719cf74e68796788d1ca45abc85dcdc63ba5b9/java/libphonenumber/src/com/google/i18n/phonenumbers/PhoneNumberUtil.java#L1546\n    // Not saying that this IDD formatter replicates it 1:1, but it seems to work.\n    // Who would even need to format phone numbers in IDD format anyway?\n\n    case 'IDD':\n      if (!options.fromCountry) {\n        return; // throw new Error('`fromCountry` option not passed for IDD-prefixed formatting.')\n      }\n\n      var formattedNumber = formatIDD(nationalNumber, input.carrierCode, countryCallingCode, options.fromCountry, metadata);\n      return addExtension(formattedNumber, input.ext, metadata, options.formatExtension);\n\n    default:\n      throw new Error(\"Unknown \\\"format\\\" argument passed to \\\"formatNumber()\\\": \\\"\".concat(format, \"\\\"\"));\n  }\n}\n\nfunction formatNationalNumber(number, carrierCode, formatAs, metadata, options) {\n  var format = chooseFormatForNumber(metadata.formats(), number);\n\n  if (!format) {\n    return number;\n  }\n\n  return formatNationalNumberUsingFormat(number, format, {\n    useInternationalFormat: formatAs === 'INTERNATIONAL',\n    withNationalPrefix: format.nationalPrefixIsOptionalWhenFormattingInNationalFormat() && options && options.nationalPrefix === false ? false : true,\n    carrierCode: carrierCode,\n    metadata: metadata\n  });\n}\n\nfunction chooseFormatForNumber(availableFormats, nationalNnumber) {\n  for (var _iterator = _createForOfIteratorHelperLoose(availableFormats), _step; !(_step = _iterator()).done;) {\n    var format = _step.value;\n\n    // Validate leading digits.\n    // The test case for \"else path\" could be found by searching for\n    // \"format.leadingDigitsPatterns().length === 0\".\n    if (format.leadingDigitsPatterns().length > 0) {\n      // The last leading_digits_pattern is used here, as it is the most detailed\n      var lastLeadingDigitsPattern = format.leadingDigitsPatterns()[format.leadingDigitsPatterns().length - 1]; // If leading digits don't match then move on to the next phone number format\n\n      if (nationalNnumber.search(lastLeadingDigitsPattern) !== 0) {\n        continue;\n      }\n    } // Check that the national number matches the phone number format regular expression\n\n\n    if (matchesEntirely(nationalNnumber, format.pattern())) {\n      return format;\n    }\n  }\n}\n\nfunction addExtension(formattedNumber, ext, metadata, formatExtension) {\n  return ext ? formatExtension(formattedNumber, ext, metadata) : formattedNumber;\n}\n\nfunction formatIDD(nationalNumber, carrierCode, countryCallingCode, fromCountry, metadata) {\n  var fromCountryCallingCode = getCountryCallingCode(fromCountry, metadata.metadata); // When calling within the same country calling code.\n\n  if (fromCountryCallingCode === countryCallingCode) {\n    var formattedNumber = formatNationalNumber(nationalNumber, carrierCode, 'NATIONAL', metadata); // For NANPA regions, return the national format for these regions\n    // but prefix it with the country calling code.\n\n    if (countryCallingCode === '1') {\n      return countryCallingCode + ' ' + formattedNumber;\n    } // If regions share a country calling code, the country calling code need\n    // not be dialled. This also applies when dialling within a region, so this\n    // if clause covers both these cases. Technically this is the case for\n    // dialling from La Reunion to other overseas departments of France (French\n    // Guiana, Martinique, Guadeloupe), but not vice versa - so we don't cover\n    // this edge case for now and for those cases return the version including\n    // country calling code. Details here:\n    // http://www.petitfute.com/voyage/225-info-pratiques-reunion\n    //\n\n\n    return formattedNumber;\n  }\n\n  var iddPrefix = getIddPrefix(fromCountry, undefined, metadata.metadata);\n\n  if (iddPrefix) {\n    return \"\".concat(iddPrefix, \" \").concat(countryCallingCode, \" \").concat(formatNationalNumber(nationalNumber, null, 'INTERNATIONAL', metadata));\n  }\n}\n//# sourceMappingURL=format_.js.map","function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\n\nimport Metadata from './metadata.js';\nimport isPossibleNumber from './isPossibleNumber_.js';\nimport isValidNumber from './validate_.js';\nimport isValidNumberForRegion from './isValidNumberForRegion_.js';\nimport getNumberType from './helpers/getNumberType.js';\nimport formatNumber from './format_.js';\nvar USE_NON_GEOGRAPHIC_COUNTRY_CODE = false;\n\nvar PhoneNumber = /*#__PURE__*/function () {\n  function PhoneNumber(countryCallingCode, nationalNumber, metadata) {\n    _classCallCheck(this, PhoneNumber);\n\n    if (!countryCallingCode) {\n      throw new TypeError('`country` or `countryCallingCode` not passed');\n    }\n\n    if (!nationalNumber) {\n      throw new TypeError('`nationalNumber` not passed');\n    }\n\n    if (!metadata) {\n      throw new TypeError('`metadata` not passed');\n    }\n\n    var _metadata = new Metadata(metadata); // If country code is passed then derive `countryCallingCode` from it.\n    // Also store the country code as `.country`.\n\n\n    if (isCountryCode(countryCallingCode)) {\n      this.country = countryCallingCode;\n\n      _metadata.country(countryCallingCode);\n\n      countryCallingCode = _metadata.countryCallingCode();\n    } else {\n      /* istanbul ignore if */\n      if (USE_NON_GEOGRAPHIC_COUNTRY_CODE) {\n        if (_metadata.isNonGeographicCallingCode(countryCallingCode)) {\n          this.country = '001';\n        }\n      }\n    }\n\n    this.countryCallingCode = countryCallingCode;\n    this.nationalNumber = nationalNumber;\n    this.number = '+' + this.countryCallingCode + this.nationalNumber;\n    this.metadata = metadata;\n  }\n\n  _createClass(PhoneNumber, [{\n    key: \"setExt\",\n    value: function setExt(ext) {\n      this.ext = ext;\n    }\n  }, {\n    key: \"isPossible\",\n    value: function isPossible() {\n      return isPossibleNumber(this, {\n        v2: true\n      }, this.metadata);\n    }\n  }, {\n    key: \"isValid\",\n    value: function isValid() {\n      return isValidNumber(this, {\n        v2: true\n      }, this.metadata);\n    }\n  }, {\n    key: \"isNonGeographic\",\n    value: function isNonGeographic() {\n      var metadata = new Metadata(this.metadata);\n      return metadata.isNonGeographicCallingCode(this.countryCallingCode);\n    }\n  }, {\n    key: \"isEqual\",\n    value: function isEqual(phoneNumber) {\n      return this.number === phoneNumber.number && this.ext === phoneNumber.ext;\n    } // // Is just an alias for `this.isValid() && this.country === country`.\n    // // https://github.com/googlei18n/libphonenumber/blob/master/FAQ.md#when-should-i-use-isvalidnumberforregion\n    // isValidForRegion(country) {\n    // \treturn isValidNumberForRegion(this, country, { v2: true }, this.metadata)\n    // }\n\n  }, {\n    key: \"getType\",\n    value: function getType() {\n      return getNumberType(this, {\n        v2: true\n      }, this.metadata);\n    }\n  }, {\n    key: \"format\",\n    value: function format(_format, options) {\n      return formatNumber(this, _format, options ? _objectSpread(_objectSpread({}, options), {}, {\n        v2: true\n      }) : {\n        v2: true\n      }, this.metadata);\n    }\n  }, {\n    key: \"formatNational\",\n    value: function formatNational(options) {\n      return this.format('NATIONAL', options);\n    }\n  }, {\n    key: \"formatInternational\",\n    value: function formatInternational(options) {\n      return this.format('INTERNATIONAL', options);\n    }\n  }, {\n    key: \"getURI\",\n    value: function getURI(options) {\n      return this.format('RFC3966', options);\n    }\n  }]);\n\n  return PhoneNumber;\n}();\n\nexport { PhoneNumber as default };\n\nvar isCountryCode = function isCountryCode(value) {\n  return /^[A-Z]{2}$/.test(value);\n};\n//# sourceMappingURL=PhoneNumber.js.map","import Metadata from './metadata.js';\nimport matchesEntirely from './helpers/matchesEntirely.js';\nimport getNumberType from './helpers/getNumberType.js';\n/**\r\n * Checks if a given phone number is valid.\r\n *\r\n * If the `number` is a string, it will be parsed to an object,\r\n * but only if it contains only valid phone number characters (including punctuation).\r\n * If the `number` is an object, it is used as is.\r\n *\r\n * The optional `defaultCountry` argument is the default country.\r\n * I.e. it does not restrict to just that country,\r\n * e.g. in those cases where several countries share\r\n * the same phone numbering rules (NANPA, Britain, etc).\r\n * For example, even though the number `07624 369230`\r\n * belongs to the Isle of Man (\"IM\" country code)\r\n * calling `isValidNumber('07624369230', 'GB', metadata)`\r\n * still returns `true` because the country is not restricted to `GB`,\r\n * it's just that `GB` is the default one for the phone numbering rules.\r\n * For restricting the country see `isValidNumberForRegion()`\r\n * though restricting a country might not be a good idea.\r\n * https://github.com/googlei18n/libphonenumber/blob/master/FAQ.md#when-should-i-use-isvalidnumberforregion\r\n *\r\n * Examples:\r\n *\r\n * ```js\r\n * isValidNumber('+78005553535', metadata)\r\n * isValidNumber('8005553535', 'RU', metadata)\r\n * isValidNumber('88005553535', 'RU', metadata)\r\n * isValidNumber({ phone: '8005553535', country: 'RU' }, metadata)\r\n * ```\r\n */\n\nexport default function isValidNumber(input, options, metadata) {\n  // If assigning the `{}` default value is moved to the arguments above,\n  // code coverage would decrease for some weird reason.\n  options = options || {};\n  metadata = new Metadata(metadata); // This is just to support `isValidNumber({})`\n  // for cases when `parseNumber()` returns `{}`.\n\n  if (!input.country) {\n    return false;\n  }\n\n  metadata.selectNumberingPlan(input.country, input.countryCallingCode); // By default, countries only have type regexps when it's required for\n  // distinguishing different countries having the same `countryCallingCode`.\n\n  if (metadata.hasTypes()) {\n    return getNumberType(input, options, metadata.metadata) !== undefined;\n  } // If there are no type regexps for this country in metadata then use\n  // `nationalNumberPattern` as a \"better than nothing\" replacement.\n\n\n  var national_number = options.v2 ? input.nationalNumber : input.phone;\n  return matchesEntirely(national_number, metadata.nationalNumberPattern());\n}\n//# sourceMappingURL=validate_.js.map","import Metadata from '../metadata.js';\nimport { VALID_DIGITS } from '../constants.js';\nvar CAPTURING_DIGIT_PATTERN = new RegExp('([' + VALID_DIGITS + '])');\nexport default function stripIddPrefix(number, country, callingCode, metadata) {\n  if (!country) {\n    return;\n  } // Check if the number is IDD-prefixed.\n\n\n  var countryMetadata = new Metadata(metadata);\n  countryMetadata.selectNumberingPlan(country, callingCode);\n  var IDDPrefixPattern = new RegExp(countryMetadata.IDDPrefix());\n\n  if (number.search(IDDPrefixPattern) !== 0) {\n    return;\n  } // Strip IDD prefix.\n\n\n  number = number.slice(number.match(IDDPrefixPattern)[0].length); // If there're any digits after an IDD prefix,\n  // then those digits are a country calling code.\n  // Since no country code starts with a `0`,\n  // the code below validates that the next digit (if present) is not `0`.\n\n  var matchedGroups = number.match(CAPTURING_DIGIT_PATTERN);\n\n  if (matchedGroups && matchedGroups[1] != null && matchedGroups[1].length > 0) {\n    if (matchedGroups[1] === '0') {\n      return;\n    }\n  }\n\n  return number;\n}\n//# sourceMappingURL=stripIddPrefix.js.map","/**\r\n * Strips any national prefix (such as 0, 1) present in a\r\n * (possibly incomplete) number provided.\r\n * \"Carrier codes\" are only used  in Colombia and Brazil,\r\n * and only when dialing within those countries from a mobile phone to a fixed line number.\r\n * Sometimes it won't actually strip national prefix\r\n * and will instead prepend some digits to the `number`:\r\n * for example, when number `2345678` is passed with `VI` country selected,\r\n * it will return `{ number: \"3402345678\" }`, because `340` area code is prepended.\r\n * @param {string} number — National number digits.\r\n * @param {object} metadata — Metadata with country selected.\r\n * @return {object} `{ nationalNumber: string, nationalPrefix: string? carrierCode: string? }`. Even if a national prefix was extracted, it's not necessarily present in the returned object, so don't rely on its presence in the returned object in order to find out whether a national prefix has been extracted or not.\r\n */\nexport default function extractNationalNumberFromPossiblyIncompleteNumber(number, metadata) {\n  if (number && metadata.numberingPlan.nationalPrefixForParsing()) {\n    // See METADATA.md for the description of\n    // `national_prefix_for_parsing` and `national_prefix_transform_rule`.\n    // Attempt to parse the first digits as a national prefix.\n    var prefixPattern = new RegExp('^(?:' + metadata.numberingPlan.nationalPrefixForParsing() + ')');\n    var prefixMatch = prefixPattern.exec(number);\n\n    if (prefixMatch) {\n      var nationalNumber;\n      var carrierCode; // https://gitlab.com/catamphetamine/libphonenumber-js/-/blob/master/METADATA.md#national_prefix_for_parsing--national_prefix_transform_rule\n      // If a `national_prefix_for_parsing` has any \"capturing groups\"\n      // then it means that the national (significant) number is equal to\n      // those \"capturing groups\" transformed via `national_prefix_transform_rule`,\n      // and nothing could be said about the actual national prefix:\n      // what is it and was it even there.\n      // If a `national_prefix_for_parsing` doesn't have any \"capturing groups\",\n      // then everything it matches is a national prefix.\n      // To determine whether `national_prefix_for_parsing` matched any\n      // \"capturing groups\", the value of the result of calling `.exec()`\n      // is looked at, and if it has non-undefined values where there're\n      // \"capturing groups\" in the regular expression, then it means\n      // that \"capturing groups\" have been matched.\n      // It's not possible to tell whether there'll be any \"capturing gropus\"\n      // before the matching process, because a `national_prefix_for_parsing`\n      // could exhibit both behaviors.\n\n      var capturedGroupsCount = prefixMatch.length - 1;\n      var hasCapturedGroups = capturedGroupsCount > 0 && prefixMatch[capturedGroupsCount];\n\n      if (metadata.nationalPrefixTransformRule() && hasCapturedGroups) {\n        nationalNumber = number.replace(prefixPattern, metadata.nationalPrefixTransformRule()); // If there's more than one captured group,\n        // then carrier code is the second one.\n\n        if (capturedGroupsCount > 1) {\n          carrierCode = prefixMatch[1];\n        }\n      } // If there're no \"capturing groups\",\n      // or if there're \"capturing groups\" but no\n      // `national_prefix_transform_rule`,\n      // then just strip the national prefix from the number,\n      // and possibly a carrier code.\n      // Seems like there could be more.\n      else {\n        // `prefixBeforeNationalNumber` is the whole substring matched by\n        // the `national_prefix_for_parsing` regular expression.\n        // There seem to be no guarantees that it's just a national prefix.\n        // For example, if there's a carrier code, it's gonna be a\n        // part of `prefixBeforeNationalNumber` too.\n        var prefixBeforeNationalNumber = prefixMatch[0];\n        nationalNumber = number.slice(prefixBeforeNationalNumber.length); // If there's at least one captured group,\n        // then carrier code is the first one.\n\n        if (hasCapturedGroups) {\n          carrierCode = prefixMatch[1];\n        }\n      } // Tries to guess whether a national prefix was present in the input.\n      // This is not something copy-pasted from Google's library:\n      // they don't seem to have an equivalent for that.\n      // So this isn't an \"officially approved\" way of doing something like that.\n      // But since there seems no other existing method, this library uses it.\n\n\n      var nationalPrefix;\n\n      if (hasCapturedGroups) {\n        var possiblePositionOfTheFirstCapturedGroup = number.indexOf(prefixMatch[1]);\n        var possibleNationalPrefix = number.slice(0, possiblePositionOfTheFirstCapturedGroup); // Example: an Argentinian (AR) phone number `0111523456789`.\n        // `prefixMatch[0]` is `01115`, and `$1` is `11`,\n        // and the rest of the phone number is `23456789`.\n        // The national number is transformed via `9$1` to `91123456789`.\n        // National prefix `0` is detected being present at the start.\n        // if (possibleNationalPrefix.indexOf(metadata.numberingPlan.nationalPrefix()) === 0) {\n\n        if (possibleNationalPrefix === metadata.numberingPlan.nationalPrefix()) {\n          nationalPrefix = metadata.numberingPlan.nationalPrefix();\n        }\n      } else {\n        nationalPrefix = prefixMatch[0];\n      }\n\n      return {\n        nationalNumber: nationalNumber,\n        nationalPrefix: nationalPrefix,\n        carrierCode: carrierCode\n      };\n    }\n  }\n\n  return {\n    nationalNumber: number\n  };\n}\n//# sourceMappingURL=extractNationalNumberFromPossiblyIncompleteNumber.js.map","import extractNationalNumberFromPossiblyIncompleteNumber from './extractNationalNumberFromPossiblyIncompleteNumber.js';\nimport matchesEntirely from './matchesEntirely.js';\nimport checkNumberLength from './checkNumberLength.js';\n/**\r\n * Strips national prefix and carrier code from a complete phone number.\r\n * The difference from the non-\"FromCompleteNumber\" function is that\r\n * it won't extract national prefix if the resultant number is too short\r\n * to be a complete number for the selected phone numbering plan.\r\n * @param  {string} number — Complete phone number digits.\r\n * @param  {Metadata} metadata — Metadata with a phone numbering plan selected.\r\n * @return {object} `{ nationalNumber: string, carrierCode: string? }`.\r\n */\n\nexport default function extractNationalNumber(number, metadata) {\n  // Parsing national prefixes and carrier codes\n  // is only required for local phone numbers\n  // but some people don't understand that\n  // and sometimes write international phone numbers\n  // with national prefixes (or maybe even carrier codes).\n  // http://ucken.blogspot.ru/2016/03/trunk-prefixes-in-skype4b.html\n  // Google's original library forgives such mistakes\n  // and so does this library, because it has been requested:\n  // https://github.com/catamphetamine/libphonenumber-js/issues/127\n  var _extractNationalNumbe = extractNationalNumberFromPossiblyIncompleteNumber(number, metadata),\n      carrierCode = _extractNationalNumbe.carrierCode,\n      nationalNumber = _extractNationalNumbe.nationalNumber;\n\n  if (nationalNumber !== number) {\n    if (!shouldHaveExtractedNationalPrefix(number, nationalNumber, metadata)) {\n      // Don't strip the national prefix.\n      return {\n        nationalNumber: number\n      };\n    } // Check the national (significant) number length after extracting national prefix and carrier code.\n    // Legacy generated metadata (before `1.0.18`) didn't support the \"possible lengths\" feature.\n\n\n    if (metadata.possibleLengths()) {\n      // The number remaining after stripping the national prefix and carrier code\n      // should be long enough to have a possible length for the country.\n      // Otherwise, don't strip the national prefix and carrier code,\n      // since the original number could be a valid number.\n      // This check has been copy-pasted \"as is\" from Google's original library:\n      // https://github.com/google/libphonenumber/blob/876268eb1ad6cdc1b7b5bef17fc5e43052702d57/java/libphonenumber/src/com/google/i18n/phonenumbers/PhoneNumberUtil.java#L3236-L3250\n      // It doesn't check for the \"possibility\" of the original `number`.\n      // I guess it's fine not checking that one. It works as is anyway.\n      if (!isPossibleIncompleteNationalNumber(nationalNumber, metadata)) {\n        // Don't strip the national prefix.\n        return {\n          nationalNumber: number\n        };\n      }\n    }\n  }\n\n  return {\n    nationalNumber: nationalNumber,\n    carrierCode: carrierCode\n  };\n} // In some countries, the same digit could be a national prefix\n// or a leading digit of a valid phone number.\n// For example, in Russia, national prefix is `8`,\n// and also `800 555 35 35` is a valid number\n// in which `8` is not a national prefix, but the first digit\n// of a national (significant) number.\n// Same's with Belarus:\n// `82004910060` is a valid national (significant) number,\n// but `2004910060` is not.\n// To support such cases (to prevent the code from always stripping\n// national prefix), a condition is imposed: a national prefix\n// is not extracted when the original number is \"viable\" and the\n// resultant number is not, a \"viable\" national number being the one\n// that matches `national_number_pattern`.\n\nfunction shouldHaveExtractedNationalPrefix(nationalNumberBefore, nationalNumberAfter, metadata) {\n  // The equivalent in Google's code is:\n  // https://github.com/google/libphonenumber/blob/e326fa1fc4283bb05eb35cb3c15c18f98a31af33/java/libphonenumber/src/com/google/i18n/phonenumbers/PhoneNumberUtil.java#L2969-L3004\n  if (matchesEntirely(nationalNumberBefore, metadata.nationalNumberPattern()) && !matchesEntirely(nationalNumberAfter, metadata.nationalNumberPattern())) {\n    return false;\n  } // This \"is possible\" national number (length) check has been commented out\n  // because it's superceded by the (effectively) same check done in the\n  // `extractNationalNumber()` function after it calls `shouldHaveExtractedNationalPrefix()`.\n  // In other words, why run the same check twice if it could only be run once.\n  // // Check the national (significant) number length after extracting national prefix and carrier code.\n  // // Fixes a minor \"weird behavior\" bug: https://gitlab.com/catamphetamine/libphonenumber-js/-/issues/57\n  // // (Legacy generated metadata (before `1.0.18`) didn't support the \"possible lengths\" feature).\n  // if (metadata.possibleLengths()) {\n  // \tif (isPossibleIncompleteNationalNumber(nationalNumberBefore, metadata) &&\n  // \t\t!isPossibleIncompleteNationalNumber(nationalNumberAfter, metadata)) {\n  // \t\treturn false\n  // \t}\n  // }\n\n\n  return true;\n}\n\nfunction isPossibleIncompleteNationalNumber(nationalNumber, metadata) {\n  switch (checkNumberLength(nationalNumber, metadata)) {\n    case 'TOO_SHORT':\n    case 'INVALID_LENGTH':\n      // This library ignores \"local-only\" phone numbers (for simplicity).\n      // See the readme for more info on what are \"local-only\" phone numbers.\n      // case 'IS_POSSIBLE_LOCAL_ONLY':\n      return false;\n\n    default:\n      return true;\n  }\n}\n//# sourceMappingURL=extractNationalNumber.js.map","import Metadata from '../metadata.js';\nimport matchesEntirely from './matchesEntirely.js';\nimport extractNationalNumber from './extractNationalNumber.js';\nimport checkNumberLength from './checkNumberLength.js';\nimport getCountryCallingCode from '../getCountryCallingCode.js';\n/**\r\n * Sometimes some people incorrectly input international phone numbers\r\n * without the leading `+`. This function corrects such input.\r\n * @param  {string} number — Phone number digits.\r\n * @param  {string?} country\r\n * @param  {string?} callingCode\r\n * @param  {object} metadata\r\n * @return {object} `{ countryCallingCode: string?, number: string }`.\r\n */\n\nexport default function extractCountryCallingCodeFromInternationalNumberWithoutPlusSign(number, country, callingCode, metadata) {\n  var countryCallingCode = country ? getCountryCallingCode(country, metadata) : callingCode;\n\n  if (number.indexOf(countryCallingCode) === 0) {\n    metadata = new Metadata(metadata);\n    metadata.selectNumberingPlan(country, callingCode);\n    var possibleShorterNumber = number.slice(countryCallingCode.length);\n\n    var _extractNationalNumbe = extractNationalNumber(possibleShorterNumber, metadata),\n        possibleShorterNationalNumber = _extractNationalNumbe.nationalNumber;\n\n    var _extractNationalNumbe2 = extractNationalNumber(number, metadata),\n        nationalNumber = _extractNationalNumbe2.nationalNumber; // If the number was not valid before but is valid now,\n    // or if it was too long before, we consider the number\n    // with the country calling code stripped to be a better result\n    // and keep that instead.\n    // For example, in Germany (+49), `49` is a valid area code,\n    // so if a number starts with `49`, it could be both a valid\n    // national German number or an international number without\n    // a leading `+`.\n\n\n    if (!matchesEntirely(nationalNumber, metadata.nationalNumberPattern()) && matchesEntirely(possibleShorterNationalNumber, metadata.nationalNumberPattern()) || checkNumberLength(nationalNumber, metadata) === 'TOO_LONG') {\n      return {\n        countryCallingCode: countryCallingCode,\n        number: possibleShorterNumber\n      };\n    }\n  }\n\n  return {\n    number: number\n  };\n}\n//# sourceMappingURL=extractCountryCallingCodeFromInternationalNumberWithoutPlusSign.js.map","import stripIddPrefix from './stripIddPrefix.js';\nimport extractCountryCallingCodeFromInternationalNumberWithoutPlusSign from './extractCountryCallingCodeFromInternationalNumberWithoutPlusSign.js';\nimport Metadata from '../metadata.js';\nimport { MAX_LENGTH_COUNTRY_CODE } from '../constants.js';\n/**\r\n * Converts a phone number digits (possibly with a `+`)\r\n * into a calling code and the rest phone number digits.\r\n * The \"rest phone number digits\" could include\r\n * a national prefix, carrier code, and national\r\n * (significant) number.\r\n * @param  {string} number — Phone number digits (possibly with a `+`).\r\n * @param  {string} [country] — Default country.\r\n * @param  {string} [callingCode] — Default calling code (some phone numbering plans are non-geographic).\r\n * @param  {object} metadata\r\n * @return {object} `{ countryCallingCode: string?, number: string }`\r\n * @example\r\n * // Returns `{ countryCallingCode: \"1\", number: \"2133734253\" }`.\r\n * extractCountryCallingCode('2133734253', 'US', null, metadata)\r\n * extractCountryCallingCode('2133734253', null, '1', metadata)\r\n * extractCountryCallingCode('+12133734253', null, null, metadata)\r\n * extractCountryCallingCode('+12133734253', 'RU', null, metadata)\r\n */\n\nexport default function extractCountryCallingCode(number, country, callingCode, metadata) {\n  if (!number) {\n    return {};\n  } // If this is not an international phone number,\n  // then either extract an \"IDD\" prefix, or extract a\n  // country calling code from a number by autocorrecting it\n  // by prepending a leading `+` in cases when it starts\n  // with the country calling code.\n  // https://wikitravel.org/en/International_dialling_prefix\n  // https://github.com/catamphetamine/libphonenumber-js/issues/376\n\n\n  if (number[0] !== '+') {\n    // Convert an \"out-of-country\" dialing phone number\n    // to a proper international phone number.\n    var numberWithoutIDD = stripIddPrefix(number, country, callingCode, metadata); // If an IDD prefix was stripped then\n    // convert the number to international one\n    // for subsequent parsing.\n\n    if (numberWithoutIDD && numberWithoutIDD !== number) {\n      number = '+' + numberWithoutIDD;\n    } else {\n      // Check to see if the number starts with the country calling code\n      // for the default country. If so, we remove the country calling code,\n      // and do some checks on the validity of the number before and after.\n      // https://github.com/catamphetamine/libphonenumber-js/issues/376\n      if (country || callingCode) {\n        var _extractCountryCallin = extractCountryCallingCodeFromInternationalNumberWithoutPlusSign(number, country, callingCode, metadata),\n            countryCallingCode = _extractCountryCallin.countryCallingCode,\n            shorterNumber = _extractCountryCallin.number;\n\n        if (countryCallingCode) {\n          return {\n            countryCallingCode: countryCallingCode,\n            number: shorterNumber\n          };\n        }\n      }\n\n      return {\n        number: number\n      };\n    }\n  } // Fast abortion: country codes do not begin with a '0'\n\n\n  if (number[1] === '0') {\n    return {};\n  }\n\n  metadata = new Metadata(metadata); // The thing with country phone codes\n  // is that they are orthogonal to each other\n  // i.e. there's no such country phone code A\n  // for which country phone code B exists\n  // where B starts with A.\n  // Therefore, while scanning digits,\n  // if a valid country code is found,\n  // that means that it is the country code.\n  //\n\n  var i = 2;\n\n  while (i - 1 <= MAX_LENGTH_COUNTRY_CODE && i <= number.length) {\n    var _countryCallingCode = number.slice(1, i);\n\n    if (metadata.hasCallingCode(_countryCallingCode)) {\n      metadata.selectNumberingPlan(_countryCallingCode);\n      return {\n        countryCallingCode: _countryCallingCode,\n        number: number.slice(i)\n      };\n    }\n\n    i++;\n  }\n\n  return {};\n}\n//# sourceMappingURL=extractCountryCallingCode.js.map","function _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport Metadata from '../metadata.js';\nimport getNumberType from './getNumberType.js';\nvar USE_NON_GEOGRAPHIC_COUNTRY_CODE = false;\nexport default function getCountryByCallingCode(callingCode, nationalPhoneNumber, metadata) {\n  /* istanbul ignore if */\n  if (USE_NON_GEOGRAPHIC_COUNTRY_CODE) {\n    if (metadata.isNonGeographicCallingCode(callingCode)) {\n      return '001';\n    }\n  } // Is always non-empty, because `callingCode` is always valid\n\n\n  var possibleCountries = metadata.getCountryCodesForCallingCode(callingCode);\n\n  if (!possibleCountries) {\n    return;\n  } // If there's just one country corresponding to the country code,\n  // then just return it, without further phone number digits validation.\n\n\n  if (possibleCountries.length === 1) {\n    return possibleCountries[0];\n  }\n\n  return selectCountryFromList(possibleCountries, nationalPhoneNumber, metadata.metadata);\n}\n\nfunction selectCountryFromList(possibleCountries, nationalPhoneNumber, metadata) {\n  // Re-create `metadata` because it will be selecting a `country`.\n  metadata = new Metadata(metadata);\n\n  for (var _iterator = _createForOfIteratorHelperLoose(possibleCountries), _step; !(_step = _iterator()).done;) {\n    var country = _step.value;\n    metadata.country(country); // Leading digits check would be the simplest and fastest one.\n    // Leading digits patterns are only defined for about 20% of all countries.\n    // https://gitlab.com/catamphetamine/libphonenumber-js/blob/master/METADATA.md#leading_digits\n    // Matching \"leading digits\" is a sufficient but not necessary condition.\n\n    if (metadata.leadingDigits()) {\n      if (nationalPhoneNumber && nationalPhoneNumber.search(metadata.leadingDigits()) === 0) {\n        return country;\n      }\n    } // Else perform full validation with all of those\n    // fixed-line/mobile/etc regular expressions.\n    else if (getNumberType({\n      phone: nationalPhoneNumber,\n      country: country\n    }, undefined, metadata.metadata)) {\n      return country;\n    }\n  }\n}\n//# sourceMappingURL=getCountryByCallingCode.js.map","// This is a port of Google Android `libphonenumber`'s\n// `phonenumberutil.js` of December 31th, 2018.\n//\n// https://github.com/googlei18n/libphonenumber/commits/master/javascript/i18n/phonenumbers/phonenumberutil.js\nimport { VALID_DIGITS, PLUS_CHARS, MIN_LENGTH_FOR_NSN, MAX_LENGTH_FOR_NSN } from './constants.js';\nimport ParseError from './ParseError.js';\nimport Metadata from './metadata.js';\nimport isViablePhoneNumber, { isViablePhoneNumberStart } from './helpers/isViablePhoneNumber.js';\nimport extractExtension from './helpers/extension/extractExtension.js';\nimport parseIncompletePhoneNumber from './parseIncompletePhoneNumber.js';\nimport getCountryCallingCode from './getCountryCallingCode.js';\nimport { isPossibleNumber } from './isPossibleNumber_.js';\nimport { parseRFC3966 } from './helpers/RFC3966.js';\nimport PhoneNumber from './PhoneNumber.js';\nimport matchesEntirely from './helpers/matchesEntirely.js';\nimport extractCountryCallingCode from './helpers/extractCountryCallingCode.js';\nimport extractCountryCallingCodeFromInternationalNumberWithoutPlusSign from './helpers/extractCountryCallingCodeFromInternationalNumberWithoutPlusSign.js';\nimport extractNationalNumber from './helpers/extractNationalNumber.js';\nimport stripIddPrefix from './helpers/stripIddPrefix.js';\nimport getCountryByCallingCode from './helpers/getCountryByCallingCode.js'; // We don't allow input strings for parsing to be longer than 250 chars.\n// This prevents malicious input from consuming CPU.\n\nvar MAX_INPUT_STRING_LENGTH = 250; // This consists of the plus symbol, digits, and arabic-indic digits.\n\nvar PHONE_NUMBER_START_PATTERN = new RegExp('[' + PLUS_CHARS + VALID_DIGITS + ']'); // Regular expression of trailing characters that we want to remove.\n// A trailing `#` is sometimes used when writing phone numbers with extensions in US.\n// Example: \"+1 (645) 123 1234-910#\" number has extension \"910\".\n\nvar AFTER_PHONE_NUMBER_END_PATTERN = new RegExp('[^' + VALID_DIGITS + '#' + ']+$');\nvar USE_NON_GEOGRAPHIC_COUNTRY_CODE = false; // Examples:\n//\n// ```js\n// parse('8 (800) 555-35-35', 'RU')\n// parse('8 (800) 555-35-35', 'RU', metadata)\n// parse('8 (800) 555-35-35', { country: { default: 'RU' } })\n// parse('8 (800) 555-35-35', { country: { default: 'RU' } }, metadata)\n// parse('+7 800 555 35 35')\n// parse('+7 800 555 35 35', metadata)\n// ```\n//\n\nexport default function parse(text, options, metadata) {\n  // If assigning the `{}` default value is moved to the arguments above,\n  // code coverage would decrease for some weird reason.\n  options = options || {};\n  metadata = new Metadata(metadata); // Validate `defaultCountry`.\n\n  if (options.defaultCountry && !metadata.hasCountry(options.defaultCountry)) {\n    if (options.v2) {\n      throw new ParseError('INVALID_COUNTRY');\n    }\n\n    throw new Error(\"Unknown country: \".concat(options.defaultCountry));\n  } // Parse the phone number.\n\n\n  var _parseInput = parseInput(text, options.v2, options.extract),\n      formattedPhoneNumber = _parseInput.number,\n      ext = _parseInput.ext,\n      error = _parseInput.error; // If the phone number is not viable then return nothing.\n\n\n  if (!formattedPhoneNumber) {\n    if (options.v2) {\n      if (error === 'TOO_SHORT') {\n        throw new ParseError('TOO_SHORT');\n      }\n\n      throw new ParseError('NOT_A_NUMBER');\n    }\n\n    return {};\n  }\n\n  var _parsePhoneNumber = parsePhoneNumber(formattedPhoneNumber, options.defaultCountry, options.defaultCallingCode, metadata),\n      country = _parsePhoneNumber.country,\n      nationalNumber = _parsePhoneNumber.nationalNumber,\n      countryCallingCode = _parsePhoneNumber.countryCallingCode,\n      carrierCode = _parsePhoneNumber.carrierCode;\n\n  if (!metadata.hasSelectedNumberingPlan()) {\n    if (options.v2) {\n      throw new ParseError('INVALID_COUNTRY');\n    }\n\n    return {};\n  } // Validate national (significant) number length.\n\n\n  if (!nationalNumber || nationalNumber.length < MIN_LENGTH_FOR_NSN) {\n    // Won't throw here because the regexp already demands length > 1.\n\n    /* istanbul ignore if */\n    if (options.v2) {\n      throw new ParseError('TOO_SHORT');\n    } // Google's demo just throws an error in this case.\n\n\n    return {};\n  } // Validate national (significant) number length.\n  //\n  // A sidenote:\n  //\n  // They say that sometimes national (significant) numbers\n  // can be longer than `MAX_LENGTH_FOR_NSN` (e.g. in Germany).\n  // https://github.com/googlei18n/libphonenumber/blob/7e1748645552da39c4e1ba731e47969d97bdb539/resources/phonenumber.proto#L36\n  // Such numbers will just be discarded.\n  //\n\n\n  if (nationalNumber.length > MAX_LENGTH_FOR_NSN) {\n    if (options.v2) {\n      throw new ParseError('TOO_LONG');\n    } // Google's demo just throws an error in this case.\n\n\n    return {};\n  }\n\n  if (options.v2) {\n    var phoneNumber = new PhoneNumber(countryCallingCode, nationalNumber, metadata.metadata);\n\n    if (country) {\n      phoneNumber.country = country;\n    }\n\n    if (carrierCode) {\n      phoneNumber.carrierCode = carrierCode;\n    }\n\n    if (ext) {\n      phoneNumber.ext = ext;\n    }\n\n    return phoneNumber;\n  } // Check if national phone number pattern matches the number.\n  // National number pattern is different for each country,\n  // even for those ones which are part of the \"NANPA\" group.\n\n\n  var valid = (options.extended ? metadata.hasSelectedNumberingPlan() : country) ? matchesEntirely(nationalNumber, metadata.nationalNumberPattern()) : false;\n\n  if (!options.extended) {\n    return valid ? result(country, nationalNumber, ext) : {};\n  } // isInternational: countryCallingCode !== undefined\n\n\n  return {\n    country: country,\n    countryCallingCode: countryCallingCode,\n    carrierCode: carrierCode,\n    valid: valid,\n    possible: valid ? true : options.extended === true && metadata.possibleLengths() && isPossibleNumber(nationalNumber, metadata) ? true : false,\n    phone: nationalNumber,\n    ext: ext\n  };\n}\n/**\r\n * Extracts a formatted phone number from text.\r\n * Doesn't guarantee that the extracted phone number\r\n * is a valid phone number (for example, doesn't validate its length).\r\n * @param  {string} text\r\n * @param  {boolean} [extract] — If `false`, then will parse the entire `text` as a phone number.\r\n * @param  {boolean} [throwOnError] — By default, it won't throw if the text is too long.\r\n * @return {string}\r\n * @example\r\n * // Returns \"(213) 373-4253\".\r\n * extractFormattedPhoneNumber(\"Call (213) 373-4253 for assistance.\")\r\n */\n\nfunction extractFormattedPhoneNumber(text, extract, throwOnError) {\n  if (!text) {\n    return;\n  }\n\n  if (text.length > MAX_INPUT_STRING_LENGTH) {\n    if (throwOnError) {\n      throw new ParseError('TOO_LONG');\n    }\n\n    return;\n  }\n\n  if (extract === false) {\n    return text;\n  } // Attempt to extract a possible number from the string passed in\n\n\n  var startsAt = text.search(PHONE_NUMBER_START_PATTERN);\n\n  if (startsAt < 0) {\n    return;\n  }\n\n  return text // Trim everything to the left of the phone number\n  .slice(startsAt) // Remove trailing non-numerical characters\n  .replace(AFTER_PHONE_NUMBER_END_PATTERN, '');\n}\n/**\r\n * @param  {string} text - Input.\r\n * @param  {boolean} v2 - Legacy API functions don't pass `v2: true` flag.\r\n * @param  {boolean} [extract] - Whether to extract a phone number from `text`, or attempt to parse the entire text as a phone number.\r\n * @return {object} `{ ?number, ?ext }`.\r\n */\n\n\nfunction parseInput(text, v2, extract) {\n  // Parse RFC 3966 phone number URI.\n  if (text && text.indexOf('tel:') === 0) {\n    return parseRFC3966(text);\n  }\n\n  var number = extractFormattedPhoneNumber(text, extract, v2); // If the phone number is not viable, then abort.\n\n  if (!number) {\n    return {};\n  }\n\n  if (!isViablePhoneNumber(number)) {\n    if (isViablePhoneNumberStart(number)) {\n      return {\n        error: 'TOO_SHORT'\n      };\n    }\n\n    return {};\n  } // Attempt to parse extension first, since it doesn't require region-specific\n  // data and we want to have the non-normalised number here.\n\n\n  var withExtensionStripped = extractExtension(number);\n\n  if (withExtensionStripped.ext) {\n    return withExtensionStripped;\n  }\n\n  return {\n    number: number\n  };\n}\n/**\r\n * Creates `parse()` result object.\r\n */\n\n\nfunction result(country, nationalNumber, ext) {\n  var result = {\n    country: country,\n    phone: nationalNumber\n  };\n\n  if (ext) {\n    result.ext = ext;\n  }\n\n  return result;\n}\n/**\r\n * Parses a viable phone number.\r\n * @param {string} formattedPhoneNumber — Example: \"(213) 373-4253\".\r\n * @param {string} [defaultCountry]\r\n * @param {string} [defaultCallingCode]\r\n * @param {Metadata} metadata\r\n * @return {object} Returns `{ country: string?, countryCallingCode: string?, nationalNumber: string? }`.\r\n */\n\n\nfunction parsePhoneNumber(formattedPhoneNumber, defaultCountry, defaultCallingCode, metadata) {\n  // Extract calling code from phone number.\n  var _extractCountryCallin = extractCountryCallingCode(parseIncompletePhoneNumber(formattedPhoneNumber), defaultCountry, defaultCallingCode, metadata.metadata),\n      countryCallingCode = _extractCountryCallin.countryCallingCode,\n      number = _extractCountryCallin.number; // Choose a country by `countryCallingCode`.\n\n\n  var country;\n\n  if (countryCallingCode) {\n    metadata.selectNumberingPlan(countryCallingCode);\n  } // If `formattedPhoneNumber` is in \"national\" format\n  // then `number` is defined and `countryCallingCode` isn't.\n  else if (number && (defaultCountry || defaultCallingCode)) {\n    metadata.selectNumberingPlan(defaultCountry, defaultCallingCode);\n\n    if (defaultCountry) {\n      country = defaultCountry;\n    } else {\n      /* istanbul ignore if */\n      if (USE_NON_GEOGRAPHIC_COUNTRY_CODE) {\n        if (metadata.isNonGeographicCallingCode(defaultCallingCode)) {\n          country = '001';\n        }\n      }\n    }\n\n    countryCallingCode = defaultCallingCode || getCountryCallingCode(defaultCountry, metadata.metadata);\n  } else return {};\n\n  if (!number) {\n    return {\n      countryCallingCode: countryCallingCode\n    };\n  }\n\n  var _extractNationalNumbe = extractNationalNumber(parseIncompletePhoneNumber(number), metadata),\n      nationalNumber = _extractNationalNumbe.nationalNumber,\n      carrierCode = _extractNationalNumbe.carrierCode; // Sometimes there are several countries\n  // corresponding to the same country phone code\n  // (e.g. NANPA countries all having `1` country phone code).\n  // Therefore, to reliably determine the exact country,\n  // national (significant) number should have been parsed first.\n  //\n  // When `metadata.json` is generated, all \"ambiguous\" country phone codes\n  // get their countries populated with the full set of\n  // \"phone number type\" regular expressions.\n  //\n\n\n  var exactCountry = getCountryByCallingCode(countryCallingCode, nationalNumber, metadata);\n\n  if (exactCountry) {\n    country = exactCountry;\n    /* istanbul ignore if */\n\n    if (exactCountry === '001') {// Can't happen with `USE_NON_GEOGRAPHIC_COUNTRY_CODE` being `false`.\n      // If `USE_NON_GEOGRAPHIC_COUNTRY_CODE` is set to `true` for some reason,\n      // then remove the \"istanbul ignore if\".\n    } else {\n      metadata.country(country);\n    }\n  }\n\n  return {\n    country: country,\n    countryCallingCode: countryCallingCode,\n    nationalNumber: nationalNumber,\n    carrierCode: carrierCode\n  };\n}\n//# sourceMappingURL=parse_.js.map","function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport parseNumber from './parse_.js';\nexport default function parsePhoneNumber(text, options, metadata) {\n  return parseNumber(text, _objectSpread(_objectSpread({}, options), {}, {\n    v2: true\n  }), metadata);\n}\n//# sourceMappingURL=parsePhoneNumber_.js.map","function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nimport parsePhoneNumber_ from './parsePhoneNumber_.js';\nexport default function parsePhoneNumber() {\n  var _normalizeArguments = normalizeArguments(arguments),\n      text = _normalizeArguments.text,\n      options = _normalizeArguments.options,\n      metadata = _normalizeArguments.metadata;\n\n  return parsePhoneNumber_(text, options, metadata);\n}\nexport function normalizeArguments(args) {\n  var _Array$prototype$slic = Array.prototype.slice.call(args),\n      _Array$prototype$slic2 = _slicedToArray(_Array$prototype$slic, 4),\n      arg_1 = _Array$prototype$slic2[0],\n      arg_2 = _Array$prototype$slic2[1],\n      arg_3 = _Array$prototype$slic2[2],\n      arg_4 = _Array$prototype$slic2[3];\n\n  var text;\n  var options;\n  var metadata; // If the phone number is passed as a string.\n  // `parsePhoneNumber('88005553535', ...)`.\n\n  if (typeof arg_1 === 'string') {\n    text = arg_1;\n  } else throw new TypeError('A text for parsing must be a string.'); // If \"default country\" argument is being passed then move it to `options`.\n  // `parsePhoneNumber('88005553535', 'RU', [options], metadata)`.\n\n\n  if (!arg_2 || typeof arg_2 === 'string') {\n    if (arg_4) {\n      options = arg_3;\n      metadata = arg_4;\n    } else {\n      options = undefined;\n      metadata = arg_3;\n    }\n\n    if (arg_2) {\n      options = _objectSpread({\n        defaultCountry: arg_2\n      }, options);\n    }\n  } // `defaultCountry` is not passed.\n  // Example: `parsePhoneNumber('+78005553535', [options], metadata)`.\n  else if (isObject(arg_2)) {\n    if (arg_3) {\n      options = arg_2;\n      metadata = arg_3;\n    } else {\n      metadata = arg_2;\n    }\n  } else throw new Error(\"Invalid second argument: \".concat(arg_2));\n\n  return {\n    text: text,\n    options: options,\n    metadata: metadata\n  };\n} // Otherwise istanbul would show this as \"branch not covered\".\n\n/* istanbul ignore next */\n\nvar isObject = function isObject(_) {\n  return _typeof(_) === 'object';\n};\n//# sourceMappingURL=parsePhoneNumber.js.map","function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport parsePhoneNumber from './parsePhoneNumber_.js';\nimport ParseError from './ParseError.js';\nimport { isSupportedCountry } from './metadata.js';\nexport default function parsePhoneNumberFromString(text, options, metadata) {\n  // Validate `defaultCountry`.\n  if (options && options.defaultCountry && !isSupportedCountry(options.defaultCountry, metadata)) {\n    options = _objectSpread(_objectSpread({}, options), {}, {\n      defaultCountry: undefined\n    });\n  } // Parse phone number.\n\n\n  try {\n    return parsePhoneNumber(text, options, metadata);\n  } catch (error) {\n    /* istanbul ignore else */\n    if (error instanceof ParseError) {//\n    } else {\n      throw error;\n    }\n  }\n}\n//# sourceMappingURL=parsePhoneNumberFromString_.js.map","import { normalizeArguments } from './parsePhoneNumber.js';\nimport parsePhoneNumberFromString_ from './parsePhoneNumberFromString_.js';\nexport default function parsePhoneNumberFromString() {\n  var _normalizeArguments = normalizeArguments(arguments),\n      text = _normalizeArguments.text,\n      options = _normalizeArguments.options,\n      metadata = _normalizeArguments.metadata;\n\n  return parsePhoneNumberFromString_(text, options, metadata);\n}\n//# sourceMappingURL=parsePhoneNumberFromString.js.map","function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { normalizeArguments } from './parsePhoneNumber.js';\nimport parsePhoneNumberFromString from './parsePhoneNumberFromString_.js';\nexport default function isValidPhoneNumber() {\n  var _normalizeArguments = normalizeArguments(arguments),\n      text = _normalizeArguments.text,\n      options = _normalizeArguments.options,\n      metadata = _normalizeArguments.metadata;\n\n  options = _objectSpread(_objectSpread({}, options), {}, {\n    extract: false\n  });\n  var phoneNumber = parsePhoneNumberFromString(text, options, metadata);\n  return phoneNumber && phoneNumber.isValid() || false;\n}\n//# sourceMappingURL=isValidPhoneNumber.js.map","function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { normalizeArguments } from './parsePhoneNumber.js';\nimport parsePhoneNumberFromString from './parsePhoneNumberFromString_.js';\nexport default function isPossiblePhoneNumber() {\n  var _normalizeArguments = normalizeArguments(arguments),\n      text = _normalizeArguments.text,\n      options = _normalizeArguments.options,\n      metadata = _normalizeArguments.metadata;\n\n  options = _objectSpread(_objectSpread({}, options), {}, {\n    extract: false\n  });\n  var phoneNumber = parsePhoneNumberFromString(text, options, metadata);\n  return phoneNumber && phoneNumber.isPossible() || false;\n}\n//# sourceMappingURL=isPossiblePhoneNumber.js.map","function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\n\nvar AsYouTypeState = /*#__PURE__*/function () {\n  function AsYouTypeState(_ref) {\n    var onCountryChange = _ref.onCountryChange,\n        onCallingCodeChange = _ref.onCallingCodeChange;\n\n    _classCallCheck(this, AsYouTypeState);\n\n    this.onCountryChange = onCountryChange;\n    this.onCallingCodeChange = onCallingCodeChange;\n  }\n\n  _createClass(AsYouTypeState, [{\n    key: \"reset\",\n    value: function reset(defaultCountry, defaultCallingCode) {\n      this.international = false;\n      this.IDDPrefix = undefined;\n      this.missingPlus = undefined;\n      this.callingCode = undefined;\n      this.digits = '';\n      this.resetNationalSignificantNumber();\n      this.initCountryAndCallingCode(defaultCountry, defaultCallingCode);\n    }\n  }, {\n    key: \"resetNationalSignificantNumber\",\n    value: function resetNationalSignificantNumber() {\n      this.nationalSignificantNumber = this.getNationalDigits();\n      this.nationalSignificantNumberMatchesInput = true;\n      this.nationalPrefix = undefined;\n      this.carrierCode = undefined;\n      this.complexPrefixBeforeNationalSignificantNumber = undefined;\n    }\n  }, {\n    key: \"update\",\n    value: function update(properties) {\n      for (var _i = 0, _Object$keys = Object.keys(properties); _i < _Object$keys.length; _i++) {\n        var key = _Object$keys[_i];\n        this[key] = properties[key];\n      }\n    }\n  }, {\n    key: \"initCountryAndCallingCode\",\n    value: function initCountryAndCallingCode(country, callingCode) {\n      this.setCountry(country);\n      this.setCallingCode(callingCode);\n    }\n  }, {\n    key: \"setCountry\",\n    value: function setCountry(country) {\n      this.country = country;\n      this.onCountryChange(country);\n    }\n  }, {\n    key: \"setCallingCode\",\n    value: function setCallingCode(callingCode) {\n      this.callingCode = callingCode;\n      return this.onCallingCodeChange(this.country, callingCode);\n    }\n  }, {\n    key: \"startInternationalNumber\",\n    value: function startInternationalNumber() {\n      // Prepend the `+` to parsed input.\n      this.international = true; // If a default country was set then reset it\n      // because an explicitly international phone\n      // number is being entered.\n\n      this.initCountryAndCallingCode();\n    }\n  }, {\n    key: \"appendDigits\",\n    value: function appendDigits(nextDigits) {\n      this.digits += nextDigits;\n    }\n  }, {\n    key: \"appendNationalSignificantNumberDigits\",\n    value: function appendNationalSignificantNumberDigits(nextDigits) {\n      this.nationalSignificantNumber += nextDigits;\n    }\n    /**\r\n     * Returns the part of `this.digits` that corresponds to the national number.\r\n     * Basically, all digits that have been input by the user, except for the\r\n     * international prefix and the country calling code part\r\n     * (if the number is an international one).\r\n     * @return {string}\r\n     */\n\n  }, {\n    key: \"getNationalDigits\",\n    value: function getNationalDigits() {\n      if (this.international) {\n        return this.digits.slice((this.IDDPrefix ? this.IDDPrefix.length : 0) + (this.callingCode ? this.callingCode.length : 0));\n      }\n\n      return this.digits;\n    }\n  }, {\n    key: \"getDigitsWithoutInternationalPrefix\",\n    value: function getDigitsWithoutInternationalPrefix() {\n      if (this.international) {\n        if (this.IDDPrefix) {\n          return this.digits.slice(this.IDDPrefix.length);\n        }\n      }\n\n      return this.digits;\n    }\n  }]);\n\n  return AsYouTypeState;\n}();\n\nexport { AsYouTypeState as default };\n//# sourceMappingURL=AsYouTypeState.js.map","function _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n// Should be the same as `DIGIT_PLACEHOLDER` in `libphonenumber-metadata-generator`.\nexport var DIGIT_PLACEHOLDER = 'x'; // '\\u2008' (punctuation space)\n\nvar DIGIT_PLACEHOLDER_MATCHER = new RegExp(DIGIT_PLACEHOLDER); // Counts all occurences of a symbol in a string.\n// Unicode-unsafe (because using `.split()`).\n\nexport function countOccurences(symbol, string) {\n  var count = 0; // Using `.split('')` to iterate through a string here\n  // to avoid requiring `Symbol.iterator` polyfill.\n  // `.split('')` is generally not safe for Unicode,\n  // but in this particular case for counting brackets it is safe.\n  // for (const character of string)\n\n  for (var _iterator = _createForOfIteratorHelperLoose(string.split('')), _step; !(_step = _iterator()).done;) {\n    var character = _step.value;\n\n    if (character === symbol) {\n      count++;\n    }\n  }\n\n  return count;\n} // Repeats a string (or a symbol) N times.\n// http://stackoverflow.com/questions/202605/repeat-string-javascript\n\nexport function repeat(string, times) {\n  if (times < 1) {\n    return '';\n  }\n\n  var result = '';\n\n  while (times > 1) {\n    if (times & 1) {\n      result += string;\n    }\n\n    times >>= 1;\n    string += string;\n  }\n\n  return result + string;\n}\nexport function cutAndStripNonPairedParens(string, cutBeforeIndex) {\n  if (string[cutBeforeIndex] === ')') {\n    cutBeforeIndex++;\n  }\n\n  return stripNonPairedParens(string.slice(0, cutBeforeIndex));\n}\nexport function closeNonPairedParens(template, cut_before) {\n  var retained_template = template.slice(0, cut_before);\n  var opening_braces = countOccurences('(', retained_template);\n  var closing_braces = countOccurences(')', retained_template);\n  var dangling_braces = opening_braces - closing_braces;\n\n  while (dangling_braces > 0 && cut_before < template.length) {\n    if (template[cut_before] === ')') {\n      dangling_braces--;\n    }\n\n    cut_before++;\n  }\n\n  return template.slice(0, cut_before);\n}\nexport function stripNonPairedParens(string) {\n  var dangling_braces = [];\n  var i = 0;\n\n  while (i < string.length) {\n    if (string[i] === '(') {\n      dangling_braces.push(i);\n    } else if (string[i] === ')') {\n      dangling_braces.pop();\n    }\n\n    i++;\n  }\n\n  var start = 0;\n  var cleared_string = '';\n  dangling_braces.push(string.length);\n\n  for (var _i = 0, _dangling_braces = dangling_braces; _i < _dangling_braces.length; _i++) {\n    var index = _dangling_braces[_i];\n    cleared_string += string.slice(start, index);\n    start = index + 1;\n  }\n\n  return cleared_string;\n}\nexport function populateTemplateWithDigits(template, position, digits) {\n  // Using `.split('')` to iterate through a string here\n  // to avoid requiring `Symbol.iterator` polyfill.\n  // `.split('')` is generally not safe for Unicode,\n  // but in this particular case for `digits` it is safe.\n  // for (const digit of digits)\n  for (var _iterator2 = _createForOfIteratorHelperLoose(digits.split('')), _step2; !(_step2 = _iterator2()).done;) {\n    var digit = _step2.value;\n\n    // If there is room for more digits in current `template`,\n    // then set the next digit in the `template`,\n    // and return the formatted digits so far.\n    // If more digits are entered than the current format could handle.\n    if (template.slice(position + 1).search(DIGIT_PLACEHOLDER_MATCHER) < 0) {\n      return;\n    }\n\n    position = template.search(DIGIT_PLACEHOLDER_MATCHER);\n    template = template.replace(DIGIT_PLACEHOLDER_MATCHER, digit);\n  }\n\n  return [template, position];\n}\n//# sourceMappingURL=AsYouTypeFormatter.util.js.map","import checkNumberLength from './helpers/checkNumberLength.js';\nimport parseDigits from './helpers/parseDigits.js';\nimport formatNationalNumberUsingFormat from './helpers/formatNationalNumberUsingFormat.js';\nexport default function formatCompleteNumber(state, format, _ref) {\n  var metadata = _ref.metadata,\n      shouldTryNationalPrefixFormattingRule = _ref.shouldTryNationalPrefixFormattingRule,\n      getSeparatorAfterNationalPrefix = _ref.getSeparatorAfterNationalPrefix;\n  var matcher = new RegExp(\"^(?:\".concat(format.pattern(), \")$\"));\n\n  if (matcher.test(state.nationalSignificantNumber)) {\n    return formatNationalNumberWithAndWithoutNationalPrefixFormattingRule(state, format, {\n      metadata: metadata,\n      shouldTryNationalPrefixFormattingRule: shouldTryNationalPrefixFormattingRule,\n      getSeparatorAfterNationalPrefix: getSeparatorAfterNationalPrefix\n    });\n  }\n}\nexport function canFormatCompleteNumber(nationalSignificantNumber, metadata) {\n  return checkNumberLength(nationalSignificantNumber, metadata) === 'IS_POSSIBLE';\n}\n\nfunction formatNationalNumberWithAndWithoutNationalPrefixFormattingRule(state, format, _ref2) {\n  var metadata = _ref2.metadata,\n      shouldTryNationalPrefixFormattingRule = _ref2.shouldTryNationalPrefixFormattingRule,\n      getSeparatorAfterNationalPrefix = _ref2.getSeparatorAfterNationalPrefix;\n  // `format` has already been checked for `nationalPrefix` requirement.\n  var nationalSignificantNumber = state.nationalSignificantNumber,\n      international = state.international,\n      nationalPrefix = state.nationalPrefix,\n      carrierCode = state.carrierCode; // Format the number with using `national_prefix_formatting_rule`.\n  // If the resulting formatted number is a valid formatted number, then return it.\n  //\n  // Google's AsYouType formatter is different in a way that it doesn't try\n  // to format using the \"national prefix formatting rule\", and instead it\n  // simply prepends a national prefix followed by a \" \" character.\n  // This code does that too, but as a fallback.\n  // The reason is that \"national prefix formatting rule\" may use parentheses,\n  // which wouldn't be included has it used the simpler Google's way.\n  //\n\n  if (shouldTryNationalPrefixFormattingRule(format)) {\n    var formattedNumber = formatNationalNumber(state, format, {\n      useNationalPrefixFormattingRule: true,\n      getSeparatorAfterNationalPrefix: getSeparatorAfterNationalPrefix,\n      metadata: metadata\n    });\n\n    if (formattedNumber) {\n      return formattedNumber;\n    }\n  } // Format the number without using `national_prefix_formatting_rule`.\n\n\n  return formatNationalNumber(state, format, {\n    useNationalPrefixFormattingRule: false,\n    getSeparatorAfterNationalPrefix: getSeparatorAfterNationalPrefix,\n    metadata: metadata\n  });\n}\n\nfunction formatNationalNumber(state, format, _ref3) {\n  var metadata = _ref3.metadata,\n      useNationalPrefixFormattingRule = _ref3.useNationalPrefixFormattingRule,\n      getSeparatorAfterNationalPrefix = _ref3.getSeparatorAfterNationalPrefix;\n  var formattedNationalNumber = formatNationalNumberUsingFormat(state.nationalSignificantNumber, format, {\n    carrierCode: state.carrierCode,\n    useInternationalFormat: state.international,\n    withNationalPrefix: useNationalPrefixFormattingRule,\n    metadata: metadata\n  });\n\n  if (!useNationalPrefixFormattingRule) {\n    if (state.nationalPrefix) {\n      // If a national prefix was extracted, then just prepend it,\n      // followed by a \" \" character.\n      formattedNationalNumber = state.nationalPrefix + getSeparatorAfterNationalPrefix(format) + formattedNationalNumber;\n    } else if (state.complexPrefixBeforeNationalSignificantNumber) {\n      formattedNationalNumber = state.complexPrefixBeforeNationalSignificantNumber + ' ' + formattedNationalNumber;\n    }\n  }\n\n  if (isValidFormattedNationalNumber(formattedNationalNumber, state)) {\n    return formattedNationalNumber;\n  }\n} // Check that the formatted phone number contains exactly\n// the same digits that have been input by the user.\n// For example, when \"0111523456789\" is input for `AR` country,\n// the extracted `this.nationalSignificantNumber` is \"91123456789\",\n// which means that the national part of `this.digits` isn't simply equal to\n// `this.nationalPrefix` + `this.nationalSignificantNumber`.\n//\n// Also, a `format` can add extra digits to the `this.nationalSignificantNumber`\n// being formatted via `metadata[country].national_prefix_transform_rule`.\n// For example, for `VI` country, it prepends `340` to the national number,\n// and if this check hasn't been implemented, then there would be a bug\n// when `340` \"area coude\" is \"duplicated\" during input for `VI` country:\n// https://github.com/catamphetamine/libphonenumber-js/issues/318\n//\n// So, all these \"gotchas\" are filtered out.\n//\n// In the original Google's code, the comments say:\n// \"Check that we didn't remove nor add any extra digits when we matched\n// this formatting pattern. This usually happens after we entered the last\n// digit during AYTF. Eg: In case of MX, we swallow mobile token (1) when\n// formatted but AYTF should retain all the number entered and not change\n// in order to match a format (of same leading digits and length) display\n// in that way.\"\n// \"If it's the same (i.e entered number and format is same), then it's\n// safe to return this in formatted number as nothing is lost / added.\"\n// Otherwise, don't use this format.\n// https://github.com/google/libphonenumber/commit/3e7c1f04f5e7200f87fb131e6f85c6e99d60f510#diff-9149457fa9f5d608a11bb975c6ef4bc5\n// https://github.com/google/libphonenumber/commit/3ac88c7106e7dcb553bcc794b15f19185928a1c6#diff-2dcb77e833422ee304da348b905cde0b\n//\n\n\nfunction isValidFormattedNationalNumber(formattedNationalNumber, state) {\n  return parseDigits(formattedNationalNumber) === state.getNationalDigits();\n}\n//# sourceMappingURL=AsYouTypeFormatter.complete.js.map","function _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\n\nvar PatternMatcher = /*#__PURE__*/function () {\n  function PatternMatcher(pattern) {\n    _classCallCheck(this, PatternMatcher);\n\n    this.matchTree = new PatternParser().parse(pattern);\n  }\n\n  _createClass(PatternMatcher, [{\n    key: \"match\",\n    value: function match(string) {\n      var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n          allowOverflow = _ref.allowOverflow;\n\n      if (!string) {\n        throw new Error('String is required');\n      }\n\n      var result = _match(string.split(''), this.matchTree, true);\n\n      if (result && result.match) {\n        delete result.matchedChars;\n      }\n\n      if (result && result.overflow) {\n        if (!allowOverflow) {\n          return;\n        }\n      }\n\n      return result;\n    }\n  }]);\n\n  return PatternMatcher;\n}();\n\nexport { PatternMatcher as default };\n\nfunction _match(characters, tree, last) {\n  if (typeof tree === 'string') {\n    if (last) {\n      // `tree` is always a single character.\n      if (characters.length > tree.length) {\n        return {\n          overflow: true\n        };\n      }\n    }\n\n    var characterString = characters.join('');\n\n    if (tree.indexOf(characterString) === 0) {\n      // `tree` is always a single character.\n      // If `tree.indexOf(characterString) === 0`\n      // then `characters.length === tree.length`.\n\n      /* istanbul ignore else */\n      if (characters.length === tree.length) {\n        return {\n          match: true,\n          matchedChars: characters\n        };\n      } // `tree` is always a single character.\n      // If `tree.indexOf(characterString) === 0`\n      // then `characters.length === tree.length`.\n\n      /* istanbul ignore next */\n\n\n      return {\n        partialMatch: true // matchedChars: characters\n\n      };\n    }\n\n    if (characterString.indexOf(tree) === 0) {\n      return {\n        match: true,\n        matchedChars: characters.slice(0, tree.length)\n      };\n    }\n\n    return;\n  }\n\n  if (Array.isArray(tree)) {\n    var restCharacters = characters.slice();\n    var i = 0;\n\n    while (i < tree.length) {\n      var subtree = tree[i];\n\n      var result = _match(restCharacters, subtree, last && i === tree.length - 1);\n\n      if (!result) {\n        return;\n      } else if (result.overflow) {\n        return result;\n      } else if (result.match) {\n        // Continue with the next subtree with the rest of the characters.\n        restCharacters = restCharacters.slice(result.matchedChars.length);\n\n        if (restCharacters.length === 0) {\n          if (i === tree.length - 1) {\n            return {\n              match: true,\n              matchedChars: characters\n            };\n          } else {\n            return {\n              partialMatch: true // matchedChars: characters\n\n            };\n          }\n        }\n      } else {\n        /* istanbul ignore else */\n        if (result.partialMatch) {\n          return {\n            partialMatch: true // matchedChars: characters\n\n          };\n        } else {\n          throw new Error(\"Unsupported match result:\\n\".concat(JSON.stringify(result, null, 2)));\n        }\n      }\n\n      i++;\n    } // If `last` then overflow has already been checked\n    // by the last element of the `tree` array.\n\n    /* istanbul ignore if */\n\n\n    if (last) {\n      return {\n        overflow: true\n      };\n    }\n\n    return {\n      match: true,\n      matchedChars: characters.slice(0, characters.length - restCharacters.length)\n    };\n  }\n\n  switch (tree.op) {\n    case '|':\n      var partialMatch;\n\n      for (var _iterator = _createForOfIteratorHelperLoose(tree.args), _step; !(_step = _iterator()).done;) {\n        var branch = _step.value;\n\n        var _result = _match(characters, branch, last);\n\n        if (_result) {\n          if (_result.overflow) {\n            return _result;\n          } else if (_result.match) {\n            return {\n              match: true,\n              matchedChars: _result.matchedChars\n            };\n          } else {\n            /* istanbul ignore else */\n            if (_result.partialMatch) {\n              partialMatch = true;\n            } else {\n              throw new Error(\"Unsupported match result:\\n\".concat(JSON.stringify(_result, null, 2)));\n            }\n          }\n        }\n      }\n\n      if (partialMatch) {\n        return {\n          partialMatch: true // matchedChars: ...\n\n        };\n      } // Not even a partial match.\n\n\n      return;\n\n    case '[]':\n      for (var _iterator2 = _createForOfIteratorHelperLoose(tree.args), _step2; !(_step2 = _iterator2()).done;) {\n        var _char = _step2.value;\n\n        if (characters[0] === _char) {\n          if (characters.length === 1) {\n            return {\n              match: true,\n              matchedChars: characters\n            };\n          }\n\n          if (last) {\n            return {\n              overflow: true\n            };\n          }\n\n          return {\n            match: true,\n            matchedChars: [_char]\n          };\n        }\n      } // No character matches.\n\n\n      return;\n\n    /* istanbul ignore next */\n\n    default:\n      throw new Error(\"Unsupported instruction tree: \".concat(tree));\n  }\n}\n\nvar OPERATOR = new RegExp( // any of:\n'(' + // or operator\n'\\\\|' + // or\n'|' + // or group start\n'\\\\(\\\\?\\\\:' + // or\n'|' + // or group end\n'\\\\)' + // or\n'|' + // one-of set start\n'\\\\[' + // or\n'|' + // one-of set end\n'\\\\]' + ')');\nvar ILLEGAL_CHARACTER_REGEXP = /[\\(\\)\\[\\]\\?\\:\\|]/;\n\nvar PatternParser = /*#__PURE__*/function () {\n  function PatternParser() {\n    _classCallCheck(this, PatternParser);\n  }\n\n  _createClass(PatternParser, [{\n    key: \"parse\",\n    value: function parse(pattern) {\n      this.context = [{\n        or: true,\n        instructions: []\n      }];\n      this.parsePattern(pattern);\n\n      if (this.context.length !== 1) {\n        throw new Error('Non-finalized contexts left when pattern parse ended');\n      }\n\n      var _this$context$ = this.context[0],\n          branches = _this$context$.branches,\n          instructions = _this$context$.instructions;\n\n      if (branches) {\n        return [{\n          op: '|',\n          args: branches.concat([instructions])\n        }];\n      }\n      /* istanbul ignore if */\n\n\n      if (instructions.length === 0) {\n        throw new Error('Pattern is required');\n      }\n\n      return instructions;\n    }\n  }, {\n    key: \"startContext\",\n    value: function startContext(context) {\n      this.context.push(context);\n    }\n  }, {\n    key: \"endContext\",\n    value: function endContext() {\n      this.context.pop();\n    }\n  }, {\n    key: \"getContext\",\n    value: function getContext() {\n      return this.context[this.context.length - 1];\n    }\n  }, {\n    key: \"parsePattern\",\n    value: function parsePattern(pattern) {\n      if (!pattern) {\n        throw new Error('Pattern is required');\n      }\n\n      var match = pattern.match(OPERATOR);\n\n      if (!match) {\n        if (ILLEGAL_CHARACTER_REGEXP.test(pattern)) {\n          throw new Error(\"Illegal characters found in a pattern: \".concat(pattern));\n        }\n\n        this.getContext().instructions = this.getContext().instructions.concat(pattern.split(''));\n        return;\n      }\n\n      var operator = match[1];\n      var before = pattern.slice(0, match.index);\n      var rightPart = pattern.slice(match.index + operator.length);\n\n      switch (operator) {\n        case '(?:':\n          if (before) {\n            this.parsePattern(before);\n          }\n\n          this.startContext({\n            or: true,\n            instructions: [],\n            branches: []\n          });\n          break;\n\n        case ')':\n          if (!this.getContext().or) {\n            throw new Error('\")\" operator must be preceded by \"(?:\" operator');\n          }\n\n          if (before) {\n            this.parsePattern(before);\n          }\n\n          if (this.getContext().instructions.length === 0) {\n            throw new Error('No instructions found after \"|\" operator in an \"or\" group');\n          }\n\n          var _this$getContext = this.getContext(),\n              branches = _this$getContext.branches;\n\n          branches.push(this.getContext().instructions);\n          this.endContext();\n          this.getContext().instructions.push({\n            op: '|',\n            args: branches\n          });\n          break;\n\n        case '|':\n          if (!this.getContext().or) {\n            throw new Error('\"|\" operator can only be used inside \"or\" groups');\n          }\n\n          if (before) {\n            this.parsePattern(before);\n          } // The top-level is an implicit \"or\" group, if required.\n\n\n          if (!this.getContext().branches) {\n            // `branches` are not defined only for the root implicit \"or\" operator.\n\n            /* istanbul ignore else */\n            if (this.context.length === 1) {\n              this.getContext().branches = [];\n            } else {\n              throw new Error('\"branches\" not found in an \"or\" group context');\n            }\n          }\n\n          this.getContext().branches.push(this.getContext().instructions);\n          this.getContext().instructions = [];\n          break;\n\n        case '[':\n          if (before) {\n            this.parsePattern(before);\n          }\n\n          this.startContext({\n            oneOfSet: true\n          });\n          break;\n\n        case ']':\n          if (!this.getContext().oneOfSet) {\n            throw new Error('\"]\" operator must be preceded by \"[\" operator');\n          }\n\n          this.endContext();\n          this.getContext().instructions.push({\n            op: '[]',\n            args: parseOneOfSet(before)\n          });\n          break;\n\n        /* istanbul ignore next */\n\n        default:\n          throw new Error(\"Unknown operator: \".concat(operator));\n      }\n\n      if (rightPart) {\n        this.parsePattern(rightPart);\n      }\n    }\n  }]);\n\n  return PatternParser;\n}();\n\nfunction parseOneOfSet(pattern) {\n  var values = [];\n  var i = 0;\n\n  while (i < pattern.length) {\n    if (pattern[i] === '-') {\n      if (i === 0 || i === pattern.length - 1) {\n        throw new Error(\"Couldn't parse a one-of set pattern: \".concat(pattern));\n      }\n\n      var prevValue = pattern[i - 1].charCodeAt(0) + 1;\n      var nextValue = pattern[i + 1].charCodeAt(0) - 1;\n      var value = prevValue;\n\n      while (value <= nextValue) {\n        values.push(String.fromCharCode(value));\n        value++;\n      }\n    } else {\n      values.push(pattern[i]);\n    }\n\n    i++;\n  }\n\n  return values;\n}\n//# sourceMappingURL=AsYouTypeFormatter.PatternMatcher.js.map","function _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\n\nimport { DIGIT_PLACEHOLDER, countOccurences, repeat, cutAndStripNonPairedParens, closeNonPairedParens, stripNonPairedParens, populateTemplateWithDigits } from './AsYouTypeFormatter.util.js';\nimport formatCompleteNumber, { canFormatCompleteNumber } from './AsYouTypeFormatter.complete.js';\nimport PatternMatcher from './AsYouTypeFormatter.PatternMatcher.js';\nimport parseDigits from './helpers/parseDigits.js';\nexport { DIGIT_PLACEHOLDER } from './AsYouTypeFormatter.util.js';\nimport { FIRST_GROUP_PATTERN } from './helpers/formatNationalNumberUsingFormat.js';\nimport { VALID_PUNCTUATION } from './constants.js';\nimport applyInternationalSeparatorStyle from './helpers/applyInternationalSeparatorStyle.js'; // Used in phone number format template creation.\n// Could be any digit, I guess.\n\nvar DUMMY_DIGIT = '9'; // I don't know why is it exactly `15`\n\nvar LONGEST_NATIONAL_PHONE_NUMBER_LENGTH = 15; // Create a phone number consisting only of the digit 9 that matches the\n// `number_pattern` by applying the pattern to the \"longest phone number\" string.\n\nvar LONGEST_DUMMY_PHONE_NUMBER = repeat(DUMMY_DIGIT, LONGEST_NATIONAL_PHONE_NUMBER_LENGTH); // A set of characters that, if found in a national prefix formatting rules, are an indicator to\n// us that we should separate the national prefix from the number when formatting.\n\nvar NATIONAL_PREFIX_SEPARATORS_PATTERN = /[- ]/; // Deprecated: Google has removed some formatting pattern related code from their repo.\n// https://github.com/googlei18n/libphonenumber/commit/a395b4fef3caf57c4bc5f082e1152a4d2bd0ba4c\n// \"We no longer have numbers in formatting matching patterns, only \\d.\"\n// Because this library supports generating custom metadata\n// some users may still be using old metadata so the relevant\n// code seems to stay until some next major version update.\n\nvar SUPPORT_LEGACY_FORMATTING_PATTERNS = true; // A pattern that is used to match character classes in regular expressions.\n// An example of a character class is \"[1-4]\".\n\nvar CREATE_CHARACTER_CLASS_PATTERN = SUPPORT_LEGACY_FORMATTING_PATTERNS && function () {\n  return /\\[([^\\[\\]])*\\]/g;\n}; // Any digit in a regular expression that actually denotes a digit. For\n// example, in the regular expression \"80[0-2]\\d{6,10}\", the first 2 digits\n// (8 and 0) are standalone digits, but the rest are not.\n// Two look-aheads are needed because the number following \\\\d could be a\n// two-digit number, since the phone number can be as long as 15 digits.\n\n\nvar CREATE_STANDALONE_DIGIT_PATTERN = SUPPORT_LEGACY_FORMATTING_PATTERNS && function () {\n  return /\\d(?=[^,}][^,}])/g;\n}; // A regular expression that is used to determine if a `format` is\n// suitable to be used in the \"as you type formatter\".\n// A `format` is suitable when the resulting formatted number has\n// the same digits as the user has entered.\n//\n// In the simplest case, that would mean that the format\n// doesn't add any additional digits when formatting a number.\n// Google says that it also shouldn't add \"star\" (`*`) characters,\n// like it does in some Israeli formats.\n// Such basic format would only contain \"valid punctuation\"\n// and \"captured group\" identifiers ($1, $2, etc).\n//\n// An example of a format that adds additional digits:\n//\n// Country: `AR` (Argentina).\n// Format:\n// {\n//    \"pattern\": \"(\\\\d)(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\n//    \"leading_digits_patterns\": [\"91\"],\n//    \"national_prefix_formatting_rule\": \"0$1\",\n//    \"format\": \"$2 15-$3-$4\",\n//    \"international_format\": \"$1 $2 $3-$4\"\n// }\n//\n// In the format above, the `format` adds `15` to the digits when formatting a number.\n// A sidenote: this format actually is suitable because `national_prefix_for_parsing`\n// has previously removed `15` from a national number, so re-adding `15` in `format`\n// doesn't actually result in any extra digits added to user's input.\n// But verifying that would be a complex procedure, so the code chooses a simpler path:\n// it simply filters out all `format`s that contain anything but \"captured group\" ids.\n//\n// This regular expression is called `ELIGIBLE_FORMAT_PATTERN` in Google's\n// `libphonenumber` code.\n//\n\n\nvar NON_ALTERING_FORMAT_REG_EXP = new RegExp('[' + VALID_PUNCTUATION + ']*' + // Google developers say:\n// \"We require that the first matching group is present in the\n//  output pattern to ensure no data is lost while formatting.\"\n'\\\\$1' + '[' + VALID_PUNCTUATION + ']*' + '(\\\\$\\\\d[' + VALID_PUNCTUATION + ']*)*' + '$'); // This is the minimum length of the leading digits of a phone number\n// to guarantee the first \"leading digits pattern\" for a phone number format\n// to be preemptive.\n\nvar MIN_LEADING_DIGITS_LENGTH = 3;\n\nvar AsYouTypeFormatter = /*#__PURE__*/function () {\n  function AsYouTypeFormatter(_ref) {\n    var state = _ref.state,\n        metadata = _ref.metadata;\n\n    _classCallCheck(this, AsYouTypeFormatter);\n\n    this.metadata = metadata;\n    this.resetFormat();\n  }\n\n  _createClass(AsYouTypeFormatter, [{\n    key: \"resetFormat\",\n    value: function resetFormat() {\n      this.chosenFormat = undefined;\n      this.template = undefined;\n      this.nationalNumberTemplate = undefined;\n      this.populatedNationalNumberTemplate = undefined;\n      this.populatedNationalNumberTemplatePosition = -1;\n    }\n  }, {\n    key: \"reset\",\n    value: function reset(numberingPlan, state) {\n      this.resetFormat();\n\n      if (numberingPlan) {\n        this.isNANP = numberingPlan.callingCode() === '1';\n        this.matchingFormats = numberingPlan.formats();\n\n        if (state.nationalSignificantNumber) {\n          this.narrowDownMatchingFormats(state);\n        }\n      } else {\n        this.isNANP = undefined;\n        this.matchingFormats = [];\n      }\n    }\n    /**\r\n     * Formats an updated phone number.\r\n     * @param  {string} nextDigits — Additional phone number digits.\r\n     * @param  {object} state — `AsYouType` state.\r\n     * @return {[string]} Returns undefined if the updated phone number can't be formatted using any of the available formats.\r\n     */\n\n  }, {\n    key: \"format\",\n    value: function format(nextDigits, state) {\n      var _this = this;\n\n      // See if the phone number digits can be formatted as a complete phone number.\n      // If not, use the results from `formatNationalNumberWithNextDigits()`,\n      // which formats based on the chosen formatting pattern.\n      //\n      // Attempting to format complete phone number first is how it's done\n      // in Google's `libphonenumber`, so this library just follows it.\n      // Google's `libphonenumber` code doesn't explain in detail why does it\n      // attempt to format digits as a complete phone number\n      // instead of just going with a previoulsy (or newly) chosen `format`:\n      //\n      // \"Checks to see if there is an exact pattern match for these digits.\n      //  If so, we should use this instead of any other formatting template\n      //  whose leadingDigitsPattern also matches the input.\"\n      //\n      if (canFormatCompleteNumber(state.nationalSignificantNumber, this.metadata)) {\n        for (var _iterator = _createForOfIteratorHelperLoose(this.matchingFormats), _step; !(_step = _iterator()).done;) {\n          var format = _step.value;\n          var formattedCompleteNumber = formatCompleteNumber(state, format, {\n            metadata: this.metadata,\n            shouldTryNationalPrefixFormattingRule: function shouldTryNationalPrefixFormattingRule(format) {\n              return _this.shouldTryNationalPrefixFormattingRule(format, {\n                international: state.international,\n                nationalPrefix: state.nationalPrefix\n              });\n            },\n            getSeparatorAfterNationalPrefix: function getSeparatorAfterNationalPrefix(format) {\n              return _this.getSeparatorAfterNationalPrefix(format);\n            }\n          });\n\n          if (formattedCompleteNumber) {\n            this.resetFormat();\n            this.chosenFormat = format;\n            this.setNationalNumberTemplate(formattedCompleteNumber.replace(/\\d/g, DIGIT_PLACEHOLDER), state);\n            this.populatedNationalNumberTemplate = formattedCompleteNumber; // With a new formatting template, the matched position\n            // using the old template needs to be reset.\n\n            this.populatedNationalNumberTemplatePosition = this.template.lastIndexOf(DIGIT_PLACEHOLDER);\n            return formattedCompleteNumber;\n          }\n        }\n      } // Format the digits as a partial (incomplete) phone number\n      // using the previously chosen formatting pattern (or a newly chosen one).\n\n\n      return this.formatNationalNumberWithNextDigits(nextDigits, state);\n    } // Formats the next phone number digits.\n\n  }, {\n    key: \"formatNationalNumberWithNextDigits\",\n    value: function formatNationalNumberWithNextDigits(nextDigits, state) {\n      var previouslyChosenFormat = this.chosenFormat; // Choose a format from the list of matching ones.\n\n      var newlyChosenFormat = this.chooseFormat(state);\n\n      if (newlyChosenFormat) {\n        if (newlyChosenFormat === previouslyChosenFormat) {\n          // If it can format the next (current) digits\n          // using the previously chosen phone number format\n          // then return the updated formatted number.\n          return this.formatNextNationalNumberDigits(nextDigits);\n        } else {\n          // If a more appropriate phone number format\n          // has been chosen for these \"leading digits\",\n          // then re-format the national phone number part\n          // using the newly selected format.\n          return this.formatNextNationalNumberDigits(state.getNationalDigits());\n        }\n      }\n    }\n  }, {\n    key: \"narrowDownMatchingFormats\",\n    value: function narrowDownMatchingFormats(_ref2) {\n      var _this2 = this;\n\n      var nationalSignificantNumber = _ref2.nationalSignificantNumber,\n          nationalPrefix = _ref2.nationalPrefix,\n          international = _ref2.international;\n      var leadingDigits = nationalSignificantNumber; // \"leading digits\" pattern list starts with a\n      // \"leading digits\" pattern fitting a maximum of 3 leading digits.\n      // So, after a user inputs 3 digits of a national (significant) phone number\n      // this national (significant) number can already be formatted.\n      // The next \"leading digits\" pattern is for 4 leading digits max,\n      // and the \"leading digits\" pattern after it is for 5 leading digits max, etc.\n      // This implementation is different from Google's\n      // in that it searches for a fitting format\n      // even if the user has entered less than\n      // `MIN_LEADING_DIGITS_LENGTH` digits of a national number.\n      // Because some leading digit patterns already match for a single first digit.\n\n      var leadingDigitsPatternIndex = leadingDigits.length - MIN_LEADING_DIGITS_LENGTH;\n\n      if (leadingDigitsPatternIndex < 0) {\n        leadingDigitsPatternIndex = 0;\n      }\n\n      this.matchingFormats = this.matchingFormats.filter(function (format) {\n        return _this2.formatSuits(format, international, nationalPrefix) && _this2.formatMatches(format, leadingDigits, leadingDigitsPatternIndex);\n      }); // If there was a phone number format chosen\n      // and it no longer holds given the new leading digits then reset it.\n      // The test for this `if` condition is marked as:\n      // \"Reset a chosen format when it no longer holds given the new leading digits\".\n      // To construct a valid test case for this one can find a country\n      // in `PhoneNumberMetadata.xml` yielding one format for 3 `<leadingDigits>`\n      // and yielding another format for 4 `<leadingDigits>` (Australia in this case).\n\n      if (this.chosenFormat && this.matchingFormats.indexOf(this.chosenFormat) === -1) {\n        this.resetFormat();\n      }\n    }\n  }, {\n    key: \"formatSuits\",\n    value: function formatSuits(format, international, nationalPrefix) {\n      // When a prefix before a national (significant) number is\n      // simply a national prefix, then it's parsed as `this.nationalPrefix`.\n      // In more complex cases, a prefix before national (significant) number\n      // could include a national prefix as well as some \"capturing groups\",\n      // and in that case there's no info whether a national prefix has been parsed.\n      // If national prefix is not used when formatting a phone number\n      // using this format, but a national prefix has been entered by the user,\n      // and was extracted, then discard such phone number format.\n      // In Google's \"AsYouType\" formatter code, the equivalent would be this part:\n      // https://github.com/google/libphonenumber/blob/0a45cfd96e71cad8edb0e162a70fcc8bd9728933/java/libphonenumber/src/com/google/i18n/phonenumbers/AsYouTypeFormatter.java#L175-L184\n      if (nationalPrefix && !format.usesNationalPrefix() && // !format.domesticCarrierCodeFormattingRule() &&\n      !format.nationalPrefixIsOptionalWhenFormattingInNationalFormat()) {\n        return false;\n      } // If national prefix is mandatory for this phone number format\n      // and there're no guarantees that a national prefix is present in user input\n      // then discard this phone number format as not suitable.\n      // In Google's \"AsYouType\" formatter code, the equivalent would be this part:\n      // https://github.com/google/libphonenumber/blob/0a45cfd96e71cad8edb0e162a70fcc8bd9728933/java/libphonenumber/src/com/google/i18n/phonenumbers/AsYouTypeFormatter.java#L185-L193\n\n\n      if (!international && !nationalPrefix && format.nationalPrefixIsMandatoryWhenFormattingInNationalFormat()) {\n        return false;\n      }\n\n      return true;\n    }\n  }, {\n    key: \"formatMatches\",\n    value: function formatMatches(format, leadingDigits, leadingDigitsPatternIndex) {\n      var leadingDigitsPatternsCount = format.leadingDigitsPatterns().length; // If this format is not restricted to a certain\n      // leading digits pattern then it fits.\n      // The test case could be found by searching for \"leadingDigitsPatternsCount === 0\".\n\n      if (leadingDigitsPatternsCount === 0) {\n        return true;\n      } // Start narrowing down the list of possible formats based on the leading digits.\n      // (only previously matched formats take part in the narrowing down process)\n      // `leading_digits_patterns` start with 3 digits min\n      // and then go up from there one digit at a time.\n\n\n      leadingDigitsPatternIndex = Math.min(leadingDigitsPatternIndex, leadingDigitsPatternsCount - 1);\n      var leadingDigitsPattern = format.leadingDigitsPatterns()[leadingDigitsPatternIndex]; // Google imposes a requirement on the leading digits\n      // to be minimum 3 digits long in order to be eligible\n      // for checking those with a leading digits pattern.\n      //\n      // Since `leading_digits_patterns` start with 3 digits min,\n      // Google's original `libphonenumber` library only starts\n      // excluding any non-matching formats only when the\n      // national number entered so far is at least 3 digits long,\n      // otherwise format matching would give false negatives.\n      //\n      // For example, when the digits entered so far are `2`\n      // and the leading digits pattern is `21` –\n      // it's quite obvious in this case that the format could be the one\n      // but due to the absence of further digits it would give false negative.\n      //\n      // Also, `leading_digits_patterns` doesn't always correspond to a single\n      // digits count. For example, `60|8` pattern would already match `8`\n      // but the `60` part would require having at least two leading digits,\n      // so the whole pattern would require inputting two digits first in order to\n      // decide on whether it matches the input, even when the input is \"80\".\n      //\n      // This library — `libphonenumber-js` — allows filtering by `leading_digits_patterns`\n      // even when there's only 1 or 2 digits of the national (significant) number.\n      // To do that, it uses a non-strict pattern matcher written specifically for that.\n      //\n\n      if (leadingDigits.length < MIN_LEADING_DIGITS_LENGTH) {\n        // Before leading digits < 3 matching was implemented:\n        // return true\n        //\n        // After leading digits < 3 matching was implemented:\n        try {\n          return new PatternMatcher(leadingDigitsPattern).match(leadingDigits, {\n            allowOverflow: true\n          }) !== undefined;\n        } catch (error)\n        /* istanbul ignore next */\n        {\n          // There's a slight possibility that there could be some undiscovered bug\n          // in the pattern matcher code. Since the \"leading digits < 3 matching\"\n          // feature is not \"essential\" for operation, it can fall back to the old way\n          // in case of any issues rather than halting the application's execution.\n          console.error(error);\n          return true;\n        }\n      } // If at least `MIN_LEADING_DIGITS_LENGTH` digits of a national number are\n      // available then use the usual regular expression matching.\n      //\n      // The whole pattern is wrapped in round brackets (`()`) because\n      // the pattern can use \"or\" operator (`|`) at the top level of the pattern.\n      //\n\n\n      return new RegExp(\"^(\".concat(leadingDigitsPattern, \")\")).test(leadingDigits);\n    }\n  }, {\n    key: \"getFormatFormat\",\n    value: function getFormatFormat(format, international) {\n      return international ? format.internationalFormat() : format.format();\n    }\n  }, {\n    key: \"chooseFormat\",\n    value: function chooseFormat(state) {\n      var _this3 = this;\n\n      var _loop = function _loop() {\n        var format = _step2.value;\n\n        // If this format is currently being used\n        // and is still suitable, then stick to it.\n        if (_this3.chosenFormat === format) {\n          return \"break\";\n        } // Sometimes, a formatting rule inserts additional digits in a phone number,\n        // and \"as you type\" formatter can't do that: it should only use the digits\n        // that the user has input.\n        //\n        // For example, in Argentina, there's a format for mobile phone numbers:\n        //\n        // {\n        //    \"pattern\": \"(\\\\d)(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\n        //    \"leading_digits_patterns\": [\"91\"],\n        //    \"national_prefix_formatting_rule\": \"0$1\",\n        //    \"format\": \"$2 15-$3-$4\",\n        //    \"international_format\": \"$1 $2 $3-$4\"\n        // }\n        //\n        // In that format, `international_format` is used instead of `format`\n        // because `format` inserts `15` in the formatted number,\n        // and `AsYouType` formatter should only use the digits\n        // the user has actually input, without adding any extra digits.\n        // In this case, it wouldn't make a difference, because the `15`\n        // is first stripped when applying `national_prefix_for_parsing`\n        // and then re-added when using `format`, so in reality it doesn't\n        // add any new digits to the number, but to detect that, the code\n        // would have to be more complex: it would have to try formatting\n        // the digits using the format and then see if any digits have\n        // actually been added or removed, and then, every time a new digit\n        // is input, it should re-check whether the chosen format doesn't\n        // alter the digits.\n        //\n        // Google's code doesn't go that far, and so does this library:\n        // it simply requires that a `format` doesn't add any additonal\n        // digits to user's input.\n        //\n        // Also, people in general should move from inputting phone numbers\n        // in national format (possibly with national prefixes)\n        // and use international phone number format instead:\n        // it's a logical thing in the modern age of mobile phones,\n        // globalization and the internet.\n        //\n\n        /* istanbul ignore if */\n\n\n        if (!NON_ALTERING_FORMAT_REG_EXP.test(_this3.getFormatFormat(format, state.international))) {\n          return \"continue\";\n        }\n\n        if (!_this3.createTemplateForFormat(format, state)) {\n          // Remove the format if it can't generate a template.\n          _this3.matchingFormats = _this3.matchingFormats.filter(function (_) {\n            return _ !== format;\n          });\n          return \"continue\";\n        }\n\n        _this3.chosenFormat = format;\n        return \"break\";\n      };\n\n      // When there are multiple available formats, the formatter uses the first\n      // format where a formatting template could be created.\n      //\n      // For some weird reason, `istanbul` says \"else path not taken\"\n      // for the `for of` line below. Supposedly that means that\n      // the loop doesn't ever go over the last element in the list.\n      // That's true because there always is `this.chosenFormat`\n      // when `this.matchingFormats` is non-empty.\n      // And, for some weird reason, it doesn't think that the case\n      // with empty `this.matchingFormats` qualifies for a valid \"else\" path.\n      // So simply muting this `istanbul` warning.\n      // It doesn't skip the contents of the `for of` loop,\n      // it just skips the `for of` line.\n      //\n\n      /* istanbul ignore next */\n      for (var _iterator2 = _createForOfIteratorHelperLoose(this.matchingFormats.slice()), _step2; !(_step2 = _iterator2()).done;) {\n        var _ret = _loop();\n\n        if (_ret === \"break\") break;\n        if (_ret === \"continue\") continue;\n      }\n\n      if (!this.chosenFormat) {\n        // No format matches the national (significant) phone number.\n        this.resetFormat();\n      }\n\n      return this.chosenFormat;\n    }\n  }, {\n    key: \"createTemplateForFormat\",\n    value: function createTemplateForFormat(format, state) {\n      // The formatter doesn't format numbers when numberPattern contains '|', e.g.\n      // (20|3)\\d{4}. In those cases we quickly return.\n      // (Though there's no such format in current metadata)\n\n      /* istanbul ignore if */\n      if (SUPPORT_LEGACY_FORMATTING_PATTERNS && format.pattern().indexOf('|') >= 0) {\n        return;\n      } // Get formatting template for this phone number format\n\n\n      var template = this.getTemplateForFormat(format, state); // If the national number entered is too long\n      // for any phone number format, then abort.\n\n      if (template) {\n        this.setNationalNumberTemplate(template, state);\n        return true;\n      }\n    }\n  }, {\n    key: \"getSeparatorAfterNationalPrefix\",\n    value: function getSeparatorAfterNationalPrefix(format) {\n      // `US` metadata doesn't have a `national_prefix_formatting_rule`,\n      // so the `if` condition below doesn't apply to `US`,\n      // but in reality there shoudl be a separator\n      // between a national prefix and a national (significant) number.\n      // So `US` national prefix separator is a \"special\" \"hardcoded\" case.\n      if (this.isNANP) {\n        return ' ';\n      } // If a `format` has a `national_prefix_formatting_rule`\n      // and that rule has a separator after a national prefix,\n      // then it means that there should be a separator\n      // between a national prefix and a national (significant) number.\n\n\n      if (format && format.nationalPrefixFormattingRule() && NATIONAL_PREFIX_SEPARATORS_PATTERN.test(format.nationalPrefixFormattingRule())) {\n        return ' ';\n      } // At this point, there seems to be no clear evidence that\n      // there should be a separator between a national prefix\n      // and a national (significant) number. So don't insert one.\n\n\n      return '';\n    }\n  }, {\n    key: \"getInternationalPrefixBeforeCountryCallingCode\",\n    value: function getInternationalPrefixBeforeCountryCallingCode(_ref3, options) {\n      var IDDPrefix = _ref3.IDDPrefix,\n          missingPlus = _ref3.missingPlus;\n\n      if (IDDPrefix) {\n        return options && options.spacing === false ? IDDPrefix : IDDPrefix + ' ';\n      }\n\n      if (missingPlus) {\n        return '';\n      }\n\n      return '+';\n    }\n  }, {\n    key: \"getTemplate\",\n    value: function getTemplate(state) {\n      if (!this.template) {\n        return;\n      } // `this.template` holds the template for a \"complete\" phone number.\n      // The currently entered phone number is most likely not \"complete\",\n      // so trim all non-populated digits.\n\n\n      var index = -1;\n      var i = 0;\n      var internationalPrefix = state.international ? this.getInternationalPrefixBeforeCountryCallingCode(state, {\n        spacing: false\n      }) : '';\n\n      while (i < internationalPrefix.length + state.getDigitsWithoutInternationalPrefix().length) {\n        index = this.template.indexOf(DIGIT_PLACEHOLDER, index + 1);\n        i++;\n      }\n\n      return cutAndStripNonPairedParens(this.template, index + 1);\n    }\n  }, {\n    key: \"setNationalNumberTemplate\",\n    value: function setNationalNumberTemplate(template, state) {\n      this.nationalNumberTemplate = template;\n      this.populatedNationalNumberTemplate = template; // With a new formatting template, the matched position\n      // using the old template needs to be reset.\n\n      this.populatedNationalNumberTemplatePosition = -1; // For convenience, the public `.template` property\n      // contains the whole international number\n      // if the phone number being input is international:\n      // 'x' for the '+' sign, 'x'es for the country phone code,\n      // a spacebar and then the template for the formatted national number.\n\n      if (state.international) {\n        this.template = this.getInternationalPrefixBeforeCountryCallingCode(state).replace(/[\\d\\+]/g, DIGIT_PLACEHOLDER) + repeat(DIGIT_PLACEHOLDER, state.callingCode.length) + ' ' + template;\n      } else {\n        this.template = template;\n      }\n    }\n    /**\r\n     * Generates formatting template for a national phone number,\r\n     * optionally containing a national prefix, for a format.\r\n     * @param  {Format} format\r\n     * @param  {string} nationalPrefix\r\n     * @return {string}\r\n     */\n\n  }, {\n    key: \"getTemplateForFormat\",\n    value: function getTemplateForFormat(format, _ref4) {\n      var nationalSignificantNumber = _ref4.nationalSignificantNumber,\n          international = _ref4.international,\n          nationalPrefix = _ref4.nationalPrefix,\n          complexPrefixBeforeNationalSignificantNumber = _ref4.complexPrefixBeforeNationalSignificantNumber;\n      var pattern = format.pattern();\n      /* istanbul ignore else */\n\n      if (SUPPORT_LEGACY_FORMATTING_PATTERNS) {\n        pattern = pattern // Replace anything in the form of [..] with \\d\n        .replace(CREATE_CHARACTER_CLASS_PATTERN(), '\\\\d') // Replace any standalone digit (not the one in `{}`) with \\d\n        .replace(CREATE_STANDALONE_DIGIT_PATTERN(), '\\\\d');\n      } // Generate a dummy national number (consisting of `9`s)\n      // that fits this format's `pattern`.\n      //\n      // This match will always succeed,\n      // because the \"longest dummy phone number\"\n      // has enough length to accomodate any possible\n      // national phone number format pattern.\n      //\n\n\n      var digits = LONGEST_DUMMY_PHONE_NUMBER.match(pattern)[0]; // If the national number entered is too long\n      // for any phone number format, then abort.\n\n      if (nationalSignificantNumber.length > digits.length) {\n        return;\n      } // Get a formatting template which can be used to efficiently format\n      // a partial number where digits are added one by one.\n      // Below `strictPattern` is used for the\n      // regular expression (with `^` and `$`).\n      // This wasn't originally in Google's `libphonenumber`\n      // and I guess they don't really need it\n      // because they're not using \"templates\" to format phone numbers\n      // but I added `strictPattern` after encountering\n      // South Korean phone number formatting bug.\n      //\n      // Non-strict regular expression bug demonstration:\n      //\n      // this.nationalSignificantNumber : `111111111` (9 digits)\n      //\n      // pattern : (\\d{2})(\\d{3,4})(\\d{4})\n      // format : `$1 $2 $3`\n      // digits : `9999999999` (10 digits)\n      //\n      // '9999999999'.replace(new RegExp(/(\\d{2})(\\d{3,4})(\\d{4})/g), '$1 $2 $3') = \"99 9999 9999\"\n      //\n      // template : xx xxxx xxxx\n      //\n      // But the correct template in this case is `xx xxx xxxx`.\n      // The template was generated incorrectly because of the\n      // `{3,4}` variability in the `pattern`.\n      //\n      // The fix is, if `this.nationalSignificantNumber` has already sufficient length\n      // to satisfy the `pattern` completely then `this.nationalSignificantNumber`\n      // is used instead of `digits`.\n\n\n      var strictPattern = new RegExp('^' + pattern + '$');\n      var nationalNumberDummyDigits = nationalSignificantNumber.replace(/\\d/g, DUMMY_DIGIT); // If `this.nationalSignificantNumber` has already sufficient length\n      // to satisfy the `pattern` completely then use it\n      // instead of `digits`.\n\n      if (strictPattern.test(nationalNumberDummyDigits)) {\n        digits = nationalNumberDummyDigits;\n      }\n\n      var numberFormat = this.getFormatFormat(format, international);\n      var nationalPrefixIncludedInTemplate; // If a user did input a national prefix (and that's guaranteed),\n      // and if a `format` does have a national prefix formatting rule,\n      // then see if that national prefix formatting rule\n      // prepends exactly the same national prefix the user has input.\n      // If that's the case, then use the `format` with the national prefix formatting rule.\n      // Otherwise, use  the `format` without the national prefix formatting rule,\n      // and prepend a national prefix manually to it.\n\n      if (this.shouldTryNationalPrefixFormattingRule(format, {\n        international: international,\n        nationalPrefix: nationalPrefix\n      })) {\n        var numberFormatWithNationalPrefix = numberFormat.replace(FIRST_GROUP_PATTERN, format.nationalPrefixFormattingRule()); // If `national_prefix_formatting_rule` of a `format` simply prepends\n        // national prefix at the start of a national (significant) number,\n        // then such formatting can be used with `AsYouType` formatter.\n        // There seems to be no `else` case: everywhere in metadata,\n        // national prefix formatting rule is national prefix + $1,\n        // or `($1)`, in which case such format isn't even considered\n        // when the user has input a national prefix.\n\n        /* istanbul ignore else */\n\n        if (parseDigits(format.nationalPrefixFormattingRule()) === (nationalPrefix || '') + parseDigits('$1')) {\n          numberFormat = numberFormatWithNationalPrefix;\n          nationalPrefixIncludedInTemplate = true; // Replace all digits of the national prefix in the formatting template\n          // with `DIGIT_PLACEHOLDER`s.\n\n          if (nationalPrefix) {\n            var i = nationalPrefix.length;\n\n            while (i > 0) {\n              numberFormat = numberFormat.replace(/\\d/, DIGIT_PLACEHOLDER);\n              i--;\n            }\n          }\n        }\n      } // Generate formatting template for this phone number format.\n\n\n      var template = digits // Format the dummy phone number according to the format.\n      .replace(new RegExp(pattern), numberFormat) // Replace each dummy digit with a DIGIT_PLACEHOLDER.\n      .replace(new RegExp(DUMMY_DIGIT, 'g'), DIGIT_PLACEHOLDER); // If a prefix of a national (significant) number is not as simple\n      // as just a basic national prefix, then just prepend such prefix\n      // before the national (significant) number, optionally spacing\n      // the two with a whitespace.\n\n      if (!nationalPrefixIncludedInTemplate) {\n        if (complexPrefixBeforeNationalSignificantNumber) {\n          // Prepend the prefix to the template manually.\n          template = repeat(DIGIT_PLACEHOLDER, complexPrefixBeforeNationalSignificantNumber.length) + ' ' + template;\n        } else if (nationalPrefix) {\n          // Prepend national prefix to the template manually.\n          template = repeat(DIGIT_PLACEHOLDER, nationalPrefix.length) + this.getSeparatorAfterNationalPrefix(format) + template;\n        }\n      }\n\n      if (international) {\n        template = applyInternationalSeparatorStyle(template);\n      }\n\n      return template;\n    }\n  }, {\n    key: \"formatNextNationalNumberDigits\",\n    value: function formatNextNationalNumberDigits(digits) {\n      var result = populateTemplateWithDigits(this.populatedNationalNumberTemplate, this.populatedNationalNumberTemplatePosition, digits);\n\n      if (!result) {\n        // Reset the format.\n        this.resetFormat();\n        return;\n      }\n\n      this.populatedNationalNumberTemplate = result[0];\n      this.populatedNationalNumberTemplatePosition = result[1]; // Return the formatted phone number so far.\n\n      return cutAndStripNonPairedParens(this.populatedNationalNumberTemplate, this.populatedNationalNumberTemplatePosition + 1); // The old way which was good for `input-format` but is not so good\n      // for `react-phone-number-input`'s default input (`InputBasic`).\n      // return closeNonPairedParens(this.populatedNationalNumberTemplate, this.populatedNationalNumberTemplatePosition + 1)\n      // \t.replace(new RegExp(DIGIT_PLACEHOLDER, 'g'), ' ')\n    }\n  }, {\n    key: \"shouldTryNationalPrefixFormattingRule\",\n    value: function shouldTryNationalPrefixFormattingRule(format, _ref5) {\n      var international = _ref5.international,\n          nationalPrefix = _ref5.nationalPrefix;\n\n      if (format.nationalPrefixFormattingRule()) {\n        // In some countries, `national_prefix_formatting_rule` is `($1)`,\n        // so it applies even if the user hasn't input a national prefix.\n        // `format.usesNationalPrefix()` detects such cases.\n        var usesNationalPrefix = format.usesNationalPrefix();\n\n        if (usesNationalPrefix && nationalPrefix || !usesNationalPrefix && !international) {\n          return true;\n        }\n      }\n    }\n  }]);\n\n  return AsYouTypeFormatter;\n}();\n\nexport { AsYouTypeFormatter as default };\n//# sourceMappingURL=AsYouTypeFormatter.js.map","function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\n\nimport _extractCountryCallingCode from './helpers/extractCountryCallingCode.js';\nimport extractCountryCallingCodeFromInternationalNumberWithoutPlusSign from './helpers/extractCountryCallingCodeFromInternationalNumberWithoutPlusSign.js';\nimport extractNationalNumberFromPossiblyIncompleteNumber from './helpers/extractNationalNumberFromPossiblyIncompleteNumber.js';\nimport stripIddPrefix from './helpers/stripIddPrefix.js';\nimport parseDigits from './helpers/parseDigits.js';\nimport { VALID_DIGITS, VALID_PUNCTUATION, PLUS_CHARS } from './constants.js';\nvar VALID_FORMATTED_PHONE_NUMBER_DIGITS_PART = '[' + VALID_PUNCTUATION + VALID_DIGITS + ']+';\nvar VALID_FORMATTED_PHONE_NUMBER_DIGITS_PART_PATTERN = new RegExp('^' + VALID_FORMATTED_PHONE_NUMBER_DIGITS_PART + '$', 'i');\nvar VALID_FORMATTED_PHONE_NUMBER_PART = '(?:' + '[' + PLUS_CHARS + ']' + '[' + VALID_PUNCTUATION + VALID_DIGITS + ']*' + '|' + '[' + VALID_PUNCTUATION + VALID_DIGITS + ']+' + ')';\nvar AFTER_PHONE_NUMBER_DIGITS_END_PATTERN = new RegExp('[^' + VALID_PUNCTUATION + VALID_DIGITS + ']+' + '.*' + '$'); // Tests whether `national_prefix_for_parsing` could match\n// different national prefixes.\n// Matches anything that's not a digit or a square bracket.\n\nvar COMPLEX_NATIONAL_PREFIX = /[^\\d\\[\\]]/;\n\nvar AsYouTypeParser = /*#__PURE__*/function () {\n  function AsYouTypeParser(_ref) {\n    var defaultCountry = _ref.defaultCountry,\n        defaultCallingCode = _ref.defaultCallingCode,\n        metadata = _ref.metadata,\n        onNationalSignificantNumberChange = _ref.onNationalSignificantNumberChange;\n\n    _classCallCheck(this, AsYouTypeParser);\n\n    this.defaultCountry = defaultCountry;\n    this.defaultCallingCode = defaultCallingCode;\n    this.metadata = metadata;\n    this.onNationalSignificantNumberChange = onNationalSignificantNumberChange;\n  }\n\n  _createClass(AsYouTypeParser, [{\n    key: \"input\",\n    value: function input(text, state) {\n      var _extractFormattedDigi = extractFormattedDigitsAndPlus(text),\n          _extractFormattedDigi2 = _slicedToArray(_extractFormattedDigi, 2),\n          formattedDigits = _extractFormattedDigi2[0],\n          hasPlus = _extractFormattedDigi2[1];\n\n      var digits = parseDigits(formattedDigits); // Checks for a special case: just a leading `+` has been entered.\n\n      var justLeadingPlus;\n\n      if (hasPlus) {\n        if (!state.digits) {\n          state.startInternationalNumber();\n\n          if (!digits) {\n            justLeadingPlus = true;\n          }\n        }\n      }\n\n      if (digits) {\n        this.inputDigits(digits, state);\n      }\n\n      return {\n        digits: digits,\n        justLeadingPlus: justLeadingPlus\n      };\n    }\n    /**\r\n     * Inputs \"next\" phone number digits.\r\n     * @param  {string} digits\r\n     * @return {string} [formattedNumber] Formatted national phone number (if it can be formatted at this stage). Returning `undefined` means \"don't format the national phone number at this stage\".\r\n     */\n\n  }, {\n    key: \"inputDigits\",\n    value: function inputDigits(nextDigits, state) {\n      var digits = state.digits;\n      var hasReceivedThreeLeadingDigits = digits.length < 3 && digits.length + nextDigits.length >= 3; // Append phone number digits.\n\n      state.appendDigits(nextDigits); // Attempt to extract IDD prefix:\n      // Some users input their phone number in international format,\n      // but in an \"out-of-country\" dialing format instead of using the leading `+`.\n      // https://github.com/catamphetamine/libphonenumber-js/issues/185\n      // Detect such numbers as soon as there're at least 3 digits.\n      // Google's library attempts to extract IDD prefix at 3 digits,\n      // so this library just copies that behavior.\n      // I guess that's because the most commot IDD prefixes are\n      // `00` (Europe) and `011` (US).\n      // There exist really long IDD prefixes too:\n      // for example, in Australia the default IDD prefix is `0011`,\n      // and it could even be as long as `14880011`.\n      // An IDD prefix is extracted here, and then every time when\n      // there's a new digit and the number couldn't be formatted.\n\n      if (hasReceivedThreeLeadingDigits) {\n        this.extractIddPrefix(state);\n      }\n\n      if (this.isWaitingForCountryCallingCode(state)) {\n        if (!this.extractCountryCallingCode(state)) {\n          return;\n        }\n      } else {\n        state.appendNationalSignificantNumberDigits(nextDigits);\n      } // If a phone number is being input in international format,\n      // then it's not valid for it to have a national prefix.\n      // Still, some people incorrectly input such numbers with a national prefix.\n      // In such cases, only attempt to strip a national prefix if the number becomes too long.\n      // (but that is done later, not here)\n\n\n      if (!state.international) {\n        if (!this.hasExtractedNationalSignificantNumber) {\n          this.extractNationalSignificantNumber(state.getNationalDigits(), function (stateUpdate) {\n            return state.update(stateUpdate);\n          });\n        }\n      }\n    }\n  }, {\n    key: \"isWaitingForCountryCallingCode\",\n    value: function isWaitingForCountryCallingCode(_ref2) {\n      var international = _ref2.international,\n          callingCode = _ref2.callingCode;\n      return international && !callingCode;\n    } // Extracts a country calling code from a number\n    // being entered in internatonal format.\n\n  }, {\n    key: \"extractCountryCallingCode\",\n    value: function extractCountryCallingCode(state) {\n      var _extractCountryCallin = _extractCountryCallingCode('+' + state.getDigitsWithoutInternationalPrefix(), this.defaultCountry, this.defaultCallingCode, this.metadata.metadata),\n          countryCallingCode = _extractCountryCallin.countryCallingCode,\n          number = _extractCountryCallin.number;\n\n      if (countryCallingCode) {\n        state.setCallingCode(countryCallingCode);\n        state.update({\n          nationalSignificantNumber: number\n        });\n        return true;\n      }\n    }\n  }, {\n    key: \"reset\",\n    value: function reset(numberingPlan) {\n      if (numberingPlan) {\n        this.hasSelectedNumberingPlan = true;\n\n        var nationalPrefixForParsing = numberingPlan._nationalPrefixForParsing();\n\n        this.couldPossiblyExtractAnotherNationalSignificantNumber = nationalPrefixForParsing && COMPLEX_NATIONAL_PREFIX.test(nationalPrefixForParsing);\n      } else {\n        this.hasSelectedNumberingPlan = undefined;\n        this.couldPossiblyExtractAnotherNationalSignificantNumber = undefined;\n      }\n    }\n    /**\r\n     * Extracts a national (significant) number from user input.\r\n     * Google's library is different in that it only applies `national_prefix_for_parsing`\r\n     * and doesn't apply `national_prefix_transform_rule` after that.\r\n     * https://github.com/google/libphonenumber/blob/a3d70b0487875475e6ad659af404943211d26456/java/libphonenumber/src/com/google/i18n/phonenumbers/AsYouTypeFormatter.java#L539\r\n     * @return {boolean} [extracted]\r\n     */\n\n  }, {\n    key: \"extractNationalSignificantNumber\",\n    value: function extractNationalSignificantNumber(nationalDigits, setState) {\n      if (!this.hasSelectedNumberingPlan) {\n        return;\n      }\n\n      var _extractNationalNumbe = extractNationalNumberFromPossiblyIncompleteNumber(nationalDigits, this.metadata),\n          nationalPrefix = _extractNationalNumbe.nationalPrefix,\n          nationalNumber = _extractNationalNumbe.nationalNumber,\n          carrierCode = _extractNationalNumbe.carrierCode;\n\n      if (nationalNumber === nationalDigits) {\n        return;\n      }\n\n      this.onExtractedNationalNumber(nationalPrefix, carrierCode, nationalNumber, nationalDigits, setState);\n      return true;\n    }\n    /**\r\n     * In Google's code this function is called \"attempt to extract longer NDD\".\r\n     * \"Some national prefixes are a substring of others\", they say.\r\n     * @return {boolean} [result] — Returns `true` if extracting a national prefix produced different results from what they were.\r\n     */\n\n  }, {\n    key: \"extractAnotherNationalSignificantNumber\",\n    value: function extractAnotherNationalSignificantNumber(nationalDigits, prevNationalSignificantNumber, setState) {\n      if (!this.hasExtractedNationalSignificantNumber) {\n        return this.extractNationalSignificantNumber(nationalDigits, setState);\n      }\n\n      if (!this.couldPossiblyExtractAnotherNationalSignificantNumber) {\n        return;\n      }\n\n      var _extractNationalNumbe2 = extractNationalNumberFromPossiblyIncompleteNumber(nationalDigits, this.metadata),\n          nationalPrefix = _extractNationalNumbe2.nationalPrefix,\n          nationalNumber = _extractNationalNumbe2.nationalNumber,\n          carrierCode = _extractNationalNumbe2.carrierCode; // If a national prefix has been extracted previously,\n      // then it's always extracted as additional digits are added.\n      // That's assuming `extractNationalNumberFromPossiblyIncompleteNumber()`\n      // doesn't do anything different from what it currently does.\n      // So, just in case, here's this check, though it doesn't occur.\n\n      /* istanbul ignore if */\n\n\n      if (nationalNumber === prevNationalSignificantNumber) {\n        return;\n      }\n\n      this.onExtractedNationalNumber(nationalPrefix, carrierCode, nationalNumber, nationalDigits, setState);\n      return true;\n    }\n  }, {\n    key: \"onExtractedNationalNumber\",\n    value: function onExtractedNationalNumber(nationalPrefix, carrierCode, nationalSignificantNumber, nationalDigits, setState) {\n      var complexPrefixBeforeNationalSignificantNumber;\n      var nationalSignificantNumberMatchesInput; // This check also works with empty `this.nationalSignificantNumber`.\n\n      var nationalSignificantNumberIndex = nationalDigits.lastIndexOf(nationalSignificantNumber); // If the extracted national (significant) number is the\n      // last substring of the `digits`, then it means that it hasn't been altered:\n      // no digits have been removed from the national (significant) number\n      // while applying `national_prefix_transform_rule`.\n      // https://gitlab.com/catamphetamine/libphonenumber-js/-/blob/master/METADATA.md#national_prefix_for_parsing--national_prefix_transform_rule\n\n      if (nationalSignificantNumberIndex >= 0 && nationalSignificantNumberIndex === nationalDigits.length - nationalSignificantNumber.length) {\n        nationalSignificantNumberMatchesInput = true; // If a prefix of a national (significant) number is not as simple\n        // as just a basic national prefix, then such prefix is stored in\n        // `this.complexPrefixBeforeNationalSignificantNumber` property and will be\n        // prepended \"as is\" to the national (significant) number to produce\n        // a formatted result.\n\n        var prefixBeforeNationalNumber = nationalDigits.slice(0, nationalSignificantNumberIndex); // `prefixBeforeNationalNumber` is always non-empty,\n        // because `onExtractedNationalNumber()` isn't called\n        // when a national (significant) number hasn't been actually \"extracted\":\n        // when a national (significant) number is equal to the national part of `digits`,\n        // then `onExtractedNationalNumber()` doesn't get called.\n\n        if (prefixBeforeNationalNumber !== nationalPrefix) {\n          complexPrefixBeforeNationalSignificantNumber = prefixBeforeNationalNumber;\n        }\n      }\n\n      setState({\n        nationalPrefix: nationalPrefix,\n        carrierCode: carrierCode,\n        nationalSignificantNumber: nationalSignificantNumber,\n        nationalSignificantNumberMatchesInput: nationalSignificantNumberMatchesInput,\n        complexPrefixBeforeNationalSignificantNumber: complexPrefixBeforeNationalSignificantNumber\n      }); // `onExtractedNationalNumber()` is only called when\n      // the national (significant) number actually did change.\n\n      this.hasExtractedNationalSignificantNumber = true;\n      this.onNationalSignificantNumberChange();\n    }\n  }, {\n    key: \"reExtractNationalSignificantNumber\",\n    value: function reExtractNationalSignificantNumber(state) {\n      // Attempt to extract a national prefix.\n      //\n      // Some people incorrectly input national prefix\n      // in an international phone number.\n      // For example, some people write British phone numbers as `+44(0)...`.\n      //\n      // Also, in some rare cases, it is valid for a national prefix\n      // to be a part of an international phone number.\n      // For example, mobile phone numbers in Mexico are supposed to be\n      // dialled internationally using a `1` national prefix,\n      // so the national prefix will be part of an international number.\n      //\n      // Quote from:\n      // https://www.mexperience.com/dialing-cell-phones-in-mexico/\n      //\n      // \"Dialing a Mexican cell phone from abroad\n      // When you are calling a cell phone number in Mexico from outside Mexico,\n      // it’s necessary to dial an additional “1” after Mexico’s country code\n      // (which is “52”) and before the area code.\n      // You also ignore the 045, and simply dial the area code and the\n      // cell phone’s number.\n      //\n      // If you don’t add the “1”, you’ll receive a recorded announcement\n      // asking you to redial using it.\n      //\n      // For example, if you are calling from the USA to a cell phone\n      // in Mexico City, you would dial +52 – 1 – 55 – 1234 5678.\n      // (Note that this is different to calling a land line in Mexico City\n      // from abroad, where the number dialed would be +52 – 55 – 1234 5678)\".\n      //\n      // Google's demo output:\n      // https://libphonenumber.appspot.com/phonenumberparser?number=%2b5215512345678&country=MX\n      //\n      if (this.extractAnotherNationalSignificantNumber(state.getNationalDigits(), state.nationalSignificantNumber, function (stateUpdate) {\n        return state.update(stateUpdate);\n      })) {\n        return true;\n      } // If no format matches the phone number, then it could be\n      // \"a really long IDD\" (quote from a comment in Google's library).\n      // An IDD prefix is first extracted when the user has entered at least 3 digits,\n      // and then here — every time when there's a new digit and the number\n      // couldn't be formatted.\n      // For example, in Australia the default IDD prefix is `0011`,\n      // and it could even be as long as `14880011`.\n      //\n      // Could also check `!hasReceivedThreeLeadingDigits` here\n      // to filter out the case when this check duplicates the one\n      // already performed when there're 3 leading digits,\n      // but it's not a big deal, and in most cases there\n      // will be a suitable `format` when there're 3 leading digits.\n      //\n\n\n      if (this.extractIddPrefix(state)) {\n        this.extractCallingCodeAndNationalSignificantNumber(state);\n        return true;\n      } // Google's AsYouType formatter supports sort of an \"autocorrection\" feature\n      // when it \"autocorrects\" numbers that have been input for a country\n      // with that country's calling code.\n      // Such \"autocorrection\" feature looks weird, but different people have been requesting it:\n      // https://github.com/catamphetamine/libphonenumber-js/issues/376\n      // https://github.com/catamphetamine/libphonenumber-js/issues/375\n      // https://github.com/catamphetamine/libphonenumber-js/issues/316\n\n\n      if (this.fixMissingPlus(state)) {\n        this.extractCallingCodeAndNationalSignificantNumber(state);\n        return true;\n      }\n    }\n  }, {\n    key: \"extractIddPrefix\",\n    value: function extractIddPrefix(state) {\n      // An IDD prefix can't be present in a number written with a `+`.\n      // Also, don't re-extract an IDD prefix if has already been extracted.\n      var international = state.international,\n          IDDPrefix = state.IDDPrefix,\n          digits = state.digits,\n          nationalSignificantNumber = state.nationalSignificantNumber;\n\n      if (international || IDDPrefix) {\n        return;\n      } // Some users input their phone number in \"out-of-country\"\n      // dialing format instead of using the leading `+`.\n      // https://github.com/catamphetamine/libphonenumber-js/issues/185\n      // Detect such numbers.\n\n\n      var numberWithoutIDD = stripIddPrefix(digits, this.defaultCountry, this.defaultCallingCode, this.metadata.metadata);\n\n      if (numberWithoutIDD !== undefined && numberWithoutIDD !== digits) {\n        // If an IDD prefix was stripped then convert the IDD-prefixed number\n        // to international number for subsequent parsing.\n        state.update({\n          IDDPrefix: digits.slice(0, digits.length - numberWithoutIDD.length)\n        });\n        this.startInternationalNumber(state);\n        return true;\n      }\n    }\n  }, {\n    key: \"fixMissingPlus\",\n    value: function fixMissingPlus(state) {\n      if (!state.international) {\n        var _extractCountryCallin2 = extractCountryCallingCodeFromInternationalNumberWithoutPlusSign(state.digits, this.defaultCountry, this.defaultCallingCode, this.metadata.metadata),\n            newCallingCode = _extractCountryCallin2.countryCallingCode,\n            number = _extractCountryCallin2.number;\n\n        if (newCallingCode) {\n          state.update({\n            missingPlus: true\n          });\n          this.startInternationalNumber(state);\n          return true;\n        }\n      }\n    }\n  }, {\n    key: \"startInternationalNumber\",\n    value: function startInternationalNumber(state) {\n      state.startInternationalNumber(); // If a national (significant) number has been extracted before, reset it.\n\n      if (state.nationalSignificantNumber) {\n        state.resetNationalSignificantNumber();\n        this.onNationalSignificantNumberChange();\n        this.hasExtractedNationalSignificantNumber = undefined;\n      }\n    }\n  }, {\n    key: \"extractCallingCodeAndNationalSignificantNumber\",\n    value: function extractCallingCodeAndNationalSignificantNumber(state) {\n      if (this.extractCountryCallingCode(state)) {\n        // `this.extractCallingCode()` is currently called when the number\n        // couldn't be formatted during the standard procedure.\n        // Normally, the national prefix would be re-extracted\n        // for an international number if such number couldn't be formatted,\n        // but since it's already not able to be formatted,\n        // there won't be yet another retry, so also extract national prefix here.\n        this.extractNationalSignificantNumber(state.getNationalDigits(), function (stateUpdate) {\n          return state.update(stateUpdate);\n        });\n      }\n    }\n  }]);\n\n  return AsYouTypeParser;\n}();\n/**\r\n * Extracts formatted phone number from text (if there's any).\r\n * @param  {string} text\r\n * @return {string} [formattedPhoneNumber]\r\n */\n\n\nexport { AsYouTypeParser as default };\n\nfunction extractFormattedPhoneNumber(text) {\n  // Attempt to extract a possible number from the string passed in.\n  var startsAt = text.search(VALID_FORMATTED_PHONE_NUMBER_PART);\n\n  if (startsAt < 0) {\n    return;\n  } // Trim everything to the left of the phone number.\n\n\n  text = text.slice(startsAt); // Trim the `+`.\n\n  var hasPlus;\n\n  if (text[0] === '+') {\n    hasPlus = true;\n    text = text.slice('+'.length);\n  } // Trim everything to the right of the phone number.\n\n\n  text = text.replace(AFTER_PHONE_NUMBER_DIGITS_END_PATTERN, ''); // Re-add the previously trimmed `+`.\n\n  if (hasPlus) {\n    text = '+' + text;\n  }\n\n  return text;\n}\n/**\r\n * Extracts formatted phone number digits (and a `+`) from text (if there're any).\r\n * @param  {string} text\r\n * @return {any[]}\r\n */\n\n\nfunction _extractFormattedDigitsAndPlus(text) {\n  // Extract a formatted phone number part from text.\n  var extractedNumber = extractFormattedPhoneNumber(text) || ''; // Trim a `+`.\n\n  if (extractedNumber[0] === '+') {\n    return [extractedNumber.slice('+'.length), true];\n  }\n\n  return [extractedNumber];\n}\n/**\r\n * Extracts formatted phone number digits (and a `+`) from text (if there're any).\r\n * @param  {string} text\r\n * @return {any[]}\r\n */\n\n\nexport function extractFormattedDigitsAndPlus(text) {\n  var _extractFormattedDigi3 = _extractFormattedDigitsAndPlus(text),\n      _extractFormattedDigi4 = _slicedToArray(_extractFormattedDigi3, 2),\n      formattedDigits = _extractFormattedDigi4[0],\n      hasPlus = _extractFormattedDigi4[1]; // If the extracted phone number part\n  // can possibly be a part of some valid phone number\n  // then parse phone number characters from a formatted phone number.\n\n\n  if (!VALID_FORMATTED_PHONE_NUMBER_DIGITS_PART_PATTERN.test(formattedDigits)) {\n    formattedDigits = '';\n  }\n\n  return [formattedDigits, hasPlus];\n}\n//# sourceMappingURL=AsYouTypeParser.js.map","function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\n\nimport Metadata from './metadata.js';\nimport PhoneNumber from './PhoneNumber.js';\nimport AsYouTypeState from './AsYouTypeState.js';\nimport AsYouTypeFormatter, { DIGIT_PLACEHOLDER } from './AsYouTypeFormatter.js';\nimport AsYouTypeParser, { extractFormattedDigitsAndPlus } from './AsYouTypeParser.js';\nimport getCountryByCallingCode from './helpers/getCountryByCallingCode.js';\nvar USE_NON_GEOGRAPHIC_COUNTRY_CODE = false;\n\nvar AsYouType = /*#__PURE__*/function () {\n  /**\r\n   * @param {(string|object)?} [optionsOrDefaultCountry] - The default country used for parsing non-international phone numbers. Can also be an `options` object.\r\n   * @param {Object} metadata\r\n   */\n  function AsYouType(optionsOrDefaultCountry, metadata) {\n    _classCallCheck(this, AsYouType);\n\n    this.metadata = new Metadata(metadata);\n\n    var _this$getCountryAndCa = this.getCountryAndCallingCode(optionsOrDefaultCountry),\n        _this$getCountryAndCa2 = _slicedToArray(_this$getCountryAndCa, 2),\n        defaultCountry = _this$getCountryAndCa2[0],\n        defaultCallingCode = _this$getCountryAndCa2[1];\n\n    this.defaultCountry = defaultCountry;\n    this.defaultCallingCode = defaultCallingCode;\n    this.reset();\n  }\n\n  _createClass(AsYouType, [{\n    key: \"getCountryAndCallingCode\",\n    value: function getCountryAndCallingCode(optionsOrDefaultCountry) {\n      // Set `defaultCountry` and `defaultCallingCode` options.\n      var defaultCountry;\n      var defaultCallingCode; // Turns out `null` also has type \"object\". Weird.\n\n      if (optionsOrDefaultCountry) {\n        if (_typeof(optionsOrDefaultCountry) === 'object') {\n          defaultCountry = optionsOrDefaultCountry.defaultCountry;\n          defaultCallingCode = optionsOrDefaultCountry.defaultCallingCode;\n        } else {\n          defaultCountry = optionsOrDefaultCountry;\n        }\n      }\n\n      if (defaultCountry && !this.metadata.hasCountry(defaultCountry)) {\n        defaultCountry = undefined;\n      }\n\n      if (defaultCallingCode) {\n        /* istanbul ignore if */\n        if (USE_NON_GEOGRAPHIC_COUNTRY_CODE) {\n          if (this.metadata.isNonGeographicCallingCode(defaultCallingCode)) {\n            defaultCountry = '001';\n          }\n        }\n      }\n\n      return [defaultCountry, defaultCallingCode];\n    }\n    /**\r\n     * Inputs \"next\" phone number characters.\r\n     * @param  {string} text\r\n     * @return {string} Formatted phone number characters that have been input so far.\r\n     */\n\n  }, {\n    key: \"input\",\n    value: function input(text) {\n      var _this$parser$input = this.parser.input(text, this.state),\n          digits = _this$parser$input.digits,\n          justLeadingPlus = _this$parser$input.justLeadingPlus;\n\n      if (justLeadingPlus) {\n        this.formattedOutput = '+';\n      } else if (digits) {\n        this.determineTheCountryIfNeeded(); // Match the available formats by the currently available leading digits.\n\n        if (this.state.nationalSignificantNumber) {\n          this.formatter.narrowDownMatchingFormats(this.state);\n        }\n\n        var formattedNationalNumber;\n\n        if (this.metadata.hasSelectedNumberingPlan()) {\n          formattedNationalNumber = this.formatter.format(digits, this.state);\n        }\n\n        if (formattedNationalNumber === undefined) {\n          // See if another national (significant) number could be re-extracted.\n          if (this.parser.reExtractNationalSignificantNumber(this.state)) {\n            this.determineTheCountryIfNeeded(); // If it could, then re-try formatting the new national (significant) number.\n\n            var nationalDigits = this.state.getNationalDigits();\n\n            if (nationalDigits) {\n              formattedNationalNumber = this.formatter.format(nationalDigits, this.state);\n            }\n          }\n        }\n\n        this.formattedOutput = formattedNationalNumber ? this.getFullNumber(formattedNationalNumber) : this.getNonFormattedNumber();\n      }\n\n      return this.formattedOutput;\n    }\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      var _this = this;\n\n      this.state = new AsYouTypeState({\n        onCountryChange: function onCountryChange(country) {\n          // Before version `1.6.0`, the official `AsYouType` formatter API\n          // included the `.country` property of an `AsYouType` instance.\n          // Since that property (along with the others) have been moved to\n          // `this.state`, `this.country` property is emulated for compatibility\n          // with the old versions.\n          _this.country = country;\n        },\n        onCallingCodeChange: function onCallingCodeChange(country, callingCode) {\n          _this.metadata.selectNumberingPlan(country, callingCode);\n\n          _this.formatter.reset(_this.metadata.numberingPlan, _this.state);\n\n          _this.parser.reset(_this.metadata.numberingPlan);\n        }\n      });\n      this.formatter = new AsYouTypeFormatter({\n        state: this.state,\n        metadata: this.metadata\n      });\n      this.parser = new AsYouTypeParser({\n        defaultCountry: this.defaultCountry,\n        defaultCallingCode: this.defaultCallingCode,\n        metadata: this.metadata,\n        state: this.state,\n        onNationalSignificantNumberChange: function onNationalSignificantNumberChange() {\n          _this.determineTheCountryIfNeeded();\n\n          _this.formatter.reset(_this.metadata.numberingPlan, _this.state);\n        }\n      });\n      this.state.reset(this.defaultCountry, this.defaultCallingCode);\n      this.formattedOutput = '';\n      return this;\n    }\n    /**\r\n     * Returns `true` if the phone number is being input in international format.\r\n     * In other words, returns `true` if and only if the parsed phone number starts with a `\"+\"`.\r\n     * @return {boolean}\r\n     */\n\n  }, {\n    key: \"isInternational\",\n    value: function isInternational() {\n      return this.state.international;\n    }\n    /**\r\n     * Returns the \"calling code\" part of the phone number when it's being input\r\n     * in an international format.\r\n     * If no valid calling code has been entered so far, returns `undefined`.\r\n     * @return {string} [callingCode]\r\n     */\n\n  }, {\n    key: \"getCallingCode\",\n    value: function getCallingCode() {\n      // If the number is being input in national format and some \"default calling code\"\n      // has been passed to `AsYouType` constructor, then `this.state.callingCode`\n      // is equal to that \"default calling code\".\n      //\n      // If the number is being input in national format and no \"default calling code\"\n      // has been passed to `AsYouType` constructor, then returns `undefined`,\n      // even if a \"default country\" has been passed to `AsYouType` constructor.\n      //\n      if (this.isInternational()) {\n        return this.state.callingCode;\n      }\n    } // A legacy alias.\n\n  }, {\n    key: \"getCountryCallingCode\",\n    value: function getCountryCallingCode() {\n      return this.getCallingCode();\n    }\n    /**\r\n     * Returns a two-letter country code of the phone number.\r\n     * Returns `undefined` for \"non-geographic\" phone numbering plans.\r\n     * Returns `undefined` if no phone number has been input yet.\r\n     * @return {string} [country]\r\n     */\n\n  }, {\n    key: \"getCountry\",\n    value: function getCountry() {\n      var digits = this.state.digits; // Return `undefined` if no digits have been input yet.\n\n      if (digits) {\n        return this._getCountry();\n      }\n    }\n    /**\r\n     * Returns a two-letter country code of the phone number.\r\n     * Returns `undefined` for \"non-geographic\" phone numbering plans.\r\n     * @return {string} [country]\r\n     */\n\n  }, {\n    key: \"_getCountry\",\n    value: function _getCountry() {\n      var country = this.state.country;\n      /* istanbul ignore if */\n\n      if (USE_NON_GEOGRAPHIC_COUNTRY_CODE) {\n        // `AsYouType.getCountry()` returns `undefined`\n        // for \"non-geographic\" phone numbering plans.\n        if (country === '001') {\n          return;\n        }\n      }\n\n      return country;\n    }\n  }, {\n    key: \"determineTheCountryIfNeeded\",\n    value: function determineTheCountryIfNeeded() {\n      // Suppose a user enters a phone number in international format,\n      // and there're several countries corresponding to that country calling code,\n      // and a country has been derived from the number, and then\n      // a user enters one more digit and the number is no longer\n      // valid for the derived country, so the country should be re-derived\n      // on every new digit in those cases.\n      //\n      // If the phone number is being input in national format,\n      // then it could be a case when `defaultCountry` wasn't specified\n      // when creating `AsYouType` instance, and just `defaultCallingCode` was specified,\n      // and that \"calling code\" could correspond to a \"non-geographic entity\",\n      // or there could be several countries corresponding to that country calling code.\n      // In those cases, `this.country` is `undefined` and should be derived\n      // from the number. Again, if country calling code is ambiguous, then\n      // `this.country` should be re-derived with each new digit.\n      //\n      if (!this.state.country || this.isCountryCallingCodeAmbiguous()) {\n        this.determineTheCountry();\n      }\n    } // Prepends `+CountryCode ` in case of an international phone number\n\n  }, {\n    key: \"getFullNumber\",\n    value: function getFullNumber(formattedNationalNumber) {\n      var _this2 = this;\n\n      if (this.isInternational()) {\n        var prefix = function prefix(text) {\n          return _this2.formatter.getInternationalPrefixBeforeCountryCallingCode(_this2.state, {\n            spacing: text ? true : false\n          }) + text;\n        };\n\n        var callingCode = this.state.callingCode;\n\n        if (!callingCode) {\n          return prefix(\"\".concat(this.state.getDigitsWithoutInternationalPrefix()));\n        }\n\n        if (!formattedNationalNumber) {\n          return prefix(callingCode);\n        }\n\n        return prefix(\"\".concat(callingCode, \" \").concat(formattedNationalNumber));\n      }\n\n      return formattedNationalNumber;\n    }\n  }, {\n    key: \"getNonFormattedNationalNumberWithPrefix\",\n    value: function getNonFormattedNationalNumberWithPrefix() {\n      var _this$state = this.state,\n          nationalSignificantNumber = _this$state.nationalSignificantNumber,\n          complexPrefixBeforeNationalSignificantNumber = _this$state.complexPrefixBeforeNationalSignificantNumber,\n          nationalPrefix = _this$state.nationalPrefix;\n      var number = nationalSignificantNumber;\n      var prefix = complexPrefixBeforeNationalSignificantNumber || nationalPrefix;\n\n      if (prefix) {\n        number = prefix + number;\n      }\n\n      return number;\n    }\n  }, {\n    key: \"getNonFormattedNumber\",\n    value: function getNonFormattedNumber() {\n      var nationalSignificantNumberMatchesInput = this.state.nationalSignificantNumberMatchesInput;\n      return this.getFullNumber(nationalSignificantNumberMatchesInput ? this.getNonFormattedNationalNumberWithPrefix() : this.state.getNationalDigits());\n    }\n  }, {\n    key: \"getNonFormattedTemplate\",\n    value: function getNonFormattedTemplate() {\n      var number = this.getNonFormattedNumber();\n\n      if (number) {\n        return number.replace(/[\\+\\d]/g, DIGIT_PLACEHOLDER);\n      }\n    }\n  }, {\n    key: \"isCountryCallingCodeAmbiguous\",\n    value: function isCountryCallingCodeAmbiguous() {\n      var callingCode = this.state.callingCode;\n      var countryCodes = this.metadata.getCountryCodesForCallingCode(callingCode);\n      return countryCodes && countryCodes.length > 1;\n    } // Determines the country of the phone number\n    // entered so far based on the country phone code\n    // and the national phone number.\n\n  }, {\n    key: \"determineTheCountry\",\n    value: function determineTheCountry() {\n      this.state.setCountry(getCountryByCallingCode(this.isInternational() ? this.state.callingCode : this.defaultCallingCode, this.state.nationalSignificantNumber, this.metadata));\n    }\n    /**\r\n     * Returns a E.164 phone number value for the user's input.\r\n     *\r\n     * For example, for country `\"US\"` and input `\"(222) 333-4444\"`\r\n     * it will return `\"+12223334444\"`.\r\n     *\r\n     * For international phone number input, it will also auto-correct\r\n     * some minor errors such as using a national prefix when writing\r\n     * an international phone number. For example, if the user inputs\r\n     * `\"+44 0 7400 000000\"` then it will return an auto-corrected\r\n     * `\"+447400000000\"` phone number value.\r\n     *\r\n     * Will return `undefined` if no digits have been input,\r\n     * or when inputting a phone number in national format and no\r\n     * default country or default \"country calling code\" have been set.\r\n     *\r\n     * @return {string} [value]\r\n     */\n\n  }, {\n    key: \"getNumberValue\",\n    value: function getNumberValue() {\n      var _this$state2 = this.state,\n          digits = _this$state2.digits,\n          callingCode = _this$state2.callingCode,\n          country = _this$state2.country,\n          nationalSignificantNumber = _this$state2.nationalSignificantNumber; // Will return `undefined` if no digits have been input.\n\n      if (!digits) {\n        return;\n      }\n\n      if (this.isInternational()) {\n        if (callingCode) {\n          return '+' + callingCode + nationalSignificantNumber;\n        } else {\n          return '+' + digits;\n        }\n      } else {\n        if (country || callingCode) {\n          var callingCode_ = country ? this.metadata.countryCallingCode() : callingCode;\n          return '+' + callingCode_ + nationalSignificantNumber;\n        }\n      }\n    }\n    /**\r\n     * Returns an instance of `PhoneNumber` class.\r\n     * Will return `undefined` if no national (significant) number\r\n     * digits have been entered so far, or if no `defaultCountry` has been\r\n     * set and the user enters a phone number not in international format.\r\n     */\n\n  }, {\n    key: \"getNumber\",\n    value: function getNumber() {\n      var _this$state3 = this.state,\n          nationalSignificantNumber = _this$state3.nationalSignificantNumber,\n          carrierCode = _this$state3.carrierCode,\n          callingCode = _this$state3.callingCode; // `this._getCountry()` is basically same as `this.state.country`\n      // with the only change that it return `undefined` in case of a\n      // \"non-geographic\" numbering plan instead of `\"001\"` \"internal use\" value.\n\n      var country = this._getCountry();\n\n      if (!nationalSignificantNumber) {\n        return;\n      }\n\n      if (!country && !callingCode) {\n        return;\n      }\n\n      var phoneNumber = new PhoneNumber(country || callingCode, nationalSignificantNumber, this.metadata.metadata);\n\n      if (carrierCode) {\n        phoneNumber.carrierCode = carrierCode;\n      } // Phone number extensions are not supported by \"As You Type\" formatter.\n\n\n      return phoneNumber;\n    }\n    /**\r\n     * Returns `true` if the phone number is \"possible\".\r\n     * Is just a shortcut for `PhoneNumber.isPossible()`.\r\n     * @return {boolean}\r\n     */\n\n  }, {\n    key: \"isPossible\",\n    value: function isPossible() {\n      var phoneNumber = this.getNumber();\n\n      if (!phoneNumber) {\n        return false;\n      }\n\n      return phoneNumber.isPossible();\n    }\n    /**\r\n     * Returns `true` if the phone number is \"valid\".\r\n     * Is just a shortcut for `PhoneNumber.isValid()`.\r\n     * @return {boolean}\r\n     */\n\n  }, {\n    key: \"isValid\",\n    value: function isValid() {\n      var phoneNumber = this.getNumber();\n\n      if (!phoneNumber) {\n        return false;\n      }\n\n      return phoneNumber.isValid();\n    }\n    /**\r\n     * @deprecated\r\n     * This method is used in `react-phone-number-input/source/input-control.js`\r\n     * in versions before `3.0.16`.\r\n     */\n\n  }, {\n    key: \"getNationalNumber\",\n    value: function getNationalNumber() {\n      return this.state.nationalSignificantNumber;\n    }\n    /**\r\n     * Returns the phone number characters entered by the user.\r\n     * @return {string}\r\n     */\n\n  }, {\n    key: \"getChars\",\n    value: function getChars() {\n      return (this.state.international ? '+' : '') + this.state.digits;\n    }\n    /**\r\n     * Returns the template for the formatted phone number.\r\n     * @return {string}\r\n     */\n\n  }, {\n    key: \"getTemplate\",\n    value: function getTemplate() {\n      return this.formatter.getTemplate(this.state) || this.getNonFormattedTemplate() || '';\n    }\n  }]);\n\n  return AsYouType;\n}();\n\nexport { AsYouType as default };\n//# sourceMappingURL=AsYouType.js.map","import Metadata from './metadata.js';\nexport default function getCountries(metadata) {\n  return new Metadata(metadata).getCountries();\n}\n//# sourceMappingURL=getCountries.js.map","import { getCountryCallingCode } from 'libphonenumber-js/core';\nexport function getInputValuePrefix(_ref) {\n  var country = _ref.country,\n      international = _ref.international,\n      withCountryCallingCode = _ref.withCountryCallingCode,\n      metadata = _ref.metadata;\n  return country && international && !withCountryCallingCode ? \"+\".concat(getCountryCallingCode(country, metadata)) : '';\n}\nexport function removeInputValuePrefix(value, prefix) {\n  if (prefix) {\n    value = value.slice(prefix.length);\n\n    if (value[0] === ' ') {\n      value = value.slice(1);\n    }\n  }\n\n  return value;\n}\n//# sourceMappingURL=inputValuePrefix.js.map","var _excluded = [\"country\", \"international\", \"withCountryCallingCode\", \"metadata\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React, { useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport Input from 'input-format/react';\nimport { AsYouType, parsePhoneNumberCharacter } from 'libphonenumber-js/core';\nimport { getInputValuePrefix, removeInputValuePrefix } from './helpers/inputValuePrefix.js';\nexport function createInput(defaultMetadata) {\n  /**\r\n   * `InputSmart` is a \"smarter\" implementation of a `Component`\r\n   * that can be passed to `<PhoneInput/>`. It parses and formats\r\n   * the user's and maintains the caret's position in the process.\r\n   * The caret positioning is maintained using `input-format` library.\r\n   * Relies on being run in a DOM environment for calling caret positioning functions.\r\n   */\n  function InputSmart(_ref, ref) {\n    var country = _ref.country,\n        international = _ref.international,\n        withCountryCallingCode = _ref.withCountryCallingCode,\n        metadata = _ref.metadata,\n        rest = _objectWithoutProperties(_ref, _excluded);\n\n    var format = useCallback(function (value) {\n      // \"As you type\" formatter.\n      var formatter = new AsYouType(country, metadata);\n      var prefix = getInputValuePrefix({\n        country: country,\n        international: international,\n        withCountryCallingCode: withCountryCallingCode,\n        metadata: metadata\n      }); // Format the number.\n\n      var text = formatter.input(prefix + value);\n      var template = formatter.getTemplate();\n\n      if (prefix) {\n        text = removeInputValuePrefix(text, prefix); // `AsYouType.getTemplate()` can be `undefined`.\n\n        if (template) {\n          template = removeInputValuePrefix(template, prefix);\n        }\n      }\n\n      return {\n        text: text,\n        template: template\n      };\n    }, [country, metadata]);\n    return /*#__PURE__*/React.createElement(Input, _extends({}, rest, {\n      ref: ref,\n      parse: parsePhoneNumberCharacter,\n      format: format\n    }));\n  }\n\n  InputSmart = /*#__PURE__*/React.forwardRef(InputSmart);\n  InputSmart.propTypes = {\n    /**\r\n     * The parsed phone number.\r\n     * \"Parsed\" not in a sense of \"E.164\"\r\n     * but rather in a sense of \"having only\r\n     * digits and possibly a leading plus character\".\r\n     * Examples: `\"\"`, `\"+\"`, `\"+123\"`, `\"123\"`.\r\n     */\n    value: PropTypes.string.isRequired,\n\n    /**\r\n     * A function of `value: string`.\r\n     * Updates the `value` property.\r\n     */\n    onChange: PropTypes.func.isRequired,\n\n    /**\r\n     * A two-letter country code for formatting `value`\r\n     * as a national phone number (e.g. `(800) 555 35 35`).\r\n     * E.g. \"US\", \"RU\", etc.\r\n     * If no `country` is passed then `value`\r\n     * is formatted as an international phone number.\r\n     * (e.g. `+7 800 555 35 35`)\r\n     * Perhaps the `country` property should have been called `defaultCountry`\r\n     * because if `value` is an international number then `country` is ignored.\r\n     */\n    country: PropTypes.string,\n\n    /**\r\n     * If `country` property is passed along with `international={true}` property\r\n     * then the phone number will be input in \"international\" format for that `country`\r\n     * (without \"country calling code\").\r\n     * For example, if `country=\"US\"` property is passed to \"without country select\" input\r\n     * then the phone number will be input in the \"national\" format for `US` (`(213) 373-4253`).\r\n     * But if both `country=\"US\"` and `international={true}` properties are passed then\r\n     * the phone number will be input in the \"international\" format for `US` (`213 373 4253`)\r\n     * (without \"country calling code\" `+1`).\r\n     */\n    international: PropTypes.bool,\n\n    /**\r\n     * If `country` and `international` properties are set,\r\n     * then by default it won't include \"country calling code\" in the input field.\r\n     * To change that, pass `withCountryCallingCode` property,\r\n     * and it will include \"country calling code\" in the input field.\r\n     */\n    withCountryCallingCode: PropTypes.bool,\n\n    /**\r\n     * `libphonenumber-js` metadata.\r\n     */\n    metadata: PropTypes.object.isRequired\n  };\n  InputSmart.defaultProps = {\n    metadata: defaultMetadata\n  };\n  return InputSmart;\n}\nexport default createInput();\n//# sourceMappingURL=InputSmart.js.map","var _excluded = [\"value\", \"onChange\", \"country\", \"international\", \"withCountryCallingCode\", \"metadata\", \"inputComponent\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React, { useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport { parseIncompletePhoneNumber, formatIncompletePhoneNumber } from 'libphonenumber-js/core';\nimport { getInputValuePrefix, removeInputValuePrefix } from './helpers/inputValuePrefix.js';\nexport function createInput(defaultMetadata) {\n  /**\r\n   * `InputBasic` is the most basic implementation of a `Component`\r\n   * that can be passed to `<PhoneInput/>`. It parses and formats\r\n   * the user's input but doesn't control the caret in the process:\r\n   * when erasing or inserting digits in the middle of a phone number\r\n   * the caret usually jumps to the end (this is the expected behavior).\r\n   * Why does `InputBasic` exist when there's `InputSmart`?\r\n   * One reason is working around the [Samsung Galaxy smart caret positioning bug]\r\n   * (https://github.com/catamphetamine/react-phone-number-input/issues/75).\r\n   * Another reason is that, unlike `InputSmart`, it doesn't require DOM environment.\r\n   */\n  function InputBasic(_ref, ref) {\n    var value = _ref.value,\n        onChange = _ref.onChange,\n        country = _ref.country,\n        international = _ref.international,\n        withCountryCallingCode = _ref.withCountryCallingCode,\n        metadata = _ref.metadata,\n        Input = _ref.inputComponent,\n        rest = _objectWithoutProperties(_ref, _excluded);\n\n    var prefix = getInputValuePrefix({\n      country: country,\n      international: international,\n      withCountryCallingCode: withCountryCallingCode,\n      metadata: metadata\n    });\n\n    var _onChange = useCallback(function (event) {\n      var newValue = parseIncompletePhoneNumber(event.target.value); // By default, if a value is something like `\"(123)\"`\n      // then Backspace would only erase the rightmost brace\n      // becoming something like `\"(123\"`\n      // which would give the same `\"123\"` value\n      // which would then be formatted back to `\"(123)\"`\n      // and so a user wouldn't be able to erase the phone number.\n      // Working around this issue with this simple hack.\n\n      if (newValue === value) {\n        var newValueFormatted = format(prefix, newValue, country, metadata);\n\n        if (newValueFormatted.indexOf(event.target.value) === 0) {\n          // Trim the last digit (or plus sign).\n          newValue = newValue.slice(0, -1);\n        }\n      }\n\n      onChange(newValue);\n    }, [prefix, value, onChange, country, metadata]);\n\n    return /*#__PURE__*/React.createElement(Input, _extends({}, rest, {\n      ref: ref,\n      value: format(prefix, value, country, metadata),\n      onChange: _onChange\n    }));\n  }\n\n  InputBasic = /*#__PURE__*/React.forwardRef(InputBasic);\n  InputBasic.propTypes = {\n    /**\r\n     * The parsed phone number.\r\n     * \"Parsed\" not in a sense of \"E.164\"\r\n     * but rather in a sense of \"having only\r\n     * digits and possibly a leading plus character\".\r\n     * Examples: `\"\"`, `\"+\"`, `\"+123\"`, `\"123\"`.\r\n     */\n    value: PropTypes.string.isRequired,\n\n    /**\r\n     * A function of `value: string`.\r\n     * Updates the `value` property.\r\n     */\n    onChange: PropTypes.func.isRequired,\n\n    /**\r\n     * A two-letter country code for formatting `value`\r\n     * as a national phone number (e.g. `(800) 555 35 35`).\r\n     * E.g. \"US\", \"RU\", etc.\r\n     * If no `country` is passed then `value`\r\n     * is formatted as an international phone number.\r\n     * (e.g. `+7 800 555 35 35`)\r\n     * Perhaps the `country` property should have been called `defaultCountry`\r\n     * because if `value` is an international number then `country` is ignored.\r\n     */\n    country: PropTypes.string,\n\n    /**\r\n     * If `country` property is passed along with `international={true}` property\r\n     * then the phone number will be input in \"international\" format for that `country`\r\n     * (without \"country calling code\").\r\n     * For example, if `country=\"US\"` property is passed to \"without country select\" input\r\n     * then the phone number will be input in the \"national\" format for `US` (`(213) 373-4253`).\r\n     * But if both `country=\"US\"` and `international={true}` properties are passed then\r\n     * the phone number will be input in the \"international\" format for `US` (`213 373 4253`)\r\n     * (without \"country calling code\" `+1`).\r\n     */\n    international: PropTypes.bool,\n\n    /**\r\n     * If `country` and `international` properties are set,\r\n     * then by default it won't include \"country calling code\" in the input field.\r\n     * To change that, pass `withCountryCallingCode` property,\r\n     * and it will include \"country calling code\" in the input field.\r\n     */\n    withCountryCallingCode: PropTypes.bool,\n\n    /**\r\n     * `libphonenumber-js` metadata.\r\n     */\n    metadata: PropTypes.object.isRequired,\n\n    /**\r\n     * The `<input/>` component.\r\n     */\n    inputComponent: PropTypes.elementType.isRequired\n  };\n  InputBasic.defaultProps = {\n    metadata: defaultMetadata,\n    inputComponent: 'input'\n  };\n  return InputBasic;\n}\nexport default createInput();\n\nfunction format(prefix, value, country, metadata) {\n  return removeInputValuePrefix(formatIncompletePhoneNumber(prefix + value, country, metadata), prefix);\n}\n//# sourceMappingURL=InputBasic.js.map","import AsYouType from './AsYouType.js';\n/**\r\n * Formats a (possibly incomplete) phone number.\r\n * The phone number can be either in E.164 format\r\n * or in a form of national number digits.\r\n * @param {string} value - A possibly incomplete phone number. Either in E.164 format or in a form of national number digits.\r\n * @param {string?} country - Two-letter (\"ISO 3166-1 alpha-2\") country code.\r\n * @return {string} Formatted (possibly incomplete) phone number.\r\n */\n\nexport default function formatIncompletePhoneNumber(value, country, metadata) {\n  if (!metadata) {\n    metadata = country;\n    country = undefined;\n  }\n\n  return new AsYouType(country, metadata).input(value);\n}\n//# sourceMappingURL=formatIncompletePhoneNumber.js.map","import { getCountryCallingCode, Metadata } from 'libphonenumber-js/core';\nvar ONLY_DIGITS_REGEXP = /^\\d+$/;\nexport default function getInternationalPhoneNumberPrefix(country, metadata) {\n  // Standard international phone number prefix: \"+\" and \"country calling code\".\n  var prefix = '+' + getCountryCallingCode(country, metadata); // Get \"leading digits\" for a phone number of the country.\n  // If there're \"leading digits\" then they can be part of the prefix too.\n\n  metadata = new Metadata(metadata);\n  metadata.selectNumberingPlan(country);\n\n  if (metadata.numberingPlan.leadingDigits() && ONLY_DIGITS_REGEXP.test(metadata.numberingPlan.leadingDigits())) {\n    prefix += metadata.numberingPlan.leadingDigits();\n  }\n\n  return prefix;\n}\n//# sourceMappingURL=getInternationalPhoneNumberPrefix.js.map","function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\nimport parsePhoneNumber from 'libphonenumber-js/core';\n/**\r\n * Formats a phone number.\r\n * Is a proxy for `libphonenumber-js`'s `.format()` function of a parsed `PhoneNumber`.\r\n * @param  {string} value\r\n * @param  {string} [format]\r\n * @param  {object} metadata\r\n * @return {string}\r\n */\n\nexport default function formatPhoneNumber(value, format, metadata) {\n  if (!metadata) {\n    if (_typeof(format) === 'object') {\n      metadata = format;\n      format = 'NATIONAL';\n    }\n  }\n\n  if (!value) {\n    return '';\n  }\n\n  var phoneNumber = parsePhoneNumber(value, metadata);\n\n  if (!phoneNumber) {\n    return '';\n  } // Deprecated.\n  // Legacy `format`s.\n\n\n  switch (format) {\n    case 'National':\n      format = 'NATIONAL';\n      break;\n\n    case 'International':\n      format = 'INTERNATIONAL';\n      break;\n  }\n\n  return phoneNumber.format(format);\n}\nexport function formatPhoneNumberIntl(value, metadata) {\n  return formatPhoneNumber(value, 'INTERNATIONAL', metadata);\n}\n//# sourceMappingURL=formatPhoneNumber.js.map","function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nimport { useRef, useState, useCallback, useEffect } from 'react';\nimport { AsYouType, getCountryCallingCode, parseDigits } from 'libphonenumber-js/core';\nimport getInternationalPhoneNumberPrefix from './helpers/getInternationalPhoneNumberPrefix.js';\n/**\r\n * Returns `[phoneDigits, setPhoneDigits]`.\r\n * \"Phone digits\" includes not only \"digits\" but also a `+` sign.\r\n */\n\nexport default function usePhoneDigits(_ref) {\n  var _this = this;\n\n  var value = _ref.value,\n      onChange = _ref.onChange,\n      country = _ref.country,\n      defaultCountry = _ref.defaultCountry,\n      international = _ref.international,\n      withCountryCallingCode = _ref.withCountryCallingCode,\n      useNationalFormatForDefaultCountryValue = _ref.useNationalFormatForDefaultCountryValue,\n      metadata = _ref.metadata;\n  var countryMismatchDetected = useRef();\n\n  var onCountryMismatch = function onCountryMismatch(value, country, actualCountry) {\n    console.error(\"[react-phone-number-input] Expected phone number \".concat(value, \" to correspond to country \").concat(country, \" but \").concat(actualCountry ? 'in reality it corresponds to country ' + actualCountry : 'it doesn\\'t', \".\"));\n    countryMismatchDetected.current = true;\n  };\n\n  var getInitialPhoneDigits = function getInitialPhoneDigits(options) {\n    return getPhoneDigitsForValue(value, country, international, withCountryCallingCode, defaultCountry, useNationalFormatForDefaultCountryValue, metadata, function () {\n      if (options && options.onCountryMismatch) {\n        options.onCountryMismatch();\n      }\n\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      onCountryMismatch.apply(_this, args);\n    });\n  }; // This is only used to detect `country` property change.\n\n\n  var _useState = useState(country),\n      _useState2 = _slicedToArray(_useState, 2),\n      prevCountry = _useState2[0],\n      setPrevCountry = _useState2[1]; // This is only used to detect `defaultCountry` property change.\n\n\n  var _useState3 = useState(defaultCountry),\n      _useState4 = _slicedToArray(_useState3, 2),\n      prevDefaultCountry = _useState4[0],\n      setPrevDefaultCountry = _useState4[1]; // `phoneDigits` is the `value` passed to the `<input/>`.\n\n\n  var _useState5 = useState(getInitialPhoneDigits()),\n      _useState6 = _slicedToArray(_useState5, 2),\n      phoneDigits = _useState6[0],\n      setPhoneDigits = _useState6[1]; // This is only used to detect `value` property changes.\n\n\n  var _useState7 = useState(value),\n      _useState8 = _slicedToArray(_useState7, 2),\n      valueForPhoneDigits = _useState8[0],\n      setValueForPhoneDigits = _useState8[1]; // Rerender hack.\n\n\n  var _useState9 = useState(),\n      _useState10 = _slicedToArray(_useState9, 2),\n      rerenderTrigger = _useState10[0],\n      setRerenderTrigger = _useState10[1];\n\n  var rerender = useCallback(function () {\n    return setRerenderTrigger({});\n  }, [setRerenderTrigger]);\n\n  function getValueForPhoneDigits(phoneDigits) {\n    // If the user hasn't input any digits then `value` is `undefined`.\n    if (!phoneDigits) {\n      return;\n    }\n\n    if (country && international && !withCountryCallingCode) {\n      phoneDigits = \"+\".concat(getCountryCallingCode(country, metadata)).concat(phoneDigits);\n    } // Return the E.164 phone number value.\n    //\n    // Even if no \"national (significant) number\" digits have been input,\n    // still return a non-`undefined` value.\n    // https://gitlab.com/catamphetamine/react-phone-number-input/-/issues/113\n    //\n    // For example, if the user has selected country `US` and entered `\"1\"`\n    // then that `\"1\"` is just a \"national prefix\" and no \"national (significant) number\"\n    // digits have been input yet. Still, return `\"+1\"` as `value` in such cases,\n    // because otherwise the app would think that the input is empty and mark it as such\n    // while in reality it isn't empty, which might be thought of as a \"bug\", or just\n    // a \"weird\" behavior.\n    //\n    // The only case when there's any input and `getNumberValue()` still returns `undefined`\n    // is when that input is `\"+\"`.\n    //\n\n\n    var asYouType = new AsYouType(country || defaultCountry, metadata);\n    asYouType.input(phoneDigits);\n    return asYouType.getNumberValue();\n  } // If `value` property has been changed externally\n  // then re-initialize the component.\n\n\n  useEffect(function () {\n    if (value !== valueForPhoneDigits) {\n      setValueForPhoneDigits(value);\n      setPhoneDigits(getInitialPhoneDigits());\n    }\n  }, [value]); // If the `country` has been changed then re-initialize the component.\n\n  useEffect(function () {\n    if (country !== prevCountry) {\n      setPrevCountry(country);\n\n      var _countryMismatchDetected;\n\n      var _phoneDigits = getInitialPhoneDigits({\n        onCountryMismatch: function onCountryMismatch() {\n          _countryMismatchDetected = true;\n        }\n      });\n\n      setPhoneDigits(_phoneDigits);\n\n      if (_countryMismatchDetected) {\n        setValueForPhoneDigits(getValueForPhoneDigits(_phoneDigits));\n      }\n    }\n  }, [country]); // If the `defaultCountry` has been changed then re-initialize the component.\n\n  useEffect(function () {\n    if (defaultCountry !== prevDefaultCountry) {\n      setPrevDefaultCountry(defaultCountry);\n      setPhoneDigits(getInitialPhoneDigits());\n    }\n  }, [defaultCountry]); // Update the `value` after `valueForPhoneDigits` has been updated.\n\n  useEffect(function () {\n    if (valueForPhoneDigits !== value) {\n      onChange(valueForPhoneDigits);\n    }\n  }, [valueForPhoneDigits]);\n  var onSetPhoneDigits = useCallback(function (phoneDigits) {\n    var value;\n\n    if (country) {\n      if (international && withCountryCallingCode) {\n        // The `<input/>` value must start with the country calling code.\n        var prefix = getInternationalPhoneNumberPrefix(country, metadata);\n\n        if (phoneDigits.indexOf(prefix) !== 0) {\n          // If a user tabs into a phone number input field\n          // that is `international` and `withCountryCallingCode`,\n          // and then starts inputting local phone number digits,\n          // the first digit would get \"swallowed\" if the fix below wasn't implemented.\n          // https://gitlab.com/catamphetamine/react-phone-number-input/-/issues/43\n          if (phoneDigits && phoneDigits[0] !== '+') {\n            phoneDigits = prefix + phoneDigits;\n          } else {\n            // // Reset phone digits if they don't start with the correct prefix.\n            // // Undo the `<input/>` value change if it doesn't.\n            if (countryMismatchDetected.current) {// In case of a `country`/`value` mismatch,\n              // if it performed an \"undo\" here, then\n              // it wouldn't let a user edit their phone number at all,\n              // so this special case at least allows phone number editing\n              // when `value` already doesn't match the `country`.\n            } else {\n              // If it simply did `phoneDigits = prefix` here,\n              // then it could have no effect when erasing phone number\n              // via Backspace, because `phoneDigits` in `state` wouldn't change\n              // as a result, because it was `prefix` and it became `prefix`,\n              // so the component wouldn't rerender, and the user would be able\n              // to erase the country calling code part, and that part is\n              // assumed to be non-eraseable. That's why the component is\n              // forcefully rerendered here.\n              setPhoneDigits(prefix);\n              setValueForPhoneDigits(undefined); // Force a re-render of the `<input/>` with previous `phoneDigits` value.\n\n              return rerender();\n            }\n          }\n        }\n      } else {\n        // Entering phone number either in \"national\" format\n        // when `country` has been specified, or in \"international\" format\n        // when `country` has been specified but `withCountryCallingCode` hasn't.\n        // Therefore, `+` is not allowed.\n        if (phoneDigits && phoneDigits[0] === '+') {\n          // Remove the `+`.\n          phoneDigits = phoneDigits.slice(1);\n        }\n      }\n    } else if (!defaultCountry) {\n      // Force a `+` in the beginning of a `value`\n      // when no `country` and `defaultCountry` have been specified.\n      if (phoneDigits && phoneDigits[0] !== '+') {\n        // Prepend a `+`.\n        phoneDigits = '+' + phoneDigits;\n      }\n    } // Convert `phoneDigits` to `value`.\n\n\n    if (phoneDigits) {\n      value = getValueForPhoneDigits(phoneDigits);\n    }\n\n    setPhoneDigits(phoneDigits);\n    setValueForPhoneDigits(value);\n  }, [country, international, withCountryCallingCode, defaultCountry, metadata, setPhoneDigits, setValueForPhoneDigits, rerender, countryMismatchDetected]);\n  return [phoneDigits, onSetPhoneDigits];\n}\n/**\r\n * Returns phone number input field value for a E.164 phone number `value`.\r\n * @param  {string} [value]\r\n * @param  {string} [country]\r\n * @param  {boolean} [international]\r\n * @param  {boolean} [withCountryCallingCode]\r\n * @param  {string} [defaultCountry]\r\n * @param  {boolean} [useNationalFormatForDefaultCountryValue]\r\n * @param  {object} metadata\r\n * @return {string}\r\n */\n\nfunction getPhoneDigitsForValue(value, country, international, withCountryCallingCode, defaultCountry, useNationalFormatForDefaultCountryValue, metadata, onCountryMismatch) {\n  if (country && international && withCountryCallingCode) {\n    var prefix = getInternationalPhoneNumberPrefix(country, metadata);\n\n    if (value) {\n      if (value.indexOf(prefix) !== 0) {\n        onCountryMismatch(value, country);\n      }\n\n      return value;\n    }\n\n    return prefix;\n  }\n\n  if (!value) {\n    return '';\n  }\n\n  if (!country && !defaultCountry) {\n    return value;\n  }\n\n  var asYouType = new AsYouType(undefined, metadata);\n  asYouType.input(value);\n  var phoneNumber = asYouType.getNumber();\n\n  if (phoneNumber) {\n    if (country) {\n      if (phoneNumber.country && phoneNumber.country !== country) {\n        onCountryMismatch(value, country, phoneNumber.country);\n      } else if (phoneNumber.countryCallingCode !== getCountryCallingCode(country, metadata)) {\n        onCountryMismatch(value, country);\n      }\n\n      if (international) {\n        return phoneNumber.nationalNumber;\n      }\n\n      return parseDigits(phoneNumber.formatNational());\n    } else {\n      // `phoneNumber.countryCallingCode` is compared here  instead of\n      // `phoneNumber.country`, because, for example, a person could have\n      // previously input a phone number (in \"national\" format) that isn't\n      // 100% valid for the `defaultCountry`, and if `phoneNumber.country`\n      // was compared, then it wouldn't match, and such phone number\n      // wouldn't be formatted as a \"national\" one, and instead would be\n      // formatted as an \"international\" one, confusing the user.\n      // Comparing `phoneNumber.countryCallingCode` works around such issues.\n      //\n      // Example: `defaultCountry=\"US\"` and the `<input/>` is empty.\n      // The user inputs: \"222 333 4444\", which gets formatted to \"(222) 333-4444\".\n      // The user then clicks \"Save\", the page is refreshed, and the user sees\n      // that the `<input/>` value is now \"+1 222 333 4444\" which confuses the user:\n      // the user expected the `<input/>` value to be \"(222) 333-4444\", same as it\n      // was when they've just typed it in. The cause of the issue is that \"222 333 4444\"\n      // is not a valid national number for US, and `phoneNumber.country` is compared\n      // instead of `phoneNumber.countryCallingCode`. After the `phoneNumber.country`\n      // comparison is replaced with `phoneNumber.countryCallingCode` one, the issue\n      // is no longer the case.\n      //\n      if (phoneNumber.countryCallingCode && phoneNumber.countryCallingCode === getCountryCallingCode(defaultCountry, metadata) && useNationalFormatForDefaultCountryValue) {\n        return parseDigits(phoneNumber.formatNational());\n      }\n\n      return value;\n    }\n  } else {\n    return '';\n  }\n}\n//# sourceMappingURL=usePhoneDigits.js.map","var _excluded = [\"Component\", \"country\", \"defaultCountry\", \"useNationalFormatForDefaultCountryValue\", \"value\", \"onChange\", \"metadata\", \"international\", \"withCountryCallingCode\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport usePhoneDigits from './usePhoneDigits.js';\n\nfunction PhoneInput(_ref, ref) {\n  var Component = _ref.Component,\n      country = _ref.country,\n      defaultCountry = _ref.defaultCountry,\n      useNationalFormatForDefaultCountryValue = _ref.useNationalFormatForDefaultCountryValue,\n      value = _ref.value,\n      onChange = _ref.onChange,\n      metadata = _ref.metadata,\n      international = _ref.international,\n      withCountryCallingCode = _ref.withCountryCallingCode,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  // \"Phone digits\" includes not only \"digits\" but also a `+` sign.\n  var _usePhoneDigits = usePhoneDigits({\n    value: value,\n    onChange: onChange,\n    country: country,\n    defaultCountry: defaultCountry,\n    international: international,\n    withCountryCallingCode: withCountryCallingCode,\n    useNationalFormatForDefaultCountryValue: useNationalFormatForDefaultCountryValue,\n    metadata: metadata\n  }),\n      _usePhoneDigits2 = _slicedToArray(_usePhoneDigits, 2),\n      phoneDigits = _usePhoneDigits2[0],\n      setPhoneDigits = _usePhoneDigits2[1];\n\n  return /*#__PURE__*/React.createElement(Component, _extends({}, rest, {\n    ref: ref,\n    metadata: metadata,\n    international: international,\n    withCountryCallingCode: withCountryCallingCode,\n    country: country || defaultCountry,\n    value: phoneDigits,\n    onChange: setPhoneDigits\n  }));\n}\n\nPhoneInput = /*#__PURE__*/React.forwardRef(PhoneInput);\nPhoneInput.propTypes = {\n  /**\r\n   * The phone number (in E.164 format).\r\n   * Examples: `\"+12\"`, `\"+12133734253\"`.\r\n   * An \"empty\" `value` could be represented by any \"falsy\" value like `undefined`, `null` or an empty string `\"\"`.\r\n   */\n  value: PropTypes.string,\n\n  /**\r\n   * A function of `value: string?`.\r\n   * Updates the `value` property (to `undefined` in case it's empty).\r\n   */\n  onChange: PropTypes.func.isRequired,\n\n  /**\r\n   * A two-letter country code for formatting `value`\r\n   * as a national phone number (example: `(213) 373-4253`),\r\n   * or as an international phone number without \"country calling code\"\r\n   * if `international` property is passed (example: `213 373 4253`).\r\n   * Example: \"US\".\r\n   * If no `country` is passed then `value`\r\n   * is formatted as an international phone number.\r\n   * (example: `+1 213 373 4253`)\r\n   */\n  country: PropTypes.string,\n\n  /**\r\n   * A two-letter country code for formatting `value`\r\n   * when a user inputs a national phone number (example: `(213) 373-4253`).\r\n   * The user can still input a phone number in international format.\r\n   * Example: \"US\".\r\n   * `country` and `defaultCountry` properties are mutually exclusive.\r\n   */\n  defaultCountry: PropTypes.string,\n\n  /**\r\n   * If `country` property is passed along with `international={true}` property\r\n   * then the phone number will be input in \"international\" format for that `country`\r\n   * (without \"country calling code\").\r\n   * For example, if `country=\"US\"` property is passed to \"without country select\" input\r\n   * then the phone number will be input in the \"national\" format for `US` (`(213) 373-4253`).\r\n   * But if both `country=\"US\"` and `international={true}` properties are passed then\r\n   * the phone number will be input in the \"international\" format for `US` (`213 373 4253`)\r\n   * (without \"country calling code\" `+1`).\r\n   */\n  international: PropTypes.bool,\n\n  /**\r\n   * If `country` and `international` properties are set,\r\n   * then by default it won't include \"country calling code\" in the input field.\r\n   * To change that, pass `withCountryCallingCode` property,\r\n   * and it will include \"country calling code\" in the input field.\r\n   */\n  withCountryCallingCode: PropTypes.bool,\n\n  /**\r\n   * A component that renders the `<input/>` itself and also\r\n   * parses and formats its `value` as the user inputs it.\r\n   */\n  Component: PropTypes.elementType.isRequired,\n\n  /**\r\n   * When `defaultCountry` is defined and the initial `value` corresponds to `defaultCountry`,\r\n   * then the `value` will be formatted as a national phone number by default.\r\n   * To format the initial `value` of `defaultCountry` as an international number instead\r\n   * set `useNationalFormatForDefaultCountryValue` property to `true`.\r\n   */\n  useNationalFormatForDefaultCountryValue: PropTypes.bool.isRequired,\n\n  /**\r\n   * `libphonenumber-js` metadata.\r\n   */\n  metadata: PropTypes.object.isRequired\n};\nPhoneInput.defaultProps = {\n  /**\r\n   * Set to `true` to force international phone number format\r\n   * (without \"country calling code\") when `country` is specified.\r\n   */\n  // international: false,\n\n  /**\r\n   * Prefer national format when formatting E.164 phone number `value`\r\n   * corresponding to `defaultCountry`.\r\n   */\n  useNationalFormatForDefaultCountryValue: true\n};\nexport default PhoneInput;\n//# sourceMappingURL=PhoneInput.js.map","var _excluded = [\"smartCaret\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport PhoneInput_ from './PhoneInput.js';\nimport InputSmart from './InputSmart.js';\nimport InputBasic from './InputBasic.js';\nexport function createInput(defaultMetadata) {\n  function PhoneInput(_ref, ref) {\n    var smartCaret = _ref.smartCaret,\n        rest = _objectWithoutProperties(_ref, _excluded);\n\n    return /*#__PURE__*/React.createElement(PhoneInput_, _extends({}, rest, {\n      ref: ref,\n      Component: smartCaret ? InputSmart : InputBasic\n    }));\n  }\n\n  PhoneInput = /*#__PURE__*/React.forwardRef(PhoneInput);\n  PhoneInput.propTypes = {\n    /**\r\n     * HTML `<input/>` `type` attribute.\r\n     */\n    type: PropTypes.string,\n\n    /**\r\n     * HTML `<input/>` `autocomplete` attribute.\r\n     */\n    autoComplete: PropTypes.string,\n\n    /**\r\n     * By default, the caret position is being \"intelligently\" managed\r\n     * while a user inputs a phone number.\r\n     * This \"smart\" caret behavior can be turned off\r\n     * by passing `smartCaret={false}` property.\r\n     * This is just an \"escape hatch\" for any possible caret position issues.\r\n     */\n    // Is `true` by default.\n    smartCaret: PropTypes.bool.isRequired,\n\n    /**\r\n     * `libphonenumber-js` metadata.\r\n     */\n    metadata: PropTypes.object.isRequired\n  };\n  PhoneInput.defaultProps = {\n    /**\r\n     * HTML `<input/>` `type=\"tel\"`.\r\n     */\n    type: 'tel',\n\n    /**\r\n     * Remember (and autofill) the value as a phone number.\r\n     */\n    autoComplete: 'tel',\n\n    /**\r\n     * Set to `false` to use \"basic\" caret instead of the \"smart\" one.\r\n     */\n    smartCaret: true,\n\n    /**\r\n     * `libphonenumber-js` metadata.\r\n     */\n    metadata: defaultMetadata\n  };\n  return PhoneInput;\n}\nexport default createInput();\n//# sourceMappingURL=PhoneInputBrowser.js.map","import metadata from 'libphonenumber-js/metadata.mobile.json'\r\n\r\nimport {\r\n\tparsePhoneNumber as _parsePhoneNumber,\r\n\tformatPhoneNumber as _formatPhoneNumber,\r\n\tformatPhoneNumberIntl as _formatPhoneNumberIntl,\r\n\tisValidPhoneNumber as _isValidPhoneNumber,\r\n\tisPossiblePhoneNumber as _isPossiblePhoneNumber,\r\n\tgetCountries as _getCountries,\r\n\tgetCountryCallingCode as _getCountryCallingCode,\r\n\tisSupportedCountry as _isSupportedCountry\r\n} from '../core/index.js'\r\n\r\nimport { createInput } from '../modules/PhoneInputBrowser.js'\r\n\r\nfunction call(func, _arguments) {\r\n\tvar args = Array.prototype.slice.call(_arguments)\r\n\targs.push(metadata)\r\n\treturn func.apply(this, args)\r\n}\r\n\r\nexport default createInput(metadata)\r\n\r\nexport function parsePhoneNumber() {\r\n\treturn call(_parsePhoneNumber, arguments)\r\n}\r\n\r\nexport function formatPhoneNumber() {\r\n\treturn call(_formatPhoneNumber, arguments)\r\n}\r\n\r\nexport function formatPhoneNumberIntl() {\r\n\treturn call(_formatPhoneNumberIntl, arguments)\r\n}\r\n\r\nexport function isValidPhoneNumber() {\r\n\treturn call(_isValidPhoneNumber, arguments)\r\n}\r\n\r\nexport function isPossiblePhoneNumber() {\r\n\treturn call(_isPossiblePhoneNumber, arguments)\r\n}\r\n\r\nexport function getCountries() {\r\n\treturn call(_getCountries, arguments)\r\n}\r\n\r\nexport function getCountryCallingCode() {\r\n\treturn call(_getCountryCallingCode, arguments)\r\n}\r\n\r\nexport function isSupportedCountry() {\r\n\treturn call(_isSupportedCountry, arguments)\r\n}"],"names":["_createForOfIteratorHelperLoose","o","allowArrayLike","it","Symbol","iterator","call","next","bind","Array","isArray","minLen","_arrayLikeToArray","n","Object","prototype","toString","slice","constructor","name","from","test","_unsupportedIterableToArray","length","i","done","value","TypeError","arr","len","arr2","count_occurences","symbol","string","_step","count","_iterator","split","closeBraces","retained_template","template","placeholder","arguments","undefined","empty_placeholder","cut_before","opening_braces","closing_braces","dangling_braces","replace","format","caret","formatter","should_close_braces","text","characters_in_template","value_character_index","filled_in_template","character","close_braces","template_formatter","_ref","index","found","possibly_last_input_character_index","Keys","setCaretPosition","element","caret_position","navigator","ANDROID_USER_AGENT_REG_EXP","userAgent","isAndroid","setSelectionRange","setTimeout","onKeyDown","event","input","_parse","_format","on_change","hasAttribute","operation","keyCode","getOperation","preventDefault","selection","selectionStart","selectionEnd","start","end","getSelection","eraseSelection","formatInputText","_parse2","parse_character","focused_input_character_index","parse","newValueAndCaret","edit","formatted","_excluded","_extends","assign","target","source","key","hasOwnProperty","apply","this","_objectWithoutProperties","excluded","sourceKeys","keys","indexOf","_objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","propertyIsEnumerable","Input","ref","InputComponent","inputComponent","onChange","rest","internalRef","useRef","setRef","useCallback","instance","current","_onChange","_onKeyDown","onInputKeyDown","React","createElement","isEmptyValue","forwardRef","propTypes","PropTypes","func","isRequired","elementType","type","onCut","onPaste","defaultProps","Input$1","_typeof","obj","_defineProperties","props","descriptor","enumerable","configurable","writable","defineProperty","_possibleConstructorReturn","self","_assertThisInitialized","ReferenceError","_wrapNativeSuper","Class","_cache","Map","fn","Function","has","get","set","Wrapper","_construct","_getPrototypeOf","create","_setPrototypeOf","Parent","args","_isNativeReflectConstruct","Reflect","construct","a","push","sham","Proxy","Boolean","valueOf","e","p","setPrototypeOf","__proto__","getPrototypeOf","ParseError","_Error","subClass","superClass","_inherits","Derived","hasNativeReflectConstruct","Constructor","protoProps","staticProps","_super","result","Super","NewTarget","code","_this","_classCallCheck","Error","VALID_DIGITS","VALID_PUNCTUATION","concat","compare","b","pa","pb","na","Number","nb","isNaN","_createClass","DEFAULT_EXT_PREFIX","CALLING_CODE_REG_EXP","Metadata","metadata","is_object","countries","join","type_of","validateMetadata","setVersion","filter","_","countryCode","v1","v2","v3","nonGeographic","nonGeographical","country","getCountryMetadata","callingCode","getCountryCodesForCallingCode","countryCodes","countryCallingCodes","selectNumberingPlan","hasCountry","numberingPlan","NumberingPlan","hasCallingCode","getNumberingPlanMetadata","getCountryCodeForCallingCode","IDDPrefix","defaultIDDPrefix","nationalNumberPattern","possibleLengths","formats","nationalPrefixForParsing","nationalPrefixTransformRule","leadingDigits","hasTypes","_type","ext","country_phone_code_to_countries","country_calling_codes","globalMetadataObject","_getFormats","getDefaultCountryMetadataForRegion","map","Format","_getNationalPrefixFormattingRule","_nationalPrefixForParsing","nationalPrefix","_getNationalPrefixIsOptionalWhenFormatting","types","_type2","getType","Type","nationalPrefixFormattingRule","nationalPrefixIsOptionalWhenFormattingInNationalFormat","usesNationalPrefix","FIRST_GROUP_ONLY_PREFIX_PATTERN","getCountryCallingCode","countryCallingCode","isSupportedCountry","version","v4","getExtensionDigitsPattern","maxLength","createExtensionPattern","purpose","optionalExtnSuffix","possibleSeparatorsBetweenNumberAndExtLabel","possibleSeparatorsNumberExtLabelNoComma","VALID_PHONE_NUMBER","VALID_PHONE_NUMBER_START_REG_EXP","RegExp","VALID_PHONE_NUMBER_WITH_EXTENSION","VALID_PHONE_NUMBER_PATTERN","isViablePhoneNumber","number","EXTN_PATTERN","DIGITS","0","1","2","3","4","5","6","7","8","9","０","１","２","３","４","５","６","７","８","９","٠","١","٢","٣","٤","٥","٦","٧","٨","٩","۰","۱","۲","۳","۴","۵","۶","۷","۸","۹","parseDigit","parseDigits","digit","parseIncompletePhoneNumber","parsePhoneNumberCharacter","prevParsedCharacters","checkNumberLength","nationalNumber","checkNumberLengthForType","type_info","possible_lengths","mobile_type","merged","sort","mergeArrays","actual_length","minimum_length","isPossibleNumber","_slicedToArray","_arrayWithHoles","_i","_s","_e","_arr","_n","_d","err","_iterableToArrayLimit","_nonIterableRest","parseRFC3966","_part$split2","matchesEntirely","regular_expression","NON_FIXED_LINE_PHONE_TYPES","getNumberType","options","phone","isNumberTypeEqualTo","pattern","applyInternationalSeparatorStyle","formattedNumber","trim","FIRST_GROUP_PATTERN","formatNationalNumberUsingFormat","useInternationalFormat","withNationalPrefix","carrierCode","internationalFormat","SINGLE_IDD_PREFIX_REG_EXP","ownKeys","object","enumerableOnly","symbols","sym","getOwnPropertyDescriptor","_objectSpread","forEach","_defineProperty","getOwnPropertyDescriptors","defineProperties","DEFAULT_OPTIONS","formatExtension","extension","formatNumber","addExtension","formatNationalNumber","formatRFC3966","fromCountry","iddPrefix","countryMetadata","getIddPrefix","formatIDD","formatAs","availableFormats","nationalNnumber","leadingDigitsPatterns","lastLeadingDigitsPattern","search","chooseFormatForNumber","PhoneNumber","_metadata","isCountryCode","isNonGeographicCallingCode","isValidNumber","phoneNumber","CAPTURING_DIGIT_PATTERN","stripIddPrefix","IDDPrefixPattern","matchedGroups","match","extractNationalNumberFromPossiblyIncompleteNumber","prefixPattern","prefixMatch","exec","capturedGroupsCount","hasCapturedGroups","prefixBeforeNationalNumber","possiblePositionOfTheFirstCapturedGroup","extractNationalNumber","_extractNationalNumbe","nationalNumberBefore","nationalNumberAfter","shouldHaveExtractedNationalPrefix","isPossibleIncompleteNationalNumber","extractCountryCallingCodeFromInternationalNumberWithoutPlusSign","possibleShorterNumber","possibleShorterNationalNumber","extractCountryCallingCode","numberWithoutIDD","_extractCountryCallin","shorterNumber","_countryCallingCode","getCountryByCallingCode","nationalPhoneNumber","possibleCountries","selectCountryFromList","PHONE_NUMBER_START_PATTERN","AFTER_PHONE_NUMBER_END_PATTERN","defaultCountry","_parseInput","extract","throwOnError","startsAt","extractFormattedPhoneNumber","isViablePhoneNumberStart","error","withExtensionStripped","numberWithoutExtension","matches","extractExtension","parseInput","formattedPhoneNumber","_parsePhoneNumber","defaultCallingCode","exactCountry","parsePhoneNumber","hasSelectedNumberingPlan","valid","extended","possible","normalizeArguments","_Array$prototype$slic2","arg_1","arg_2","arg_3","arg_4","isObject","parsePhoneNumberFromString","parseNumber","_normalizeArguments","parsePhoneNumberFromString_","isValidPhoneNumber","isValid","isPossiblePhoneNumber","isPossible","AsYouTypeState","onCountryChange","onCallingCodeChange","international","missingPlus","digits","resetNationalSignificantNumber","initCountryAndCallingCode","nationalSignificantNumber","getNationalDigits","nationalSignificantNumberMatchesInput","complexPrefixBeforeNationalSignificantNumber","properties","_Object$keys","setCountry","setCallingCode","nextDigits","DIGIT_PLACEHOLDER","DIGIT_PLACEHOLDER_MATCHER","repeat","times","cutAndStripNonPairedParens","cutBeforeIndex","pop","cleared_string","_dangling_braces","stripNonPairedParens","formatCompleteNumber","state","shouldTryNationalPrefixFormattingRule","getSeparatorAfterNationalPrefix","_ref2","useNationalPrefixFormattingRule","formatNationalNumberWithAndWithoutNationalPrefixFormattingRule","_ref3","formattedNationalNumber","isValidFormattedNationalNumber","PatternMatcher","matchTree","PatternParser","allowOverflow","_match","matchedChars","overflow","characters","tree","last","characterString","partialMatch","restCharacters","JSON","stringify","op","_result","_step2","_iterator2","_char","OPERATOR","ILLEGAL_CHARACTER_REGEXP","context","or","instructions","parsePattern","_this$context$","branches","operator","before","rightPart","startContext","getContext","endContext","oneOfSet","parseOneOfSet","values","prevValue","charCodeAt","nextValue","String","fromCharCode","LONGEST_DUMMY_PHONE_NUMBER","NATIONAL_PREFIX_SEPARATORS_PATTERN","NON_ALTERING_FORMAT_REG_EXP","AsYouTypeFormatter","resetFormat","chosenFormat","nationalNumberTemplate","populatedNationalNumberTemplate","populatedNationalNumberTemplatePosition","isNANP","matchingFormats","narrowDownMatchingFormats","canFormatCompleteNumber","formattedCompleteNumber","setNationalNumberTemplate","lastIndexOf","formatNationalNumberWithNextDigits","previouslyChosenFormat","newlyChosenFormat","chooseFormat","formatNextNationalNumberDigits","_this2","leadingDigitsPatternIndex","formatSuits","formatMatches","nationalPrefixIsMandatoryWhenFormattingInNationalFormat","leadingDigitsPatternsCount","Math","min","leadingDigitsPattern","console","_this3","_loop","getFormatFormat","createTemplateForFormat","_ret","getTemplateForFormat","spacing","internationalPrefix","getInternationalPrefixBeforeCountryCallingCode","getDigitsWithoutInternationalPrefix","_ref4","strictPattern","nationalNumberDummyDigits","nationalPrefixIncludedInTemplate","numberFormat","numberFormatWithNationalPrefix","position","populateTemplateWithDigits","_ref5","VALID_FORMATTED_PHONE_NUMBER_DIGITS_PART_PATTERN","VALID_FORMATTED_PHONE_NUMBER_PART","AFTER_PHONE_NUMBER_DIGITS_END_PATTERN","COMPLEX_NATIONAL_PREFIX","AsYouTypeParser","onNationalSignificantNumberChange","justLeadingPlus","_extractFormattedDigi","_extractFormattedDigi4","extractedNumber","hasPlus","_extractFormattedDigitsAndPlus","formattedDigits","extractFormattedDigitsAndPlus","_extractFormattedDigi2","startInternationalNumber","inputDigits","hasReceivedThreeLeadingDigits","appendDigits","extractIddPrefix","isWaitingForCountryCallingCode","appendNationalSignificantNumberDigits","hasExtractedNationalSignificantNumber","extractNationalSignificantNumber","stateUpdate","update","_extractCountryCallingCode","couldPossiblyExtractAnotherNationalSignificantNumber","nationalDigits","setState","onExtractedNationalNumber","prevNationalSignificantNumber","_extractNationalNumbe2","nationalSignificantNumberIndex","extractAnotherNationalSignificantNumber","fixMissingPlus","extractCallingCodeAndNationalSignificantNumber","_extractCountryCallin2","newCallingCode","AsYouType","optionsOrDefaultCountry","_this$getCountryAndCa2","getCountryAndCallingCode","reset","_this$parser$input","parser","formattedOutput","determineTheCountryIfNeeded","reExtractNationalSignificantNumber","getFullNumber","getNonFormattedNumber","isInternational","getCallingCode","_getCountry","isCountryCallingCodeAmbiguous","determineTheCountry","prefix","_this$state","getNonFormattedNationalNumberWithPrefix","_this$state2","_this$state3","getNumber","getTemplate","getNonFormattedTemplate","getCountries","getInputValuePrefix","withCountryCallingCode","removeInputValuePrefix","InputSmart","defaultMetadata","bool","createInput","InputBasic","newValue","formatIncompletePhoneNumber","ONLY_DIGITS_REGEXP","getInternationalPhoneNumberPrefix","formatPhoneNumber","formatPhoneNumberIntl","usePhoneDigits","useNationalFormatForDefaultCountryValue","countryMismatchDetected","onCountryMismatch","actualCountry","getInitialPhoneDigits","asYouType","formatNational","getPhoneDigitsForValue","_len","_key","_useState2","useState","prevCountry","setPrevCountry","_useState4","prevDefaultCountry","setPrevDefaultCountry","_useState6","phoneDigits","setPhoneDigits","_useState8","valueForPhoneDigits","setValueForPhoneDigits","_useState10","setRerenderTrigger","rerender","getValueForPhoneDigits","getNumberValue","useEffect","_countryMismatchDetected","_phoneDigits","onSetPhoneDigits","PhoneInput","Component","_usePhoneDigits2","PhoneInput_","smartCaret","autoComplete","_arguments","_formatPhoneNumber","_formatPhoneNumberIntl","_getCountries","_getCountryCallingCode","_isPossiblePhoneNumber","_isSupportedCountry","_isValidPhoneNumber"],"mappings":"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"}